// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DecisonInterface.proto

#include "DecisonInterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlPointInf_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DDTDecision_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DDTDecision_ObjectDecision_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugPointInf_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DecisionService_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Header_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionDecision_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NavigationService_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathBoundPoint_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Recommendation_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefLinePoint_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TrajectoryPlanningService_DecisonInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DecisonInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_DecisonInterface_2eproto;
namespace IBUS {
class RecommendationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Recommendation> _instance;
} _Recommendation_default_instance_;
class MissionDecisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionDecision> _instance;
} _MissionDecision_default_instance_;
class DDTDecision_ObjectDecisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DDTDecision_ObjectDecision> _instance;
} _DDTDecision_ObjectDecision_default_instance_;
class DDTDecisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DDTDecision> _instance;
} _DDTDecision_default_instance_;
class TrajectoryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPoint> _instance;
} _TrajectoryPoint_default_instance_;
class RefLinePointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefLinePoint> _instance;
} _RefLinePoint_default_instance_;
class PathBoundPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathBoundPoint> _instance;
} _PathBoundPoint_default_instance_;
class DebugPointInfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugPointInf> _instance;
} _DebugPointInf_default_instance_;
class ControlPointInfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlPointInf> _instance;
} _ControlPointInf_default_instance_;
class NavigationServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationService> _instance;
} _NavigationService_default_instance_;
class DecisionServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionService> _instance;
} _DecisionService_default_instance_;
class TrajectoryPlanningServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPlanningService> _instance;
} _TrajectoryPlanningService_default_instance_;
class DecisionPlanMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionPlanMsg> _instance;
} _DecisionPlanMsg_default_instance_;
}  // namespace IBUS
static void InitDefaultsscc_info_ControlPointInf_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_ControlPointInf_default_instance_;
    new (ptr) ::IBUS::ControlPointInf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::ControlPointInf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlPointInf_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ControlPointInf_DecisonInterface_2eproto}, {}};

static void InitDefaultsscc_info_DDTDecision_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_DDTDecision_default_instance_;
    new (ptr) ::IBUS::DDTDecision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::DDTDecision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DDTDecision_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DDTDecision_DecisonInterface_2eproto}, {
      &scc_info_DDTDecision_ObjectDecision_DecisonInterface_2eproto.base,}};

static void InitDefaultsscc_info_DDTDecision_ObjectDecision_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_DDTDecision_ObjectDecision_default_instance_;
    new (ptr) ::IBUS::DDTDecision_ObjectDecision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::DDTDecision_ObjectDecision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DDTDecision_ObjectDecision_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DDTDecision_ObjectDecision_DecisonInterface_2eproto}, {}};

static void InitDefaultsscc_info_DebugPointInf_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_DebugPointInf_default_instance_;
    new (ptr) ::IBUS::DebugPointInf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::DebugPointInf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugPointInf_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DebugPointInf_DecisonInterface_2eproto}, {
      &scc_info_Point2D_common_2eproto.base,}};

static void InitDefaultsscc_info_DecisionPlanMsg_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_DecisionPlanMsg_default_instance_;
    new (ptr) ::IBUS::DecisionPlanMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::DecisionPlanMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DecisionPlanMsg_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_DecisionPlanMsg_DecisonInterface_2eproto}, {
      &scc_info_NavigationService_DecisonInterface_2eproto.base,
      &scc_info_DecisionService_DecisonInterface_2eproto.base,
      &scc_info_TrajectoryPlanningService_DecisonInterface_2eproto.base,}};

static void InitDefaultsscc_info_DecisionService_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_DecisionService_default_instance_;
    new (ptr) ::IBUS::DecisionService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::DecisionService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DecisionService_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_DecisionService_DecisonInterface_2eproto}, {
      &scc_info_Header_common_2eproto.base,
      &scc_info_MissionDecision_DecisonInterface_2eproto.base,
      &scc_info_DDTDecision_DecisonInterface_2eproto.base,}};

static void InitDefaultsscc_info_MissionDecision_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_MissionDecision_default_instance_;
    new (ptr) ::IBUS::MissionDecision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::MissionDecision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionDecision_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MissionDecision_DecisonInterface_2eproto}, {
      &scc_info_Point2D_common_2eproto.base,}};

static void InitDefaultsscc_info_NavigationService_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_NavigationService_default_instance_;
    new (ptr) ::IBUS::NavigationService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::NavigationService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NavigationService_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_NavigationService_DecisonInterface_2eproto}, {
      &scc_info_Header_common_2eproto.base,
      &scc_info_Recommendation_DecisonInterface_2eproto.base,}};

static void InitDefaultsscc_info_PathBoundPoint_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_PathBoundPoint_default_instance_;
    new (ptr) ::IBUS::PathBoundPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::PathBoundPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathBoundPoint_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PathBoundPoint_DecisonInterface_2eproto}, {
      &scc_info_Point2D_common_2eproto.base,}};

static void InitDefaultsscc_info_Recommendation_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_Recommendation_default_instance_;
    new (ptr) ::IBUS::Recommendation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::Recommendation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Recommendation_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Recommendation_DecisonInterface_2eproto}, {}};

static void InitDefaultsscc_info_RefLinePoint_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_RefLinePoint_default_instance_;
    new (ptr) ::IBUS::RefLinePoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::RefLinePoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefLinePoint_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RefLinePoint_DecisonInterface_2eproto}, {
      &scc_info_Point3D_common_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryPlanningService_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_TrajectoryPlanningService_default_instance_;
    new (ptr) ::IBUS::TrajectoryPlanningService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::TrajectoryPlanningService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TrajectoryPlanningService_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_TrajectoryPlanningService_DecisonInterface_2eproto}, {
      &scc_info_Header_common_2eproto.base,
      &scc_info_TrajectoryPoint_DecisonInterface_2eproto.base,
      &scc_info_RefLinePoint_DecisonInterface_2eproto.base,
      &scc_info_PathBoundPoint_DecisonInterface_2eproto.base,
      &scc_info_DebugPointInf_DecisonInterface_2eproto.base,
      &scc_info_ControlPointInf_DecisonInterface_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryPoint_DecisonInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_TrajectoryPoint_default_instance_;
    new (ptr) ::IBUS::TrajectoryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::TrajectoryPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_DecisonInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrajectoryPoint_DecisonInterface_2eproto}, {
      &scc_info_Point3D_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DecisonInterface_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DecisonInterface_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DecisonInterface_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DecisonInterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::Recommendation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::Recommendation, currentsequenceids_),
  PROTOBUF_FIELD_OFFSET(::IBUS::Recommendation, targetsequeceids_),
  PROTOBUF_FIELD_OFFSET(::IBUS::Recommendation, speedlimits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::MissionDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::MissionDecision, type_),
  PROTOBUF_FIELD_OFFSET(::IBUS::MissionDecision, laneattached_),
  PROTOBUF_FIELD_OFFSET(::IBUS::MissionDecision, parkinglotsattached_),
  PROTOBUF_FIELD_OFFSET(::IBUS::MissionDecision, headingattached_),
  PROTOBUF_FIELD_OFFSET(::IBUS::MissionDecision, statusattached_),
  PROTOBUF_FIELD_OFFSET(::IBUS::MissionDecision, parkingpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision_ObjectDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision_ObjectDecision, objectid_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision_ObjectDecision, objectdtype_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision_ObjectDecision, headingattached_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision_ObjectDecision, statusattached_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision_ObjectDecision, safetlateraldistance_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision_ObjectDecision, safetylongitudinaldistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::DDTDecision, objectsdecisions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, position_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, theta_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, kappa_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, laneid_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, timerelativetostart_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, heading_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, speed_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, accel_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, grade_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, s_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPoint, steer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, s_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, l_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, point_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, theta_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, kappa_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, grade_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, width_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RefLinePoint, laneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::PathBoundPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::PathBoundPoint, pathboundl_),
  PROTOBUF_FIELD_OFFSET(::IBUS::PathBoundPoint, pathboundr_),
  PROTOBUF_FIELD_OFFSET(::IBUS::PathBoundPoint, laneboundl_),
  PROTOBUF_FIELD_OFFSET(::IBUS::PathBoundPoint, laneboundr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::DebugPointInf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::DebugPointInf, debugpoint_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DebugPointInf, pointtype_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DebugPointInf, pointlabel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, gearcmd_),
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, accelerationcmd_),
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, throttleflagcmd_),
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, throttlecmd_),
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, brakeflagcmd_),
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, brakecmd_),
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, steeringcmd_),
  PROTOBUF_FIELD_OFFSET(::IBUS::ControlPointInf, epbcmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::NavigationService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::NavigationService, header_),
  PROTOBUF_FIELD_OFFSET(::IBUS::NavigationService, recommendroadsegments_),
  PROTOBUF_FIELD_OFFSET(::IBUS::NavigationService, navigationserviceflg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionService, header_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionService, mdecision_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionService, ddecision_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionService, decisionserviceflg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, header_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, trajtype_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, trajectorylength_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, trajectorytime_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, trajectorypoints_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, latmaxoffset_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, refline_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, pathbound_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, debugpoint_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, controlpoint_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TrajectoryPlanningService, trajectoryplanningserviceflg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionPlanMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionPlanMsg, navigationinterface_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionPlanMsg, decisioninterface_),
  PROTOBUF_FIELD_OFFSET(::IBUS::DecisionPlanMsg, trajectoryplanninginterface_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IBUS::Recommendation)},
  { 8, -1, sizeof(::IBUS::MissionDecision)},
  { 19, -1, sizeof(::IBUS::DDTDecision_ObjectDecision)},
  { 30, -1, sizeof(::IBUS::DDTDecision)},
  { 36, -1, sizeof(::IBUS::TrajectoryPoint)},
  { 52, -1, sizeof(::IBUS::RefLinePoint)},
  { 65, -1, sizeof(::IBUS::PathBoundPoint)},
  { 74, -1, sizeof(::IBUS::DebugPointInf)},
  { 82, -1, sizeof(::IBUS::ControlPointInf)},
  { 95, -1, sizeof(::IBUS::NavigationService)},
  { 103, -1, sizeof(::IBUS::DecisionService)},
  { 112, -1, sizeof(::IBUS::TrajectoryPlanningService)},
  { 128, -1, sizeof(::IBUS::DecisionPlanMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_Recommendation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_MissionDecision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_DDTDecision_ObjectDecision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_DDTDecision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_RefLinePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_PathBoundPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_DebugPointInf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_ControlPointInf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_NavigationService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_DecisionService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_TrajectoryPlanningService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_DecisionPlanMsg_default_instance_),
};

const char descriptor_table_protodef_DecisonInterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026DecisonInterface.proto\022\004IBUS\032\014common.p"
  "roto\"[\n\016Recommendation\022\032\n\022CurrentSequenc"
  "eIDs\030\001 \001(\004\022\030\n\020TargetSequeceIDs\030\002 \001(\004\022\023\n\013"
  "SpeedLimits\030\003 \001(\r\"\274\004\n\017MissionDecision\022/\n"
  "\004type\030\001 \001(\0162!.IBUS.MissionDecision.Missi"
  "onType\022\024\n\014LaneAttached\030\002 \001(\r\022\033\n\023ParkingL"
  "otsAttached\030\003 \001(\r\022\027\n\017HeadingAttached\030\004 \001"
  "(\001\022=\n\016StatusAttached\030\005 \001(\0162%.IBUS.Missio"
  "nDecision.StatusMDecision\022#\n\014ParkingPoin"
  "t\030\006 \001(\0132\r.IBUS.Point2D\"\354\001\n\013MissionType\022\r"
  "\n\tEND_POINT\020\000\022\n\n\006CRUISE\020\001\022\010\n\004STOP\020\002\022\024\n\020L"
  "ANE_CHANGE_LEFT\020\003\022\025\n\021LANE_CHANGE_RIGHT\020\004"
  "\022\013\n\007PARKING\020\005\022\n\n\006U_TURN\020\006\022\r\n\tTURN_LEFT\020\007"
  "\022\016\n\nTURN_RIGHT\020\010\022\r\n\tWORKING_L\020\t\022\r\n\tWORKI"
  "NG_R\020\n\022\017\n\013WORKING_ALL\020\013\022\021\n\rLANE_BORROW_L"
  "\020\014\022\021\n\rLANE_BORROW_R\020\r\"Y\n\017StatusMDecision"
  "\022\n\n\006NORMAL\020\000\022\r\n\tEMERGENCY\020\001\022\024\n\020COLLSION_"
  "WARNING\020\002\022\025\n\021FAILURE_DECTECTED\020\003\"\367\003\n\013DDT"
  "Decision\022:\n\020ObjectsDecisions\030\001 \003(\0132 .IBU"
  "S.DDTDecision.ObjectDecision\032\253\003\n\016ObjectD"
  "ecision\022\020\n\010ObjectID\030\001 \001(\r\022:\n\013ObjectDType"
  "\030\002 \001(\0162%.IBUS.DDTDecision.ObjectDecision"
  ".type\022\027\n\017HeadingAttached\030\003 \001(\001\022A\n\016Status"
  "Attached\030\004 \001(\0162).IBUS.DDTDecision.Object"
  "Decision.DDTState\022\034\n\024SafetLateralDistanc"
  "e\030\005 \001(\001\022\"\n\032SafetyLongitudinalDistance\030\006 "
  "\001(\001\"Y\n\004type\022\014\n\010O_IGNORE\020\000\022\n\n\006O_STOP\020\001\022\014\n"
  "\010O_FOLLOW\020\002\022\016\n\nO_OVERTAKE\020\003\022\013\n\007O_YIELD\020\004"
  "\022\014\n\010O_BYPASS\020\005\"R\n\010DDTState\022\n\n\006NORMAL\020\000\022\r"
  "\n\tEMERGENCY\020\001\022\024\n\020COLLSION_WARNING\020\002\022\025\n\021F"
  "AILURE_DECTECTED\020\003\"\325\001\n\017TrajectoryPoint\022\037"
  "\n\010position\030\001 \001(\0132\r.IBUS.Point3D\022\r\n\005theta"
  "\030\002 \001(\001\022\r\n\005kappa\030\003 \001(\001\022\016\n\006laneID\030\004 \001(\r\022\033\n"
  "\023TimeRelativeToStart\030\005 \001(\001\022\017\n\007Heading\030\006 "
  "\001(\001\022\r\n\005Speed\030\007 \001(\001\022\r\n\005Accel\030\010 \001(\001\022\r\n\005gra"
  "de\030\t \001(\001\022\t\n\001s\030\n \001(\001\022\r\n\005steer\030\013 \001(\001\"\216\001\n\014R"
  "efLinePoint\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\022\034\n\005poi"
  "nt\030\003 \001(\0132\r.IBUS.Point3D\022\r\n\005theta\030\004 \001(\001\022\r"
  "\n\005kappa\030\005 \001(\001\022\r\n\005grade\030\006 \001(\001\022\r\n\005width\030\007 "
  "\001(\001\022\016\n\006laneid\030\010 \001(\001\"\234\001\n\016PathBoundPoint\022!"
  "\n\nPathBoundL\030\001 \001(\0132\r.IBUS.Point2D\022!\n\nPat"
  "hBoundR\030\002 \001(\0132\r.IBUS.Point2D\022!\n\nLaneBoun"
  "dL\030\003 \001(\0132\r.IBUS.Point2D\022!\n\nLaneBoundR\030\004 "
  "\001(\0132\r.IBUS.Point2D\"o\n\rDebugPointInf\022!\n\nD"
  "ebugPoint\030\001 \003(\0132\r.IBUS.Point2D\022\'\n\tPointT"
  "ype\030\002 \001(\0162\024.IBUS.DebugPointType\022\022\n\nPoint"
  "Label\030\003 \001(\t\"\202\002\n\017ControlPointInf\022\037\n\007GearC"
  "md\030\001 \001(\0162\016.IBUS.GearType\022\027\n\017Acceleration"
  "Cmd\030\002 \001(\001\022/\n\017ThrottleFlagCmd\030\003 \001(\0162\026.IBU"
  "S.ThrottleFlagType\022\023\n\013ThrottleCmd\030\004 \001(\001\022"
  ")\n\014BrakeFlagCmd\030\005 \001(\0162\023.IBUS.BrakeFlagTy"
  "pe\022\020\n\010BrakeCmd\030\006 \001(\001\022\023\n\013SteeringCmd\030\007 \001("
  "\001\022\035\n\006EPBCmd\030\010 \001(\0162\r.IBUS.EpbType\"\204\001\n\021Nav"
  "igationService\022\034\n\006header\030\001 \001(\0132\014.IBUS.He"
  "ader\0223\n\025RecommendRoadSegments\030\002 \003(\0132\024.IB"
  "US.Recommendation\022\034\n\024NavigationServiceFl"
  "g\030\003 \001(\r\"\233\001\n\017DecisionService\022\034\n\006header\030\001 "
  "\001(\0132\014.IBUS.Header\022(\n\tMDecision\030\002 \001(\0132\025.I"
  "BUS.MissionDecision\022$\n\tDDecision\030\003 \001(\0132\021"
  ".IBUS.DDTDecision\022\032\n\022DecisionServiceFlg\030"
  "\004 \001(\r\"\244\003\n\031TrajectoryPlanningService\022\034\n\006h"
  "eader\030\001 \001(\0132\014.IBUS.Header\022&\n\010TrajType\030\002 "
  "\001(\0162\024.IBUS.TrajectoryType\022\030\n\020TrajectoryL"
  "ength\030\003 \001(\001\022\026\n\016TrajectoryTime\030\004 \001(\001\022/\n\020T"
  "rajectoryPoints\030\005 \003(\0132\025.IBUS.TrajectoryP"
  "oint\022\024\n\014LatMaxOffset\030\006 \003(\001\022#\n\007RefLine\030\007 "
  "\003(\0132\022.IBUS.RefLinePoint\022\'\n\tPathBound\030\010 \003"
  "(\0132\024.IBUS.PathBoundPoint\022\'\n\nDebugPoint\030\t"
  " \001(\0132\023.IBUS.DebugPointInf\022+\n\014ControlPoin"
  "t\030\n \001(\0132\025.IBUS.ControlPointInf\022$\n\034Trajec"
  "toryPlanningServiceFlg\030\013 \001(\r\"\277\001\n\017Decisio"
  "nPlanMsg\0224\n\023NavigationInterface\030\001 \001(\0132\027."
  "IBUS.NavigationService\0220\n\021DecisionInterf"
  "ace\030\002 \001(\0132\025.IBUS.DecisionService\022D\n\033Traj"
  "ectoryPlanningInterface\030\003 \001(\0132\037.IBUS.Tra"
  "jectoryPlanningService*7\n\016TrajectoryType"
  "\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001\022\014\n\010FALLBACK\020\002*"
  "\251\002\n\016DebugPointType\022\027\n\023AUTO_DRIVE_BOUNDAR"
  "Y\020\000\022\014\n\010REF_LINE\020\001\022\023\n\017OBS_SL_BOUNDARY\020\002\022\030"
  "\n\024OBS_POLYGON_BOUNDARY\020\003\022\024\n\020OBS_BOX_BOUN"
  "DARY\020\004\022\n\n\006OTHER1\020\005\022\n\n\006OTHER2\020\006\022\016\n\nLOCAL_"
  "PATH\020\007\022\016\n\nTRACJETORY\020\010\022\022\n\016ALL_LOCAL_PATH"
  "\020\t\022\021\n\rPATH_BOUNDARY\020\n\022\035\n\031PATH_BOUNDARY_O"
  "F_FALLBACK\020\013\022\025\n\021ROUTING_LANE_INFO\020\014\022\026\n\022W"
  "ORKING_DEBUG_INFO\020\r*X\n\010GearType\022\020\n\014GEAR_"
  "INVALID\020\000\022\n\n\006GEAR_N\020\001\022\n\n\006GEAR_D\020\002\022\n\n\006GEA"
  "R_R\020\003\022\n\n\006GEAR_L\020\004\022\n\n\006GEAR_P\020\005*O\n\020Throttl"
  "eFlagType\022\021\n\rTHROT_INVALID\020\000\022\024\n\020THROT_UN"
  "ACTIVATE\020\001\022\022\n\016THROT_ACTIVATE\020\002*c\n\rBrakeF"
  "lagType\022\021\n\rBRAKE_INVALID\020\000\022\014\n\010NO_BRAKE\020\001"
  "\022\r\n\tBRAKE_XBR\020\002\022\017\n\013BRAKE_HUMAN\020\003\022\021\n\rBRAK"
  "E_PERCENT\020\004*3\n\007EpbType\022\017\n\013EPB_INVALID\020\000\022"
  "\013\n\007EPB_OFF\020\001\022\n\n\006EPB_ON\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DecisonInterface_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DecisonInterface_2eproto_sccs[13] = {
  &scc_info_ControlPointInf_DecisonInterface_2eproto.base,
  &scc_info_DDTDecision_DecisonInterface_2eproto.base,
  &scc_info_DDTDecision_ObjectDecision_DecisonInterface_2eproto.base,
  &scc_info_DebugPointInf_DecisonInterface_2eproto.base,
  &scc_info_DecisionPlanMsg_DecisonInterface_2eproto.base,
  &scc_info_DecisionService_DecisonInterface_2eproto.base,
  &scc_info_MissionDecision_DecisonInterface_2eproto.base,
  &scc_info_NavigationService_DecisonInterface_2eproto.base,
  &scc_info_PathBoundPoint_DecisonInterface_2eproto.base,
  &scc_info_Recommendation_DecisonInterface_2eproto.base,
  &scc_info_RefLinePoint_DecisonInterface_2eproto.base,
  &scc_info_TrajectoryPlanningService_DecisonInterface_2eproto.base,
  &scc_info_TrajectoryPoint_DecisonInterface_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DecisonInterface_2eproto_once;
static bool descriptor_table_DecisonInterface_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DecisonInterface_2eproto = {
  &descriptor_table_DecisonInterface_2eproto_initialized, descriptor_table_protodef_DecisonInterface_2eproto, "DecisonInterface.proto", 3712,
  &descriptor_table_DecisonInterface_2eproto_once, descriptor_table_DecisonInterface_2eproto_sccs, descriptor_table_DecisonInterface_2eproto_deps, 13, 1,
  schemas, file_default_instances, TableStruct_DecisonInterface_2eproto::offsets,
  file_level_metadata_DecisonInterface_2eproto, 13, file_level_enum_descriptors_DecisonInterface_2eproto, file_level_service_descriptors_DecisonInterface_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DecisonInterface_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DecisonInterface_2eproto), true);
namespace IBUS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionDecision_MissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[0];
}
bool MissionDecision_MissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MissionDecision_MissionType MissionDecision::END_POINT;
constexpr MissionDecision_MissionType MissionDecision::CRUISE;
constexpr MissionDecision_MissionType MissionDecision::STOP;
constexpr MissionDecision_MissionType MissionDecision::LANE_CHANGE_LEFT;
constexpr MissionDecision_MissionType MissionDecision::LANE_CHANGE_RIGHT;
constexpr MissionDecision_MissionType MissionDecision::PARKING;
constexpr MissionDecision_MissionType MissionDecision::U_TURN;
constexpr MissionDecision_MissionType MissionDecision::TURN_LEFT;
constexpr MissionDecision_MissionType MissionDecision::TURN_RIGHT;
constexpr MissionDecision_MissionType MissionDecision::WORKING_L;
constexpr MissionDecision_MissionType MissionDecision::WORKING_R;
constexpr MissionDecision_MissionType MissionDecision::WORKING_ALL;
constexpr MissionDecision_MissionType MissionDecision::LANE_BORROW_L;
constexpr MissionDecision_MissionType MissionDecision::LANE_BORROW_R;
constexpr MissionDecision_MissionType MissionDecision::MissionType_MIN;
constexpr MissionDecision_MissionType MissionDecision::MissionType_MAX;
constexpr int MissionDecision::MissionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionDecision_StatusMDecision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[1];
}
bool MissionDecision_StatusMDecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MissionDecision_StatusMDecision MissionDecision::NORMAL;
constexpr MissionDecision_StatusMDecision MissionDecision::EMERGENCY;
constexpr MissionDecision_StatusMDecision MissionDecision::COLLSION_WARNING;
constexpr MissionDecision_StatusMDecision MissionDecision::FAILURE_DECTECTED;
constexpr MissionDecision_StatusMDecision MissionDecision::StatusMDecision_MIN;
constexpr MissionDecision_StatusMDecision MissionDecision::StatusMDecision_MAX;
constexpr int MissionDecision::StatusMDecision_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DDTDecision_ObjectDecision_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[2];
}
bool DDTDecision_ObjectDecision_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DDTDecision_ObjectDecision_type DDTDecision_ObjectDecision::O_IGNORE;
constexpr DDTDecision_ObjectDecision_type DDTDecision_ObjectDecision::O_STOP;
constexpr DDTDecision_ObjectDecision_type DDTDecision_ObjectDecision::O_FOLLOW;
constexpr DDTDecision_ObjectDecision_type DDTDecision_ObjectDecision::O_OVERTAKE;
constexpr DDTDecision_ObjectDecision_type DDTDecision_ObjectDecision::O_YIELD;
constexpr DDTDecision_ObjectDecision_type DDTDecision_ObjectDecision::O_BYPASS;
constexpr DDTDecision_ObjectDecision_type DDTDecision_ObjectDecision::type_MIN;
constexpr DDTDecision_ObjectDecision_type DDTDecision_ObjectDecision::type_MAX;
constexpr int DDTDecision_ObjectDecision::type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DDTDecision_ObjectDecision_DDTState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[3];
}
bool DDTDecision_ObjectDecision_DDTState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DDTDecision_ObjectDecision_DDTState DDTDecision_ObjectDecision::NORMAL;
constexpr DDTDecision_ObjectDecision_DDTState DDTDecision_ObjectDecision::EMERGENCY;
constexpr DDTDecision_ObjectDecision_DDTState DDTDecision_ObjectDecision::COLLSION_WARNING;
constexpr DDTDecision_ObjectDecision_DDTState DDTDecision_ObjectDecision::FAILURE_DECTECTED;
constexpr DDTDecision_ObjectDecision_DDTState DDTDecision_ObjectDecision::DDTState_MIN;
constexpr DDTDecision_ObjectDecision_DDTState DDTDecision_ObjectDecision::DDTState_MAX;
constexpr int DDTDecision_ObjectDecision::DDTState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[4];
}
bool TrajectoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugPointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[5];
}
bool DebugPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GearType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[6];
}
bool GearType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThrottleFlagType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[7];
}
bool ThrottleFlagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrakeFlagType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[8];
}
bool BrakeFlagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EpbType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DecisonInterface_2eproto);
  return file_level_enum_descriptors_DecisonInterface_2eproto[9];
}
bool EpbType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Recommendation::InitAsDefaultInstance() {
}
class Recommendation::_Internal {
 public:
};

Recommendation::Recommendation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.Recommendation)
}
Recommendation::Recommendation(const Recommendation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentsequenceids_, &from.currentsequenceids_,
    static_cast<size_t>(reinterpret_cast<char*>(&speedlimits_) -
    reinterpret_cast<char*>(&currentsequenceids_)) + sizeof(speedlimits_));
  // @@protoc_insertion_point(copy_constructor:IBUS.Recommendation)
}

void Recommendation::SharedCtor() {
  ::memset(&currentsequenceids_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speedlimits_) -
      reinterpret_cast<char*>(&currentsequenceids_)) + sizeof(speedlimits_));
}

Recommendation::~Recommendation() {
  // @@protoc_insertion_point(destructor:IBUS.Recommendation)
  SharedDtor();
}

void Recommendation::SharedDtor() {
}

void Recommendation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Recommendation& Recommendation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Recommendation_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void Recommendation::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.Recommendation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currentsequenceids_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speedlimits_) -
      reinterpret_cast<char*>(&currentsequenceids_)) + sizeof(speedlimits_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Recommendation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 CurrentSequenceIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          currentsequenceids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TargetSequeceIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetsequeceids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SpeedLimits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          speedlimits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Recommendation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.Recommendation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 CurrentSequenceIDs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currentsequenceids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 TargetSequeceIDs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetsequeceids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SpeedLimits = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedlimits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.Recommendation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.Recommendation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Recommendation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.Recommendation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 CurrentSequenceIDs = 1;
  if (this->currentsequenceids() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->currentsequenceids(), output);
  }

  // uint64 TargetSequeceIDs = 2;
  if (this->targetsequeceids() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->targetsequeceids(), output);
  }

  // uint32 SpeedLimits = 3;
  if (this->speedlimits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->speedlimits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.Recommendation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Recommendation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.Recommendation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 CurrentSequenceIDs = 1;
  if (this->currentsequenceids() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->currentsequenceids(), target);
  }

  // uint64 TargetSequeceIDs = 2;
  if (this->targetsequeceids() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->targetsequeceids(), target);
  }

  // uint32 SpeedLimits = 3;
  if (this->speedlimits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->speedlimits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.Recommendation)
  return target;
}

size_t Recommendation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.Recommendation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 CurrentSequenceIDs = 1;
  if (this->currentsequenceids() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->currentsequenceids());
  }

  // uint64 TargetSequeceIDs = 2;
  if (this->targetsequeceids() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->targetsequeceids());
  }

  // uint32 SpeedLimits = 3;
  if (this->speedlimits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->speedlimits());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Recommendation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.Recommendation)
  GOOGLE_DCHECK_NE(&from, this);
  const Recommendation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Recommendation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.Recommendation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.Recommendation)
    MergeFrom(*source);
  }
}

void Recommendation::MergeFrom(const Recommendation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.Recommendation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentsequenceids() != 0) {
    set_currentsequenceids(from.currentsequenceids());
  }
  if (from.targetsequeceids() != 0) {
    set_targetsequeceids(from.targetsequeceids());
  }
  if (from.speedlimits() != 0) {
    set_speedlimits(from.speedlimits());
  }
}

void Recommendation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.Recommendation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recommendation::CopyFrom(const Recommendation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.Recommendation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recommendation::IsInitialized() const {
  return true;
}

void Recommendation::InternalSwap(Recommendation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(currentsequenceids_, other->currentsequenceids_);
  swap(targetsequeceids_, other->targetsequeceids_);
  swap(speedlimits_, other->speedlimits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Recommendation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionDecision::InitAsDefaultInstance() {
  ::IBUS::_MissionDecision_default_instance_._instance.get_mutable()->parkingpoint_ = const_cast< ::IBUS::Point2D*>(
      ::IBUS::Point2D::internal_default_instance());
}
class MissionDecision::_Internal {
 public:
  static const ::IBUS::Point2D& parkingpoint(const MissionDecision* msg);
};

const ::IBUS::Point2D&
MissionDecision::_Internal::parkingpoint(const MissionDecision* msg) {
  return *msg->parkingpoint_;
}
void MissionDecision::clear_parkingpoint() {
  if (GetArenaNoVirtual() == nullptr && parkingpoint_ != nullptr) {
    delete parkingpoint_;
  }
  parkingpoint_ = nullptr;
}
MissionDecision::MissionDecision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.MissionDecision)
}
MissionDecision::MissionDecision(const MissionDecision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parkingpoint()) {
    parkingpoint_ = new ::IBUS::Point2D(*from.parkingpoint_);
  } else {
    parkingpoint_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&statusattached_) -
    reinterpret_cast<char*>(&type_)) + sizeof(statusattached_));
  // @@protoc_insertion_point(copy_constructor:IBUS.MissionDecision)
}

void MissionDecision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionDecision_DecisonInterface_2eproto.base);
  ::memset(&parkingpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusattached_) -
      reinterpret_cast<char*>(&parkingpoint_)) + sizeof(statusattached_));
}

MissionDecision::~MissionDecision() {
  // @@protoc_insertion_point(destructor:IBUS.MissionDecision)
  SharedDtor();
}

void MissionDecision::SharedDtor() {
  if (this != internal_default_instance()) delete parkingpoint_;
}

void MissionDecision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionDecision& MissionDecision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionDecision_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void MissionDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.MissionDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && parkingpoint_ != nullptr) {
    delete parkingpoint_;
  }
  parkingpoint_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusattached_) -
      reinterpret_cast<char*>(&type_)) + sizeof(statusattached_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MissionDecision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.MissionDecision.MissionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::IBUS::MissionDecision_MissionType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 LaneAttached = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          laneattached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ParkingLotsAttached = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parkinglotsattached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double HeadingAttached = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          headingattached_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .IBUS.MissionDecision.StatusMDecision StatusAttached = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_statusattached(static_cast<::IBUS::MissionDecision_StatusMDecision>(val));
        } else goto handle_unusual;
        continue;
      // .IBUS.Point2D ParkingPoint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_parkingpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MissionDecision::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.MissionDecision)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.MissionDecision.MissionType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::IBUS::MissionDecision_MissionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LaneAttached = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &laneattached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ParkingLotsAttached = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parkinglotsattached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double HeadingAttached = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headingattached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.MissionDecision.StatusMDecision StatusAttached = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_statusattached(static_cast< ::IBUS::MissionDecision_StatusMDecision >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Point2D ParkingPoint = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_parkingpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.MissionDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.MissionDecision)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MissionDecision::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.MissionDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.MissionDecision.MissionType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 LaneAttached = 2;
  if (this->laneattached() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->laneattached(), output);
  }

  // uint32 ParkingLotsAttached = 3;
  if (this->parkinglotsattached() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->parkinglotsattached(), output);
  }

  // double HeadingAttached = 4;
  if (!(this->headingattached() <= 0 && this->headingattached() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->headingattached(), output);
  }

  // .IBUS.MissionDecision.StatusMDecision StatusAttached = 5;
  if (this->statusattached() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->statusattached(), output);
  }

  // .IBUS.Point2D ParkingPoint = 6;
  if (this->has_parkingpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::parkingpoint(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.MissionDecision)
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionDecision::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.MissionDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.MissionDecision.MissionType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 LaneAttached = 2;
  if (this->laneattached() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->laneattached(), target);
  }

  // uint32 ParkingLotsAttached = 3;
  if (this->parkinglotsattached() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->parkinglotsattached(), target);
  }

  // double HeadingAttached = 4;
  if (!(this->headingattached() <= 0 && this->headingattached() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->headingattached(), target);
  }

  // .IBUS.MissionDecision.StatusMDecision StatusAttached = 5;
  if (this->statusattached() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->statusattached(), target);
  }

  // .IBUS.Point2D ParkingPoint = 6;
  if (this->has_parkingpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::parkingpoint(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.MissionDecision)
  return target;
}

size_t MissionDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.MissionDecision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Point2D ParkingPoint = 6;
  if (this->has_parkingpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parkingpoint_);
  }

  // .IBUS.MissionDecision.MissionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 LaneAttached = 2;
  if (this->laneattached() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->laneattached());
  }

  // double HeadingAttached = 4;
  if (!(this->headingattached() <= 0 && this->headingattached() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 ParkingLotsAttached = 3;
  if (this->parkinglotsattached() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->parkinglotsattached());
  }

  // .IBUS.MissionDecision.StatusMDecision StatusAttached = 5;
  if (this->statusattached() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->statusattached());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionDecision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.MissionDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionDecision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionDecision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.MissionDecision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.MissionDecision)
    MergeFrom(*source);
  }
}

void MissionDecision::MergeFrom(const MissionDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.MissionDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_parkingpoint()) {
    mutable_parkingpoint()->::IBUS::Point2D::MergeFrom(from.parkingpoint());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.laneattached() != 0) {
    set_laneattached(from.laneattached());
  }
  if (!(from.headingattached() <= 0 && from.headingattached() >= 0)) {
    set_headingattached(from.headingattached());
  }
  if (from.parkinglotsattached() != 0) {
    set_parkinglotsattached(from.parkinglotsattached());
  }
  if (from.statusattached() != 0) {
    set_statusattached(from.statusattached());
  }
}

void MissionDecision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.MissionDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionDecision::CopyFrom(const MissionDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.MissionDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionDecision::IsInitialized() const {
  return true;
}

void MissionDecision::InternalSwap(MissionDecision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(parkingpoint_, other->parkingpoint_);
  swap(type_, other->type_);
  swap(laneattached_, other->laneattached_);
  swap(headingattached_, other->headingattached_);
  swap(parkinglotsattached_, other->parkinglotsattached_);
  swap(statusattached_, other->statusattached_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionDecision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DDTDecision_ObjectDecision::InitAsDefaultInstance() {
}
class DDTDecision_ObjectDecision::_Internal {
 public:
};

DDTDecision_ObjectDecision::DDTDecision_ObjectDecision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.DDTDecision.ObjectDecision)
}
DDTDecision_ObjectDecision::DDTDecision_ObjectDecision(const DDTDecision_ObjectDecision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objectid_, &from.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&statusattached_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(statusattached_));
  // @@protoc_insertion_point(copy_constructor:IBUS.DDTDecision.ObjectDecision)
}

void DDTDecision_ObjectDecision::SharedCtor() {
  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusattached_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(statusattached_));
}

DDTDecision_ObjectDecision::~DDTDecision_ObjectDecision() {
  // @@protoc_insertion_point(destructor:IBUS.DDTDecision.ObjectDecision)
  SharedDtor();
}

void DDTDecision_ObjectDecision::SharedDtor() {
}

void DDTDecision_ObjectDecision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DDTDecision_ObjectDecision& DDTDecision_ObjectDecision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DDTDecision_ObjectDecision_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void DDTDecision_ObjectDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.DDTDecision.ObjectDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusattached_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(statusattached_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DDTDecision_ObjectDecision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.DDTDecision.ObjectDecision.type ObjectDType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_objectdtype(static_cast<::IBUS::DDTDecision_ObjectDecision_type>(val));
        } else goto handle_unusual;
        continue;
      // double HeadingAttached = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          headingattached_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .IBUS.DDTDecision.ObjectDecision.DDTState StatusAttached = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_statusattached(static_cast<::IBUS::DDTDecision_ObjectDecision_DDTState>(val));
        } else goto handle_unusual;
        continue;
      // double SafetLateralDistance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          safetlateraldistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double SafetyLongitudinalDistance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          safetylongitudinaldistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DDTDecision_ObjectDecision::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.DDTDecision.ObjectDecision)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ObjectID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.DDTDecision.ObjectDecision.type ObjectDType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_objectdtype(static_cast< ::IBUS::DDTDecision_ObjectDecision_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double HeadingAttached = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headingattached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.DDTDecision.ObjectDecision.DDTState StatusAttached = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_statusattached(static_cast< ::IBUS::DDTDecision_ObjectDecision_DDTState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SafetLateralDistance = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safetlateraldistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SafetyLongitudinalDistance = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safetylongitudinaldistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.DDTDecision.ObjectDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.DDTDecision.ObjectDecision)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DDTDecision_ObjectDecision::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.DDTDecision.ObjectDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ObjectID = 1;
  if (this->objectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->objectid(), output);
  }

  // .IBUS.DDTDecision.ObjectDecision.type ObjectDType = 2;
  if (this->objectdtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->objectdtype(), output);
  }

  // double HeadingAttached = 3;
  if (!(this->headingattached() <= 0 && this->headingattached() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->headingattached(), output);
  }

  // .IBUS.DDTDecision.ObjectDecision.DDTState StatusAttached = 4;
  if (this->statusattached() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->statusattached(), output);
  }

  // double SafetLateralDistance = 5;
  if (!(this->safetlateraldistance() <= 0 && this->safetlateraldistance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->safetlateraldistance(), output);
  }

  // double SafetyLongitudinalDistance = 6;
  if (!(this->safetylongitudinaldistance() <= 0 && this->safetylongitudinaldistance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->safetylongitudinaldistance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.DDTDecision.ObjectDecision)
}

::PROTOBUF_NAMESPACE_ID::uint8* DDTDecision_ObjectDecision::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.DDTDecision.ObjectDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ObjectID = 1;
  if (this->objectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->objectid(), target);
  }

  // .IBUS.DDTDecision.ObjectDecision.type ObjectDType = 2;
  if (this->objectdtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->objectdtype(), target);
  }

  // double HeadingAttached = 3;
  if (!(this->headingattached() <= 0 && this->headingattached() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->headingattached(), target);
  }

  // .IBUS.DDTDecision.ObjectDecision.DDTState StatusAttached = 4;
  if (this->statusattached() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->statusattached(), target);
  }

  // double SafetLateralDistance = 5;
  if (!(this->safetlateraldistance() <= 0 && this->safetlateraldistance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->safetlateraldistance(), target);
  }

  // double SafetyLongitudinalDistance = 6;
  if (!(this->safetylongitudinaldistance() <= 0 && this->safetylongitudinaldistance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->safetylongitudinaldistance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.DDTDecision.ObjectDecision)
  return target;
}

size_t DDTDecision_ObjectDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.DDTDecision.ObjectDecision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ObjectID = 1;
  if (this->objectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->objectid());
  }

  // .IBUS.DDTDecision.ObjectDecision.type ObjectDType = 2;
  if (this->objectdtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->objectdtype());
  }

  // double HeadingAttached = 3;
  if (!(this->headingattached() <= 0 && this->headingattached() >= 0)) {
    total_size += 1 + 8;
  }

  // double SafetLateralDistance = 5;
  if (!(this->safetlateraldistance() <= 0 && this->safetlateraldistance() >= 0)) {
    total_size += 1 + 8;
  }

  // double SafetyLongitudinalDistance = 6;
  if (!(this->safetylongitudinaldistance() <= 0 && this->safetylongitudinaldistance() >= 0)) {
    total_size += 1 + 8;
  }

  // .IBUS.DDTDecision.ObjectDecision.DDTState StatusAttached = 4;
  if (this->statusattached() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->statusattached());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DDTDecision_ObjectDecision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.DDTDecision.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const DDTDecision_ObjectDecision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DDTDecision_ObjectDecision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.DDTDecision.ObjectDecision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.DDTDecision.ObjectDecision)
    MergeFrom(*source);
  }
}

void DDTDecision_ObjectDecision::MergeFrom(const DDTDecision_ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.DDTDecision.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.objectid() != 0) {
    set_objectid(from.objectid());
  }
  if (from.objectdtype() != 0) {
    set_objectdtype(from.objectdtype());
  }
  if (!(from.headingattached() <= 0 && from.headingattached() >= 0)) {
    set_headingattached(from.headingattached());
  }
  if (!(from.safetlateraldistance() <= 0 && from.safetlateraldistance() >= 0)) {
    set_safetlateraldistance(from.safetlateraldistance());
  }
  if (!(from.safetylongitudinaldistance() <= 0 && from.safetylongitudinaldistance() >= 0)) {
    set_safetylongitudinaldistance(from.safetylongitudinaldistance());
  }
  if (from.statusattached() != 0) {
    set_statusattached(from.statusattached());
  }
}

void DDTDecision_ObjectDecision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.DDTDecision.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDTDecision_ObjectDecision::CopyFrom(const DDTDecision_ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.DDTDecision.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDTDecision_ObjectDecision::IsInitialized() const {
  return true;
}

void DDTDecision_ObjectDecision::InternalSwap(DDTDecision_ObjectDecision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(objectid_, other->objectid_);
  swap(objectdtype_, other->objectdtype_);
  swap(headingattached_, other->headingattached_);
  swap(safetlateraldistance_, other->safetlateraldistance_);
  swap(safetylongitudinaldistance_, other->safetylongitudinaldistance_);
  swap(statusattached_, other->statusattached_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DDTDecision_ObjectDecision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DDTDecision::InitAsDefaultInstance() {
}
class DDTDecision::_Internal {
 public:
};

DDTDecision::DDTDecision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.DDTDecision)
}
DDTDecision::DDTDecision(const DDTDecision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      objectsdecisions_(from.objectsdecisions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IBUS.DDTDecision)
}

void DDTDecision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DDTDecision_DecisonInterface_2eproto.base);
}

DDTDecision::~DDTDecision() {
  // @@protoc_insertion_point(destructor:IBUS.DDTDecision)
  SharedDtor();
}

void DDTDecision::SharedDtor() {
}

void DDTDecision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DDTDecision& DDTDecision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DDTDecision_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void DDTDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.DDTDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectsdecisions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DDTDecision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IBUS.DDTDecision.ObjectDecision ObjectsDecisions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_objectsdecisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DDTDecision::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.DDTDecision)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IBUS.DDTDecision.ObjectDecision ObjectsDecisions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_objectsdecisions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.DDTDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.DDTDecision)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DDTDecision::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.DDTDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IBUS.DDTDecision.ObjectDecision ObjectsDecisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objectsdecisions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objectsdecisions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.DDTDecision)
}

::PROTOBUF_NAMESPACE_ID::uint8* DDTDecision::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.DDTDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IBUS.DDTDecision.ObjectDecision ObjectsDecisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objectsdecisions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objectsdecisions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.DDTDecision)
  return target;
}

size_t DDTDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.DDTDecision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IBUS.DDTDecision.ObjectDecision ObjectsDecisions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objectsdecisions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->objectsdecisions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DDTDecision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.DDTDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const DDTDecision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DDTDecision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.DDTDecision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.DDTDecision)
    MergeFrom(*source);
  }
}

void DDTDecision::MergeFrom(const DDTDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.DDTDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectsdecisions_.MergeFrom(from.objectsdecisions_);
}

void DDTDecision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.DDTDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDTDecision::CopyFrom(const DDTDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.DDTDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDTDecision::IsInitialized() const {
  return true;
}

void DDTDecision::InternalSwap(DDTDecision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&objectsdecisions_)->InternalSwap(CastToBase(&other->objectsdecisions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DDTDecision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryPoint::InitAsDefaultInstance() {
  ::IBUS::_TrajectoryPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::IBUS::Point3D*>(
      ::IBUS::Point3D::internal_default_instance());
}
class TrajectoryPoint::_Internal {
 public:
  static const ::IBUS::Point3D& position(const TrajectoryPoint* msg);
};

const ::IBUS::Point3D&
TrajectoryPoint::_Internal::position(const TrajectoryPoint* msg) {
  return *msg->position_;
}
void TrajectoryPoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
TrajectoryPoint::TrajectoryPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::IBUS::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&laneid_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(laneid_));
  // @@protoc_insertion_point(copy_constructor:IBUS.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPoint_DecisonInterface_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laneid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(laneid_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:IBUS.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void TrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPoint& TrajectoryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPoint_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&theta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laneid_) -
      reinterpret_cast<char*>(&theta_)) + sizeof(laneid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Point3D position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double theta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double kappa = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 laneID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double TimeRelativeToStart = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          timerelativetostart_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Accel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double grade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          grade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double steer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.TrajectoryPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Point3D position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kappa = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 laneID = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &laneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TimeRelativeToStart = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timerelativetostart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Heading = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Speed = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Accel = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double grade = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double s = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.TrajectoryPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Point3D position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->theta(), output);
  }

  // double kappa = 3;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->kappa(), output);
  }

  // uint32 laneID = 4;
  if (this->laneid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->laneid(), output);
  }

  // double TimeRelativeToStart = 5;
  if (!(this->timerelativetostart() <= 0 && this->timerelativetostart() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->timerelativetostart(), output);
  }

  // double Heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->heading(), output);
  }

  // double Speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->speed(), output);
  }

  // double Accel = 8;
  if (!(this->accel() <= 0 && this->accel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->accel(), output);
  }

  // double grade = 9;
  if (!(this->grade() <= 0 && this->grade() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->grade(), output);
  }

  // double s = 10;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->s(), output);
  }

  // double steer = 11;
  if (!(this->steer() <= 0 && this->steer() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->steer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.TrajectoryPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Point3D position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->theta(), target);
  }

  // double kappa = 3;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->kappa(), target);
  }

  // uint32 laneID = 4;
  if (this->laneid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->laneid(), target);
  }

  // double TimeRelativeToStart = 5;
  if (!(this->timerelativetostart() <= 0 && this->timerelativetostart() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->timerelativetostart(), target);
  }

  // double Heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->heading(), target);
  }

  // double Speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->speed(), target);
  }

  // double Accel = 8;
  if (!(this->accel() <= 0 && this->accel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->accel(), target);
  }

  // double grade = 9;
  if (!(this->grade() <= 0 && this->grade() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->grade(), target);
  }

  // double s = 10;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->s(), target);
  }

  // double steer = 11;
  if (!(this->steer() <= 0 && this->steer() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->steer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.TrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Point3D position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double kappa = 3;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    total_size += 1 + 8;
  }

  // double TimeRelativeToStart = 5;
  if (!(this->timerelativetostart() <= 0 && this->timerelativetostart() >= 0)) {
    total_size += 1 + 8;
  }

  // double Heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 8;
  }

  // double Speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double Accel = 8;
  if (!(this->accel() <= 0 && this->accel() >= 0)) {
    total_size += 1 + 8;
  }

  // double grade = 9;
  if (!(this->grade() <= 0 && this->grade() >= 0)) {
    total_size += 1 + 8;
  }

  // double s = 10;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // double steer = 11;
  if (!(this->steer() <= 0 && this->steer() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 laneID = 4;
  if (this->laneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->laneid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.TrajectoryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::IBUS::Point3D::MergeFrom(from.position());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    set_theta(from.theta());
  }
  if (!(from.kappa() <= 0 && from.kappa() >= 0)) {
    set_kappa(from.kappa());
  }
  if (!(from.timerelativetostart() <= 0 && from.timerelativetostart() >= 0)) {
    set_timerelativetostart(from.timerelativetostart());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
  if (!(from.accel() <= 0 && from.accel() >= 0)) {
    set_accel(from.accel());
  }
  if (!(from.grade() <= 0 && from.grade() >= 0)) {
    set_grade(from.grade());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
  if (!(from.steer() <= 0 && from.steer() >= 0)) {
    set_steer(from.steer());
  }
  if (from.laneid() != 0) {
    set_laneid(from.laneid());
  }
}

void TrajectoryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(theta_, other->theta_);
  swap(kappa_, other->kappa_);
  swap(timerelativetostart_, other->timerelativetostart_);
  swap(heading_, other->heading_);
  swap(speed_, other->speed_);
  swap(accel_, other->accel_);
  swap(grade_, other->grade_);
  swap(s_, other->s_);
  swap(steer_, other->steer_);
  swap(laneid_, other->laneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefLinePoint::InitAsDefaultInstance() {
  ::IBUS::_RefLinePoint_default_instance_._instance.get_mutable()->point_ = const_cast< ::IBUS::Point3D*>(
      ::IBUS::Point3D::internal_default_instance());
}
class RefLinePoint::_Internal {
 public:
  static const ::IBUS::Point3D& point(const RefLinePoint* msg);
};

const ::IBUS::Point3D&
RefLinePoint::_Internal::point(const RefLinePoint* msg) {
  return *msg->point_;
}
void RefLinePoint::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
RefLinePoint::RefLinePoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.RefLinePoint)
}
RefLinePoint::RefLinePoint(const RefLinePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::IBUS::Point3D(*from.point_);
  } else {
    point_ = nullptr;
  }
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&laneid_) -
    reinterpret_cast<char*>(&s_)) + sizeof(laneid_));
  // @@protoc_insertion_point(copy_constructor:IBUS.RefLinePoint)
}

void RefLinePoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefLinePoint_DecisonInterface_2eproto.base);
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laneid_) -
      reinterpret_cast<char*>(&point_)) + sizeof(laneid_));
}

RefLinePoint::~RefLinePoint() {
  // @@protoc_insertion_point(destructor:IBUS.RefLinePoint)
  SharedDtor();
}

void RefLinePoint::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void RefLinePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefLinePoint& RefLinePoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefLinePoint_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void RefLinePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.RefLinePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laneid_) -
      reinterpret_cast<char*>(&s_)) + sizeof(laneid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RefLinePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .IBUS.Point3D point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double kappa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double grade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          grade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double laneid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RefLinePoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.RefLinePoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double s = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double l = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Point3D point = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kappa = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double grade = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double laneid = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.RefLinePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.RefLinePoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RefLinePoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.RefLinePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // double l = 2;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  // .IBUS.Point3D point = 3;
  if (this->has_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::point(this), output);
  }

  // double theta = 4;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // double kappa = 5;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->kappa(), output);
  }

  // double grade = 6;
  if (!(this->grade() <= 0 && this->grade() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->grade(), output);
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double laneid = 8;
  if (!(this->laneid() <= 0 && this->laneid() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->laneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.RefLinePoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* RefLinePoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.RefLinePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // double l = 2;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  // .IBUS.Point3D point = 3;
  if (this->has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::point(this), target);
  }

  // double theta = 4;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // double kappa = 5;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->kappa(), target);
  }

  // double grade = 6;
  if (!(this->grade() <= 0 && this->grade() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->grade(), target);
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double laneid = 8;
  if (!(this->laneid() <= 0 && this->laneid() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->laneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.RefLinePoint)
  return target;
}

size_t RefLinePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.RefLinePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Point3D point = 3;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // double l = 2;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 4;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double kappa = 5;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    total_size += 1 + 8;
  }

  // double grade = 6;
  if (!(this->grade() <= 0 && this->grade() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double laneid = 8;
  if (!(this->laneid() <= 0 && this->laneid() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefLinePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.RefLinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RefLinePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefLinePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.RefLinePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.RefLinePoint)
    MergeFrom(*source);
  }
}

void RefLinePoint::MergeFrom(const RefLinePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.RefLinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::IBUS::Point3D::MergeFrom(from.point());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
  if (!(from.l() <= 0 && from.l() >= 0)) {
    set_l(from.l());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    set_theta(from.theta());
  }
  if (!(from.kappa() <= 0 && from.kappa() >= 0)) {
    set_kappa(from.kappa());
  }
  if (!(from.grade() <= 0 && from.grade() >= 0)) {
    set_grade(from.grade());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.laneid() <= 0 && from.laneid() >= 0)) {
    set_laneid(from.laneid());
  }
}

void RefLinePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.RefLinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefLinePoint::CopyFrom(const RefLinePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.RefLinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefLinePoint::IsInitialized() const {
  return true;
}

void RefLinePoint::InternalSwap(RefLinePoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(point_, other->point_);
  swap(s_, other->s_);
  swap(l_, other->l_);
  swap(theta_, other->theta_);
  swap(kappa_, other->kappa_);
  swap(grade_, other->grade_);
  swap(width_, other->width_);
  swap(laneid_, other->laneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefLinePoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathBoundPoint::InitAsDefaultInstance() {
  ::IBUS::_PathBoundPoint_default_instance_._instance.get_mutable()->pathboundl_ = const_cast< ::IBUS::Point2D*>(
      ::IBUS::Point2D::internal_default_instance());
  ::IBUS::_PathBoundPoint_default_instance_._instance.get_mutable()->pathboundr_ = const_cast< ::IBUS::Point2D*>(
      ::IBUS::Point2D::internal_default_instance());
  ::IBUS::_PathBoundPoint_default_instance_._instance.get_mutable()->laneboundl_ = const_cast< ::IBUS::Point2D*>(
      ::IBUS::Point2D::internal_default_instance());
  ::IBUS::_PathBoundPoint_default_instance_._instance.get_mutable()->laneboundr_ = const_cast< ::IBUS::Point2D*>(
      ::IBUS::Point2D::internal_default_instance());
}
class PathBoundPoint::_Internal {
 public:
  static const ::IBUS::Point2D& pathboundl(const PathBoundPoint* msg);
  static const ::IBUS::Point2D& pathboundr(const PathBoundPoint* msg);
  static const ::IBUS::Point2D& laneboundl(const PathBoundPoint* msg);
  static const ::IBUS::Point2D& laneboundr(const PathBoundPoint* msg);
};

const ::IBUS::Point2D&
PathBoundPoint::_Internal::pathboundl(const PathBoundPoint* msg) {
  return *msg->pathboundl_;
}
const ::IBUS::Point2D&
PathBoundPoint::_Internal::pathboundr(const PathBoundPoint* msg) {
  return *msg->pathboundr_;
}
const ::IBUS::Point2D&
PathBoundPoint::_Internal::laneboundl(const PathBoundPoint* msg) {
  return *msg->laneboundl_;
}
const ::IBUS::Point2D&
PathBoundPoint::_Internal::laneboundr(const PathBoundPoint* msg) {
  return *msg->laneboundr_;
}
void PathBoundPoint::clear_pathboundl() {
  if (GetArenaNoVirtual() == nullptr && pathboundl_ != nullptr) {
    delete pathboundl_;
  }
  pathboundl_ = nullptr;
}
void PathBoundPoint::clear_pathboundr() {
  if (GetArenaNoVirtual() == nullptr && pathboundr_ != nullptr) {
    delete pathboundr_;
  }
  pathboundr_ = nullptr;
}
void PathBoundPoint::clear_laneboundl() {
  if (GetArenaNoVirtual() == nullptr && laneboundl_ != nullptr) {
    delete laneboundl_;
  }
  laneboundl_ = nullptr;
}
void PathBoundPoint::clear_laneboundr() {
  if (GetArenaNoVirtual() == nullptr && laneboundr_ != nullptr) {
    delete laneboundr_;
  }
  laneboundr_ = nullptr;
}
PathBoundPoint::PathBoundPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.PathBoundPoint)
}
PathBoundPoint::PathBoundPoint(const PathBoundPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pathboundl()) {
    pathboundl_ = new ::IBUS::Point2D(*from.pathboundl_);
  } else {
    pathboundl_ = nullptr;
  }
  if (from.has_pathboundr()) {
    pathboundr_ = new ::IBUS::Point2D(*from.pathboundr_);
  } else {
    pathboundr_ = nullptr;
  }
  if (from.has_laneboundl()) {
    laneboundl_ = new ::IBUS::Point2D(*from.laneboundl_);
  } else {
    laneboundl_ = nullptr;
  }
  if (from.has_laneboundr()) {
    laneboundr_ = new ::IBUS::Point2D(*from.laneboundr_);
  } else {
    laneboundr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IBUS.PathBoundPoint)
}

void PathBoundPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathBoundPoint_DecisonInterface_2eproto.base);
  ::memset(&pathboundl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laneboundr_) -
      reinterpret_cast<char*>(&pathboundl_)) + sizeof(laneboundr_));
}

PathBoundPoint::~PathBoundPoint() {
  // @@protoc_insertion_point(destructor:IBUS.PathBoundPoint)
  SharedDtor();
}

void PathBoundPoint::SharedDtor() {
  if (this != internal_default_instance()) delete pathboundl_;
  if (this != internal_default_instance()) delete pathboundr_;
  if (this != internal_default_instance()) delete laneboundl_;
  if (this != internal_default_instance()) delete laneboundr_;
}

void PathBoundPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathBoundPoint& PathBoundPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathBoundPoint_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void PathBoundPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.PathBoundPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pathboundl_ != nullptr) {
    delete pathboundl_;
  }
  pathboundl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pathboundr_ != nullptr) {
    delete pathboundr_;
  }
  pathboundr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && laneboundl_ != nullptr) {
    delete laneboundl_;
  }
  laneboundl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && laneboundr_ != nullptr) {
    delete laneboundr_;
  }
  laneboundr_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PathBoundPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Point2D PathBoundL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pathboundl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Point2D PathBoundR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_pathboundr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Point2D LaneBoundL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_laneboundl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Point2D LaneBoundR = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_laneboundr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PathBoundPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.PathBoundPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Point2D PathBoundL = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pathboundl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Point2D PathBoundR = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pathboundr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Point2D LaneBoundL = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_laneboundl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Point2D LaneBoundR = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_laneboundr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.PathBoundPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.PathBoundPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PathBoundPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.PathBoundPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Point2D PathBoundL = 1;
  if (this->has_pathboundl()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pathboundl(this), output);
  }

  // .IBUS.Point2D PathBoundR = 2;
  if (this->has_pathboundr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::pathboundr(this), output);
  }

  // .IBUS.Point2D LaneBoundL = 3;
  if (this->has_laneboundl()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::laneboundl(this), output);
  }

  // .IBUS.Point2D LaneBoundR = 4;
  if (this->has_laneboundr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::laneboundr(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.PathBoundPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* PathBoundPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.PathBoundPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Point2D PathBoundL = 1;
  if (this->has_pathboundl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pathboundl(this), target);
  }

  // .IBUS.Point2D PathBoundR = 2;
  if (this->has_pathboundr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::pathboundr(this), target);
  }

  // .IBUS.Point2D LaneBoundL = 3;
  if (this->has_laneboundl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::laneboundl(this), target);
  }

  // .IBUS.Point2D LaneBoundR = 4;
  if (this->has_laneboundr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::laneboundr(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.PathBoundPoint)
  return target;
}

size_t PathBoundPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.PathBoundPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Point2D PathBoundL = 1;
  if (this->has_pathboundl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathboundl_);
  }

  // .IBUS.Point2D PathBoundR = 2;
  if (this->has_pathboundr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathboundr_);
  }

  // .IBUS.Point2D LaneBoundL = 3;
  if (this->has_laneboundl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *laneboundl_);
  }

  // .IBUS.Point2D LaneBoundR = 4;
  if (this->has_laneboundr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *laneboundr_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathBoundPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.PathBoundPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathBoundPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathBoundPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.PathBoundPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.PathBoundPoint)
    MergeFrom(*source);
  }
}

void PathBoundPoint::MergeFrom(const PathBoundPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.PathBoundPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pathboundl()) {
    mutable_pathboundl()->::IBUS::Point2D::MergeFrom(from.pathboundl());
  }
  if (from.has_pathboundr()) {
    mutable_pathboundr()->::IBUS::Point2D::MergeFrom(from.pathboundr());
  }
  if (from.has_laneboundl()) {
    mutable_laneboundl()->::IBUS::Point2D::MergeFrom(from.laneboundl());
  }
  if (from.has_laneboundr()) {
    mutable_laneboundr()->::IBUS::Point2D::MergeFrom(from.laneboundr());
  }
}

void PathBoundPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.PathBoundPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathBoundPoint::CopyFrom(const PathBoundPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.PathBoundPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathBoundPoint::IsInitialized() const {
  return true;
}

void PathBoundPoint::InternalSwap(PathBoundPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pathboundl_, other->pathboundl_);
  swap(pathboundr_, other->pathboundr_);
  swap(laneboundl_, other->laneboundl_);
  swap(laneboundr_, other->laneboundr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathBoundPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugPointInf::InitAsDefaultInstance() {
}
class DebugPointInf::_Internal {
 public:
};

void DebugPointInf::clear_debugpoint() {
  debugpoint_.Clear();
}
DebugPointInf::DebugPointInf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.DebugPointInf)
}
DebugPointInf::DebugPointInf(const DebugPointInf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      debugpoint_(from.debugpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pointlabel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.pointlabel().empty()) {
    pointlabel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pointlabel_);
  }
  pointtype_ = from.pointtype_;
  // @@protoc_insertion_point(copy_constructor:IBUS.DebugPointInf)
}

void DebugPointInf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugPointInf_DecisonInterface_2eproto.base);
  pointlabel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pointtype_ = 0;
}

DebugPointInf::~DebugPointInf() {
  // @@protoc_insertion_point(destructor:IBUS.DebugPointInf)
  SharedDtor();
}

void DebugPointInf::SharedDtor() {
  pointlabel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugPointInf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugPointInf& DebugPointInf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugPointInf_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void DebugPointInf::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.DebugPointInf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debugpoint_.Clear();
  pointlabel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pointtype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DebugPointInf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IBUS.Point2D DebugPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_debugpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .IBUS.DebugPointType PointType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_pointtype(static_cast<::IBUS::DebugPointType>(val));
        } else goto handle_unusual;
        continue;
      // string PointLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_pointlabel(), ptr, ctx, "IBUS.DebugPointInf.PointLabel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DebugPointInf::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.DebugPointInf)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IBUS.Point2D DebugPoint = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_debugpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.DebugPointType PointType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pointtype(static_cast< ::IBUS::DebugPointType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PointLabel = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pointlabel()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->pointlabel().data(), static_cast<int>(this->pointlabel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IBUS.DebugPointInf.PointLabel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.DebugPointInf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.DebugPointInf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DebugPointInf::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.DebugPointInf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IBUS.Point2D DebugPoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debugpoint_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->debugpoint(static_cast<int>(i)),
      output);
  }

  // .IBUS.DebugPointType PointType = 2;
  if (this->pointtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->pointtype(), output);
  }

  // string PointLabel = 3;
  if (this->pointlabel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pointlabel().data(), static_cast<int>(this->pointlabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.DebugPointInf.PointLabel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pointlabel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.DebugPointInf)
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugPointInf::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.DebugPointInf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IBUS.Point2D DebugPoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debugpoint_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->debugpoint(static_cast<int>(i)), target);
  }

  // .IBUS.DebugPointType PointType = 2;
  if (this->pointtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->pointtype(), target);
  }

  // string PointLabel = 3;
  if (this->pointlabel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pointlabel().data(), static_cast<int>(this->pointlabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.DebugPointInf.PointLabel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->pointlabel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.DebugPointInf)
  return target;
}

size_t DebugPointInf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.DebugPointInf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IBUS.Point2D DebugPoint = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->debugpoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->debugpoint(static_cast<int>(i)));
    }
  }

  // string PointLabel = 3;
  if (this->pointlabel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->pointlabel());
  }

  // .IBUS.DebugPointType PointType = 2;
  if (this->pointtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pointtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugPointInf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.DebugPointInf)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugPointInf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugPointInf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.DebugPointInf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.DebugPointInf)
    MergeFrom(*source);
  }
}

void DebugPointInf::MergeFrom(const DebugPointInf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.DebugPointInf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debugpoint_.MergeFrom(from.debugpoint_);
  if (from.pointlabel().size() > 0) {

    pointlabel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pointlabel_);
  }
  if (from.pointtype() != 0) {
    set_pointtype(from.pointtype());
  }
}

void DebugPointInf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.DebugPointInf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPointInf::CopyFrom(const DebugPointInf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.DebugPointInf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPointInf::IsInitialized() const {
  return true;
}

void DebugPointInf::InternalSwap(DebugPointInf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&debugpoint_)->InternalSwap(CastToBase(&other->debugpoint_));
  pointlabel_.Swap(&other->pointlabel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pointtype_, other->pointtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugPointInf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlPointInf::InitAsDefaultInstance() {
}
class ControlPointInf::_Internal {
 public:
};

ControlPointInf::ControlPointInf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.ControlPointInf)
}
ControlPointInf::ControlPointInf(const ControlPointInf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accelerationcmd_, &from.accelerationcmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&steeringcmd_) -
    reinterpret_cast<char*>(&accelerationcmd_)) + sizeof(steeringcmd_));
  // @@protoc_insertion_point(copy_constructor:IBUS.ControlPointInf)
}

void ControlPointInf::SharedCtor() {
  ::memset(&accelerationcmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steeringcmd_) -
      reinterpret_cast<char*>(&accelerationcmd_)) + sizeof(steeringcmd_));
}

ControlPointInf::~ControlPointInf() {
  // @@protoc_insertion_point(destructor:IBUS.ControlPointInf)
  SharedDtor();
}

void ControlPointInf::SharedDtor() {
}

void ControlPointInf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlPointInf& ControlPointInf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlPointInf_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void ControlPointInf::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.ControlPointInf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accelerationcmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steeringcmd_) -
      reinterpret_cast<char*>(&accelerationcmd_)) + sizeof(steeringcmd_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlPointInf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.GearType GearCmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gearcmd(static_cast<::IBUS::GearType>(val));
        } else goto handle_unusual;
        continue;
      // double AccelerationCmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          accelerationcmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .IBUS.ThrottleFlagType ThrottleFlagCmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_throttleflagcmd(static_cast<::IBUS::ThrottleFlagType>(val));
        } else goto handle_unusual;
        continue;
      // double ThrottleCmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          throttlecmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .IBUS.BrakeFlagType BrakeFlagCmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_brakeflagcmd(static_cast<::IBUS::BrakeFlagType>(val));
        } else goto handle_unusual;
        continue;
      // double BrakeCmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          brakecmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double SteeringCmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          steeringcmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .IBUS.EpbType EPBCmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_epbcmd(static_cast<::IBUS::EpbType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlPointInf::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.ControlPointInf)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.GearType GearCmd = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gearcmd(static_cast< ::IBUS::GearType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AccelerationCmd = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerationcmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.ThrottleFlagType ThrottleFlagCmd = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_throttleflagcmd(static_cast< ::IBUS::ThrottleFlagType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ThrottleCmd = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttlecmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.BrakeFlagType BrakeFlagCmd = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_brakeflagcmd(static_cast< ::IBUS::BrakeFlagType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BrakeCmd = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brakecmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SteeringCmd = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringcmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.EpbType EPBCmd = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_epbcmd(static_cast< ::IBUS::EpbType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.ControlPointInf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.ControlPointInf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlPointInf::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.ControlPointInf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.GearType GearCmd = 1;
  if (this->gearcmd() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->gearcmd(), output);
  }

  // double AccelerationCmd = 2;
  if (!(this->accelerationcmd() <= 0 && this->accelerationcmd() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->accelerationcmd(), output);
  }

  // .IBUS.ThrottleFlagType ThrottleFlagCmd = 3;
  if (this->throttleflagcmd() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->throttleflagcmd(), output);
  }

  // double ThrottleCmd = 4;
  if (!(this->throttlecmd() <= 0 && this->throttlecmd() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->throttlecmd(), output);
  }

  // .IBUS.BrakeFlagType BrakeFlagCmd = 5;
  if (this->brakeflagcmd() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->brakeflagcmd(), output);
  }

  // double BrakeCmd = 6;
  if (!(this->brakecmd() <= 0 && this->brakecmd() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->brakecmd(), output);
  }

  // double SteeringCmd = 7;
  if (!(this->steeringcmd() <= 0 && this->steeringcmd() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->steeringcmd(), output);
  }

  // .IBUS.EpbType EPBCmd = 8;
  if (this->epbcmd() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->epbcmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.ControlPointInf)
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlPointInf::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.ControlPointInf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.GearType GearCmd = 1;
  if (this->gearcmd() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->gearcmd(), target);
  }

  // double AccelerationCmd = 2;
  if (!(this->accelerationcmd() <= 0 && this->accelerationcmd() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->accelerationcmd(), target);
  }

  // .IBUS.ThrottleFlagType ThrottleFlagCmd = 3;
  if (this->throttleflagcmd() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->throttleflagcmd(), target);
  }

  // double ThrottleCmd = 4;
  if (!(this->throttlecmd() <= 0 && this->throttlecmd() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->throttlecmd(), target);
  }

  // .IBUS.BrakeFlagType BrakeFlagCmd = 5;
  if (this->brakeflagcmd() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->brakeflagcmd(), target);
  }

  // double BrakeCmd = 6;
  if (!(this->brakecmd() <= 0 && this->brakecmd() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->brakecmd(), target);
  }

  // double SteeringCmd = 7;
  if (!(this->steeringcmd() <= 0 && this->steeringcmd() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->steeringcmd(), target);
  }

  // .IBUS.EpbType EPBCmd = 8;
  if (this->epbcmd() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->epbcmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.ControlPointInf)
  return target;
}

size_t ControlPointInf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.ControlPointInf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double AccelerationCmd = 2;
  if (!(this->accelerationcmd() <= 0 && this->accelerationcmd() >= 0)) {
    total_size += 1 + 8;
  }

  // .IBUS.GearType GearCmd = 1;
  if (this->gearcmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gearcmd());
  }

  // .IBUS.ThrottleFlagType ThrottleFlagCmd = 3;
  if (this->throttleflagcmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->throttleflagcmd());
  }

  // double ThrottleCmd = 4;
  if (!(this->throttlecmd() <= 0 && this->throttlecmd() >= 0)) {
    total_size += 1 + 8;
  }

  // double BrakeCmd = 6;
  if (!(this->brakecmd() <= 0 && this->brakecmd() >= 0)) {
    total_size += 1 + 8;
  }

  // .IBUS.BrakeFlagType BrakeFlagCmd = 5;
  if (this->brakeflagcmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->brakeflagcmd());
  }

  // .IBUS.EpbType EPBCmd = 8;
  if (this->epbcmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->epbcmd());
  }

  // double SteeringCmd = 7;
  if (!(this->steeringcmd() <= 0 && this->steeringcmd() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlPointInf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.ControlPointInf)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlPointInf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlPointInf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.ControlPointInf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.ControlPointInf)
    MergeFrom(*source);
  }
}

void ControlPointInf::MergeFrom(const ControlPointInf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.ControlPointInf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.accelerationcmd() <= 0 && from.accelerationcmd() >= 0)) {
    set_accelerationcmd(from.accelerationcmd());
  }
  if (from.gearcmd() != 0) {
    set_gearcmd(from.gearcmd());
  }
  if (from.throttleflagcmd() != 0) {
    set_throttleflagcmd(from.throttleflagcmd());
  }
  if (!(from.throttlecmd() <= 0 && from.throttlecmd() >= 0)) {
    set_throttlecmd(from.throttlecmd());
  }
  if (!(from.brakecmd() <= 0 && from.brakecmd() >= 0)) {
    set_brakecmd(from.brakecmd());
  }
  if (from.brakeflagcmd() != 0) {
    set_brakeflagcmd(from.brakeflagcmd());
  }
  if (from.epbcmd() != 0) {
    set_epbcmd(from.epbcmd());
  }
  if (!(from.steeringcmd() <= 0 && from.steeringcmd() >= 0)) {
    set_steeringcmd(from.steeringcmd());
  }
}

void ControlPointInf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.ControlPointInf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlPointInf::CopyFrom(const ControlPointInf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.ControlPointInf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPointInf::IsInitialized() const {
  return true;
}

void ControlPointInf::InternalSwap(ControlPointInf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(accelerationcmd_, other->accelerationcmd_);
  swap(gearcmd_, other->gearcmd_);
  swap(throttleflagcmd_, other->throttleflagcmd_);
  swap(throttlecmd_, other->throttlecmd_);
  swap(brakecmd_, other->brakecmd_);
  swap(brakeflagcmd_, other->brakeflagcmd_);
  swap(epbcmd_, other->epbcmd_);
  swap(steeringcmd_, other->steeringcmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlPointInf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationService::InitAsDefaultInstance() {
  ::IBUS::_NavigationService_default_instance_._instance.get_mutable()->header_ = const_cast< ::IBUS::Header*>(
      ::IBUS::Header::internal_default_instance());
}
class NavigationService::_Internal {
 public:
  static const ::IBUS::Header& header(const NavigationService* msg);
};

const ::IBUS::Header&
NavigationService::_Internal::header(const NavigationService* msg) {
  return *msg->header_;
}
void NavigationService::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
NavigationService::NavigationService()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.NavigationService)
}
NavigationService::NavigationService(const NavigationService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      recommendroadsegments_(from.recommendroadsegments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::IBUS::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  navigationserviceflg_ = from.navigationserviceflg_;
  // @@protoc_insertion_point(copy_constructor:IBUS.NavigationService)
}

void NavigationService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationService_DecisonInterface_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navigationserviceflg_) -
      reinterpret_cast<char*>(&header_)) + sizeof(navigationserviceflg_));
}

NavigationService::~NavigationService() {
  // @@protoc_insertion_point(destructor:IBUS.NavigationService)
  SharedDtor();
}

void NavigationService::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NavigationService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationService& NavigationService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationService_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void NavigationService::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.NavigationService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recommendroadsegments_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  navigationserviceflg_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavigationService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IBUS.Recommendation RecommendRoadSegments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_recommendroadsegments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // uint32 NavigationServiceFlg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          navigationserviceflg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavigationService::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.NavigationService)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IBUS.Recommendation RecommendRoadSegments = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_recommendroadsegments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NavigationServiceFlg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navigationserviceflg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.NavigationService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.NavigationService)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavigationService::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.NavigationService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .IBUS.Recommendation RecommendRoadSegments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recommendroadsegments_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->recommendroadsegments(static_cast<int>(i)),
      output);
  }

  // uint32 NavigationServiceFlg = 3;
  if (this->navigationserviceflg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->navigationserviceflg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.NavigationService)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationService::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.NavigationService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .IBUS.Recommendation RecommendRoadSegments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recommendroadsegments_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->recommendroadsegments(static_cast<int>(i)), target);
  }

  // uint32 NavigationServiceFlg = 3;
  if (this->navigationserviceflg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->navigationserviceflg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.NavigationService)
  return target;
}

size_t NavigationService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.NavigationService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IBUS.Recommendation RecommendRoadSegments = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->recommendroadsegments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->recommendroadsegments(static_cast<int>(i)));
    }
  }

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 NavigationServiceFlg = 3;
  if (this->navigationserviceflg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->navigationserviceflg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.NavigationService)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.NavigationService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.NavigationService)
    MergeFrom(*source);
  }
}

void NavigationService::MergeFrom(const NavigationService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.NavigationService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recommendroadsegments_.MergeFrom(from.recommendroadsegments_);
  if (from.has_header()) {
    mutable_header()->::IBUS::Header::MergeFrom(from.header());
  }
  if (from.navigationserviceflg() != 0) {
    set_navigationserviceflg(from.navigationserviceflg());
  }
}

void NavigationService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.NavigationService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationService::CopyFrom(const NavigationService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.NavigationService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationService::IsInitialized() const {
  return true;
}

void NavigationService::InternalSwap(NavigationService* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&recommendroadsegments_)->InternalSwap(CastToBase(&other->recommendroadsegments_));
  swap(header_, other->header_);
  swap(navigationserviceflg_, other->navigationserviceflg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecisionService::InitAsDefaultInstance() {
  ::IBUS::_DecisionService_default_instance_._instance.get_mutable()->header_ = const_cast< ::IBUS::Header*>(
      ::IBUS::Header::internal_default_instance());
  ::IBUS::_DecisionService_default_instance_._instance.get_mutable()->mdecision_ = const_cast< ::IBUS::MissionDecision*>(
      ::IBUS::MissionDecision::internal_default_instance());
  ::IBUS::_DecisionService_default_instance_._instance.get_mutable()->ddecision_ = const_cast< ::IBUS::DDTDecision*>(
      ::IBUS::DDTDecision::internal_default_instance());
}
class DecisionService::_Internal {
 public:
  static const ::IBUS::Header& header(const DecisionService* msg);
  static const ::IBUS::MissionDecision& mdecision(const DecisionService* msg);
  static const ::IBUS::DDTDecision& ddecision(const DecisionService* msg);
};

const ::IBUS::Header&
DecisionService::_Internal::header(const DecisionService* msg) {
  return *msg->header_;
}
const ::IBUS::MissionDecision&
DecisionService::_Internal::mdecision(const DecisionService* msg) {
  return *msg->mdecision_;
}
const ::IBUS::DDTDecision&
DecisionService::_Internal::ddecision(const DecisionService* msg) {
  return *msg->ddecision_;
}
void DecisionService::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DecisionService::DecisionService()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.DecisionService)
}
DecisionService::DecisionService(const DecisionService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::IBUS::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_mdecision()) {
    mdecision_ = new ::IBUS::MissionDecision(*from.mdecision_);
  } else {
    mdecision_ = nullptr;
  }
  if (from.has_ddecision()) {
    ddecision_ = new ::IBUS::DDTDecision(*from.ddecision_);
  } else {
    ddecision_ = nullptr;
  }
  decisionserviceflg_ = from.decisionserviceflg_;
  // @@protoc_insertion_point(copy_constructor:IBUS.DecisionService)
}

void DecisionService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecisionService_DecisonInterface_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decisionserviceflg_) -
      reinterpret_cast<char*>(&header_)) + sizeof(decisionserviceflg_));
}

DecisionService::~DecisionService() {
  // @@protoc_insertion_point(destructor:IBUS.DecisionService)
  SharedDtor();
}

void DecisionService::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mdecision_;
  if (this != internal_default_instance()) delete ddecision_;
}

void DecisionService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionService& DecisionService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionService_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void DecisionService::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.DecisionService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdecision_ != nullptr) {
    delete mdecision_;
  }
  mdecision_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ddecision_ != nullptr) {
    delete ddecision_;
  }
  ddecision_ = nullptr;
  decisionserviceflg_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DecisionService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.MissionDecision MDecision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mdecision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.DDTDecision DDecision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ddecision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DecisionServiceFlg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          decisionserviceflg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DecisionService::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.DecisionService)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.MissionDecision MDecision = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdecision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.DDTDecision DDecision = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ddecision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DecisionServiceFlg = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decisionserviceflg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.DecisionService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.DecisionService)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DecisionService::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.DecisionService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .IBUS.MissionDecision MDecision = 2;
  if (this->has_mdecision()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::mdecision(this), output);
  }

  // .IBUS.DDTDecision DDecision = 3;
  if (this->has_ddecision()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::ddecision(this), output);
  }

  // uint32 DecisionServiceFlg = 4;
  if (this->decisionserviceflg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->decisionserviceflg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.DecisionService)
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionService::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.DecisionService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .IBUS.MissionDecision MDecision = 2;
  if (this->has_mdecision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mdecision(this), target);
  }

  // .IBUS.DDTDecision DDecision = 3;
  if (this->has_ddecision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::ddecision(this), target);
  }

  // uint32 DecisionServiceFlg = 4;
  if (this->decisionserviceflg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->decisionserviceflg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.DecisionService)
  return target;
}

size_t DecisionService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.DecisionService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .IBUS.MissionDecision MDecision = 2;
  if (this->has_mdecision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdecision_);
  }

  // .IBUS.DDTDecision DDecision = 3;
  if (this->has_ddecision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ddecision_);
  }

  // uint32 DecisionServiceFlg = 4;
  if (this->decisionserviceflg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->decisionserviceflg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.DecisionService)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.DecisionService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.DecisionService)
    MergeFrom(*source);
  }
}

void DecisionService::MergeFrom(const DecisionService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.DecisionService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::IBUS::Header::MergeFrom(from.header());
  }
  if (from.has_mdecision()) {
    mutable_mdecision()->::IBUS::MissionDecision::MergeFrom(from.mdecision());
  }
  if (from.has_ddecision()) {
    mutable_ddecision()->::IBUS::DDTDecision::MergeFrom(from.ddecision());
  }
  if (from.decisionserviceflg() != 0) {
    set_decisionserviceflg(from.decisionserviceflg());
  }
}

void DecisionService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.DecisionService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionService::CopyFrom(const DecisionService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.DecisionService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionService::IsInitialized() const {
  return true;
}

void DecisionService::InternalSwap(DecisionService* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(mdecision_, other->mdecision_);
  swap(ddecision_, other->ddecision_);
  swap(decisionserviceflg_, other->decisionserviceflg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryPlanningService::InitAsDefaultInstance() {
  ::IBUS::_TrajectoryPlanningService_default_instance_._instance.get_mutable()->header_ = const_cast< ::IBUS::Header*>(
      ::IBUS::Header::internal_default_instance());
  ::IBUS::_TrajectoryPlanningService_default_instance_._instance.get_mutable()->debugpoint_ = const_cast< ::IBUS::DebugPointInf*>(
      ::IBUS::DebugPointInf::internal_default_instance());
  ::IBUS::_TrajectoryPlanningService_default_instance_._instance.get_mutable()->controlpoint_ = const_cast< ::IBUS::ControlPointInf*>(
      ::IBUS::ControlPointInf::internal_default_instance());
}
class TrajectoryPlanningService::_Internal {
 public:
  static const ::IBUS::Header& header(const TrajectoryPlanningService* msg);
  static const ::IBUS::DebugPointInf& debugpoint(const TrajectoryPlanningService* msg);
  static const ::IBUS::ControlPointInf& controlpoint(const TrajectoryPlanningService* msg);
};

const ::IBUS::Header&
TrajectoryPlanningService::_Internal::header(const TrajectoryPlanningService* msg) {
  return *msg->header_;
}
const ::IBUS::DebugPointInf&
TrajectoryPlanningService::_Internal::debugpoint(const TrajectoryPlanningService* msg) {
  return *msg->debugpoint_;
}
const ::IBUS::ControlPointInf&
TrajectoryPlanningService::_Internal::controlpoint(const TrajectoryPlanningService* msg) {
  return *msg->controlpoint_;
}
void TrajectoryPlanningService::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TrajectoryPlanningService::TrajectoryPlanningService()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.TrajectoryPlanningService)
}
TrajectoryPlanningService::TrajectoryPlanningService(const TrajectoryPlanningService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trajectorypoints_(from.trajectorypoints_),
      latmaxoffset_(from.latmaxoffset_),
      refline_(from.refline_),
      pathbound_(from.pathbound_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::IBUS::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_debugpoint()) {
    debugpoint_ = new ::IBUS::DebugPointInf(*from.debugpoint_);
  } else {
    debugpoint_ = nullptr;
  }
  if (from.has_controlpoint()) {
    controlpoint_ = new ::IBUS::ControlPointInf(*from.controlpoint_);
  } else {
    controlpoint_ = nullptr;
  }
  ::memcpy(&trajectorylength_, &from.trajectorylength_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectoryplanningserviceflg_) -
    reinterpret_cast<char*>(&trajectorylength_)) + sizeof(trajectoryplanningserviceflg_));
  // @@protoc_insertion_point(copy_constructor:IBUS.TrajectoryPlanningService)
}

void TrajectoryPlanningService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPlanningService_DecisonInterface_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectoryplanningserviceflg_) -
      reinterpret_cast<char*>(&header_)) + sizeof(trajectoryplanningserviceflg_));
}

TrajectoryPlanningService::~TrajectoryPlanningService() {
  // @@protoc_insertion_point(destructor:IBUS.TrajectoryPlanningService)
  SharedDtor();
}

void TrajectoryPlanningService::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete debugpoint_;
  if (this != internal_default_instance()) delete controlpoint_;
}

void TrajectoryPlanningService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPlanningService& TrajectoryPlanningService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPlanningService_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPlanningService::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.TrajectoryPlanningService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectorypoints_.Clear();
  latmaxoffset_.Clear();
  refline_.Clear();
  pathbound_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && debugpoint_ != nullptr) {
    delete debugpoint_;
  }
  debugpoint_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && controlpoint_ != nullptr) {
    delete controlpoint_;
  }
  controlpoint_ = nullptr;
  ::memset(&trajectorylength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectoryplanningserviceflg_) -
      reinterpret_cast<char*>(&trajectorylength_)) + sizeof(trajectoryplanningserviceflg_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryPlanningService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.TrajectoryType TrajType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_trajtype(static_cast<::IBUS::TrajectoryType>(val));
        } else goto handle_unusual;
        continue;
      // double TrajectoryLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          trajectorylength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TrajectoryTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          trajectorytime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .IBUS.TrajectoryPoint TrajectoryPoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trajectorypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated double LatMaxOffset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_latmaxoffset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          add_latmaxoffset(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .IBUS.RefLinePoint RefLine = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_refline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .IBUS.PathBoundPoint PathBound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pathbound(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .IBUS.DebugPointInf DebugPoint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_debugpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.ControlPointInf ControlPoint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_controlpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TrajectoryPlanningServiceFlg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          trajectoryplanningserviceflg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryPlanningService::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.TrajectoryPlanningService)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.TrajectoryType TrajType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trajtype(static_cast< ::IBUS::TrajectoryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TrajectoryLength = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectorylength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TrajectoryTime = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectorytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IBUS.TrajectoryPoint TrajectoryPoints = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trajectorypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double LatMaxOffset = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_latmaxoffset())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_latmaxoffset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IBUS.RefLinePoint RefLine = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_refline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IBUS.PathBoundPoint PathBound = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pathbound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.DebugPointInf DebugPoint = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debugpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.ControlPointInf ControlPoint = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_controlpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TrajectoryPlanningServiceFlg = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trajectoryplanningserviceflg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.TrajectoryPlanningService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.TrajectoryPlanningService)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryPlanningService::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.TrajectoryPlanningService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .IBUS.TrajectoryType TrajType = 2;
  if (this->trajtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->trajtype(), output);
  }

  // double TrajectoryLength = 3;
  if (!(this->trajectorylength() <= 0 && this->trajectorylength() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->trajectorylength(), output);
  }

  // double TrajectoryTime = 4;
  if (!(this->trajectorytime() <= 0 && this->trajectorytime() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->trajectorytime(), output);
  }

  // repeated .IBUS.TrajectoryPoint TrajectoryPoints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectorypoints_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->trajectorypoints(static_cast<int>(i)),
      output);
  }

  // repeated double LatMaxOffset = 6;
  if (this->latmaxoffset_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latmaxoffset_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->latmaxoffset().data(), this->latmaxoffset_size(), output);
  }

  // repeated .IBUS.RefLinePoint RefLine = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refline_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->refline(static_cast<int>(i)),
      output);
  }

  // repeated .IBUS.PathBoundPoint PathBound = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pathbound_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->pathbound(static_cast<int>(i)),
      output);
  }

  // .IBUS.DebugPointInf DebugPoint = 9;
  if (this->has_debugpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::debugpoint(this), output);
  }

  // .IBUS.ControlPointInf ControlPoint = 10;
  if (this->has_controlpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::controlpoint(this), output);
  }

  // uint32 TrajectoryPlanningServiceFlg = 11;
  if (this->trajectoryplanningserviceflg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->trajectoryplanningserviceflg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.TrajectoryPlanningService)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPlanningService::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.TrajectoryPlanningService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .IBUS.TrajectoryType TrajType = 2;
  if (this->trajtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->trajtype(), target);
  }

  // double TrajectoryLength = 3;
  if (!(this->trajectorylength() <= 0 && this->trajectorylength() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->trajectorylength(), target);
  }

  // double TrajectoryTime = 4;
  if (!(this->trajectorytime() <= 0 && this->trajectorytime() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->trajectorytime(), target);
  }

  // repeated .IBUS.TrajectoryPoint TrajectoryPoints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectorypoints_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->trajectorypoints(static_cast<int>(i)), target);
  }

  // repeated double LatMaxOffset = 6;
  if (this->latmaxoffset_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _latmaxoffset_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->latmaxoffset_, target);
  }

  // repeated .IBUS.RefLinePoint RefLine = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refline_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->refline(static_cast<int>(i)), target);
  }

  // repeated .IBUS.PathBoundPoint PathBound = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pathbound_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->pathbound(static_cast<int>(i)), target);
  }

  // .IBUS.DebugPointInf DebugPoint = 9;
  if (this->has_debugpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::debugpoint(this), target);
  }

  // .IBUS.ControlPointInf ControlPoint = 10;
  if (this->has_controlpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::controlpoint(this), target);
  }

  // uint32 TrajectoryPlanningServiceFlg = 11;
  if (this->trajectoryplanningserviceflg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->trajectoryplanningserviceflg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.TrajectoryPlanningService)
  return target;
}

size_t TrajectoryPlanningService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.TrajectoryPlanningService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IBUS.TrajectoryPoint TrajectoryPoints = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectorypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trajectorypoints(static_cast<int>(i)));
    }
  }

  // repeated double LatMaxOffset = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->latmaxoffset_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _latmaxoffset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .IBUS.RefLinePoint RefLine = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->refline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->refline(static_cast<int>(i)));
    }
  }

  // repeated .IBUS.PathBoundPoint PathBound = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->pathbound_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pathbound(static_cast<int>(i)));
    }
  }

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .IBUS.DebugPointInf DebugPoint = 9;
  if (this->has_debugpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debugpoint_);
  }

  // .IBUS.ControlPointInf ControlPoint = 10;
  if (this->has_controlpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlpoint_);
  }

  // double TrajectoryLength = 3;
  if (!(this->trajectorylength() <= 0 && this->trajectorylength() >= 0)) {
    total_size += 1 + 8;
  }

  // double TrajectoryTime = 4;
  if (!(this->trajectorytime() <= 0 && this->trajectorytime() >= 0)) {
    total_size += 1 + 8;
  }

  // .IBUS.TrajectoryType TrajType = 2;
  if (this->trajtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trajtype());
  }

  // uint32 TrajectoryPlanningServiceFlg = 11;
  if (this->trajectoryplanningserviceflg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->trajectoryplanningserviceflg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPlanningService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.TrajectoryPlanningService)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPlanningService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPlanningService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.TrajectoryPlanningService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.TrajectoryPlanningService)
    MergeFrom(*source);
  }
}

void TrajectoryPlanningService::MergeFrom(const TrajectoryPlanningService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.TrajectoryPlanningService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectorypoints_.MergeFrom(from.trajectorypoints_);
  latmaxoffset_.MergeFrom(from.latmaxoffset_);
  refline_.MergeFrom(from.refline_);
  pathbound_.MergeFrom(from.pathbound_);
  if (from.has_header()) {
    mutable_header()->::IBUS::Header::MergeFrom(from.header());
  }
  if (from.has_debugpoint()) {
    mutable_debugpoint()->::IBUS::DebugPointInf::MergeFrom(from.debugpoint());
  }
  if (from.has_controlpoint()) {
    mutable_controlpoint()->::IBUS::ControlPointInf::MergeFrom(from.controlpoint());
  }
  if (!(from.trajectorylength() <= 0 && from.trajectorylength() >= 0)) {
    set_trajectorylength(from.trajectorylength());
  }
  if (!(from.trajectorytime() <= 0 && from.trajectorytime() >= 0)) {
    set_trajectorytime(from.trajectorytime());
  }
  if (from.trajtype() != 0) {
    set_trajtype(from.trajtype());
  }
  if (from.trajectoryplanningserviceflg() != 0) {
    set_trajectoryplanningserviceflg(from.trajectoryplanningserviceflg());
  }
}

void TrajectoryPlanningService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.TrajectoryPlanningService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPlanningService::CopyFrom(const TrajectoryPlanningService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.TrajectoryPlanningService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPlanningService::IsInitialized() const {
  return true;
}

void TrajectoryPlanningService::InternalSwap(TrajectoryPlanningService* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trajectorypoints_)->InternalSwap(CastToBase(&other->trajectorypoints_));
  latmaxoffset_.InternalSwap(&other->latmaxoffset_);
  CastToBase(&refline_)->InternalSwap(CastToBase(&other->refline_));
  CastToBase(&pathbound_)->InternalSwap(CastToBase(&other->pathbound_));
  swap(header_, other->header_);
  swap(debugpoint_, other->debugpoint_);
  swap(controlpoint_, other->controlpoint_);
  swap(trajectorylength_, other->trajectorylength_);
  swap(trajectorytime_, other->trajectorytime_);
  swap(trajtype_, other->trajtype_);
  swap(trajectoryplanningserviceflg_, other->trajectoryplanningserviceflg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPlanningService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecisionPlanMsg::InitAsDefaultInstance() {
  ::IBUS::_DecisionPlanMsg_default_instance_._instance.get_mutable()->navigationinterface_ = const_cast< ::IBUS::NavigationService*>(
      ::IBUS::NavigationService::internal_default_instance());
  ::IBUS::_DecisionPlanMsg_default_instance_._instance.get_mutable()->decisioninterface_ = const_cast< ::IBUS::DecisionService*>(
      ::IBUS::DecisionService::internal_default_instance());
  ::IBUS::_DecisionPlanMsg_default_instance_._instance.get_mutable()->trajectoryplanninginterface_ = const_cast< ::IBUS::TrajectoryPlanningService*>(
      ::IBUS::TrajectoryPlanningService::internal_default_instance());
}
class DecisionPlanMsg::_Internal {
 public:
  static const ::IBUS::NavigationService& navigationinterface(const DecisionPlanMsg* msg);
  static const ::IBUS::DecisionService& decisioninterface(const DecisionPlanMsg* msg);
  static const ::IBUS::TrajectoryPlanningService& trajectoryplanninginterface(const DecisionPlanMsg* msg);
};

const ::IBUS::NavigationService&
DecisionPlanMsg::_Internal::navigationinterface(const DecisionPlanMsg* msg) {
  return *msg->navigationinterface_;
}
const ::IBUS::DecisionService&
DecisionPlanMsg::_Internal::decisioninterface(const DecisionPlanMsg* msg) {
  return *msg->decisioninterface_;
}
const ::IBUS::TrajectoryPlanningService&
DecisionPlanMsg::_Internal::trajectoryplanninginterface(const DecisionPlanMsg* msg) {
  return *msg->trajectoryplanninginterface_;
}
DecisionPlanMsg::DecisionPlanMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.DecisionPlanMsg)
}
DecisionPlanMsg::DecisionPlanMsg(const DecisionPlanMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_navigationinterface()) {
    navigationinterface_ = new ::IBUS::NavigationService(*from.navigationinterface_);
  } else {
    navigationinterface_ = nullptr;
  }
  if (from.has_decisioninterface()) {
    decisioninterface_ = new ::IBUS::DecisionService(*from.decisioninterface_);
  } else {
    decisioninterface_ = nullptr;
  }
  if (from.has_trajectoryplanninginterface()) {
    trajectoryplanninginterface_ = new ::IBUS::TrajectoryPlanningService(*from.trajectoryplanninginterface_);
  } else {
    trajectoryplanninginterface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IBUS.DecisionPlanMsg)
}

void DecisionPlanMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecisionPlanMsg_DecisonInterface_2eproto.base);
  ::memset(&navigationinterface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectoryplanninginterface_) -
      reinterpret_cast<char*>(&navigationinterface_)) + sizeof(trajectoryplanninginterface_));
}

DecisionPlanMsg::~DecisionPlanMsg() {
  // @@protoc_insertion_point(destructor:IBUS.DecisionPlanMsg)
  SharedDtor();
}

void DecisionPlanMsg::SharedDtor() {
  if (this != internal_default_instance()) delete navigationinterface_;
  if (this != internal_default_instance()) delete decisioninterface_;
  if (this != internal_default_instance()) delete trajectoryplanninginterface_;
}

void DecisionPlanMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionPlanMsg& DecisionPlanMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionPlanMsg_DecisonInterface_2eproto.base);
  return *internal_default_instance();
}


void DecisionPlanMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.DecisionPlanMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && navigationinterface_ != nullptr) {
    delete navigationinterface_;
  }
  navigationinterface_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && decisioninterface_ != nullptr) {
    delete decisioninterface_;
  }
  decisioninterface_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trajectoryplanninginterface_ != nullptr) {
    delete trajectoryplanninginterface_;
  }
  trajectoryplanninginterface_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DecisionPlanMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.NavigationService NavigationInterface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_navigationinterface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.DecisionService DecisionInterface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_decisioninterface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.TrajectoryPlanningService TrajectoryPlanningInterface = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_trajectoryplanninginterface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DecisionPlanMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.DecisionPlanMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.NavigationService NavigationInterface = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_navigationinterface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.DecisionService DecisionInterface = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_decisioninterface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.TrajectoryPlanningService TrajectoryPlanningInterface = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectoryplanninginterface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.DecisionPlanMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.DecisionPlanMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DecisionPlanMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.DecisionPlanMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.NavigationService NavigationInterface = 1;
  if (this->has_navigationinterface()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::navigationinterface(this), output);
  }

  // .IBUS.DecisionService DecisionInterface = 2;
  if (this->has_decisioninterface()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::decisioninterface(this), output);
  }

  // .IBUS.TrajectoryPlanningService TrajectoryPlanningInterface = 3;
  if (this->has_trajectoryplanninginterface()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::trajectoryplanninginterface(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.DecisionPlanMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionPlanMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.DecisionPlanMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.NavigationService NavigationInterface = 1;
  if (this->has_navigationinterface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::navigationinterface(this), target);
  }

  // .IBUS.DecisionService DecisionInterface = 2;
  if (this->has_decisioninterface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::decisioninterface(this), target);
  }

  // .IBUS.TrajectoryPlanningService TrajectoryPlanningInterface = 3;
  if (this->has_trajectoryplanninginterface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::trajectoryplanninginterface(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.DecisionPlanMsg)
  return target;
}

size_t DecisionPlanMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.DecisionPlanMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.NavigationService NavigationInterface = 1;
  if (this->has_navigationinterface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *navigationinterface_);
  }

  // .IBUS.DecisionService DecisionInterface = 2;
  if (this->has_decisioninterface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *decisioninterface_);
  }

  // .IBUS.TrajectoryPlanningService TrajectoryPlanningInterface = 3;
  if (this->has_trajectoryplanninginterface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectoryplanninginterface_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionPlanMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.DecisionPlanMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionPlanMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionPlanMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.DecisionPlanMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.DecisionPlanMsg)
    MergeFrom(*source);
  }
}

void DecisionPlanMsg::MergeFrom(const DecisionPlanMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.DecisionPlanMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_navigationinterface()) {
    mutable_navigationinterface()->::IBUS::NavigationService::MergeFrom(from.navigationinterface());
  }
  if (from.has_decisioninterface()) {
    mutable_decisioninterface()->::IBUS::DecisionService::MergeFrom(from.decisioninterface());
  }
  if (from.has_trajectoryplanninginterface()) {
    mutable_trajectoryplanninginterface()->::IBUS::TrajectoryPlanningService::MergeFrom(from.trajectoryplanninginterface());
  }
}

void DecisionPlanMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.DecisionPlanMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionPlanMsg::CopyFrom(const DecisionPlanMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.DecisionPlanMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionPlanMsg::IsInitialized() const {
  return true;
}

void DecisionPlanMsg::InternalSwap(DecisionPlanMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(navigationinterface_, other->navigationinterface_);
  swap(decisioninterface_, other->decisioninterface_);
  swap(trajectoryplanninginterface_, other->trajectoryplanninginterface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionPlanMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IBUS::Recommendation* Arena::CreateMaybeMessage< ::IBUS::Recommendation >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::Recommendation >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::MissionDecision* Arena::CreateMaybeMessage< ::IBUS::MissionDecision >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::MissionDecision >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::DDTDecision_ObjectDecision* Arena::CreateMaybeMessage< ::IBUS::DDTDecision_ObjectDecision >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::DDTDecision_ObjectDecision >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::DDTDecision* Arena::CreateMaybeMessage< ::IBUS::DDTDecision >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::DDTDecision >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::TrajectoryPoint* Arena::CreateMaybeMessage< ::IBUS::TrajectoryPoint >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::TrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::RefLinePoint* Arena::CreateMaybeMessage< ::IBUS::RefLinePoint >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::RefLinePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::PathBoundPoint* Arena::CreateMaybeMessage< ::IBUS::PathBoundPoint >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::PathBoundPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::DebugPointInf* Arena::CreateMaybeMessage< ::IBUS::DebugPointInf >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::DebugPointInf >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::ControlPointInf* Arena::CreateMaybeMessage< ::IBUS::ControlPointInf >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::ControlPointInf >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::NavigationService* Arena::CreateMaybeMessage< ::IBUS::NavigationService >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::NavigationService >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::DecisionService* Arena::CreateMaybeMessage< ::IBUS::DecisionService >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::DecisionService >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::TrajectoryPlanningService* Arena::CreateMaybeMessage< ::IBUS::TrajectoryPlanningService >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::TrajectoryPlanningService >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::DecisionPlanMsg* Arena::CreateMaybeMessage< ::IBUS::DecisionPlanMsg >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::DecisionPlanMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
