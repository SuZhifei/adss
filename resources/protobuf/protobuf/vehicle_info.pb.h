// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5finfo_2eproto;
namespace IBUS {
class VehicleInfo;
class VehicleInfoDefaultTypeInternal;
extern VehicleInfoDefaultTypeInternal _VehicleInfo_default_instance_;
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> ::IBUS::VehicleInfo* Arena::CreateMaybeMessage<::IBUS::VehicleInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IBUS {

// ===================================================================

class VehicleInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.VehicleInfo) */ {
 public:
  VehicleInfo();
  virtual ~VehicleInfo();

  VehicleInfo(const VehicleInfo& from);
  VehicleInfo(VehicleInfo&& from) noexcept
    : VehicleInfo() {
    *this = ::std::move(from);
  }

  inline VehicleInfo& operator=(const VehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleInfo& operator=(VehicleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleInfo* internal_default_instance() {
    return reinterpret_cast<const VehicleInfo*>(
               &_VehicleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleInfo& a, VehicleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleInfo* New() const final {
    return CreateMaybeMessage<VehicleInfo>(nullptr);
  }

  VehicleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleInfo& from);
  void MergeFrom(const VehicleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.VehicleInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5finfo_2eproto);
    return ::descriptor_table_vehicle_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kCurrentControlIdFieldNumber = 2,
    kAutoModeFieldNumber = 3,
    kVcuDriveModeFieldNumber = 4,
    kVehicleStatusFieldNumber = 5,
    kRealSpeedFieldNumber = 6,
    kDriverGearFieldNumber = 7,
    kVcuGearFieldNumber = 8,
    kSteeringWheelAngleFieldNumber = 9,
    kSteeringWheelTorqueFieldNumber = 10,
    kShibaoSteeringWheelWorkModeFieldNumber = 11,
    kOperationStateXFieldNumber = 12,
    kEpbStatusFieldNumber = 13,
    kPLightStatusFieldNumber = 14,
    kRealThrottlePedalOpeningFieldNumber = 16,
    kVcuThrottlePedalOpeningFieldNumber = 17,
    kBrakeStatusFieldNumber = 15,
    kAutoQuitReasonFieldNumber = 19,
    kBreakPedalOpeningFieldNumber = 18,
    kEmergencyStopStatusFieldNumber = 20,
    kEmergencyStopReasonFieldNumber = 21,
    kAutoButtonFieldNumber = 22,
    kAutoHoldStatusFieldNumber = 23,
  };
  // .IBUS.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::IBUS::Header& header() const;
  ::IBUS::Header* release_header();
  ::IBUS::Header* mutable_header();
  void set_allocated_header(::IBUS::Header* header);

  // uint32 currentControlId = 2;
  void clear_currentcontrolid();
  ::PROTOBUF_NAMESPACE_ID::uint32 currentcontrolid() const;
  void set_currentcontrolid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 autoMode = 3;
  void clear_automode();
  ::PROTOBUF_NAMESPACE_ID::uint32 automode() const;
  void set_automode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 vcuDriveMode = 4;
  void clear_vcudrivemode();
  ::PROTOBUF_NAMESPACE_ID::uint32 vcudrivemode() const;
  void set_vcudrivemode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 vehicleStatus = 5;
  void clear_vehiclestatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 vehiclestatus() const;
  void set_vehiclestatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double realSpeed = 6;
  void clear_realspeed();
  double realspeed() const;
  void set_realspeed(double value);

  // uint32 driverGear = 7;
  void clear_drivergear();
  ::PROTOBUF_NAMESPACE_ID::uint32 drivergear() const;
  void set_drivergear(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 vcuGear = 8;
  void clear_vcugear();
  ::PROTOBUF_NAMESPACE_ID::uint32 vcugear() const;
  void set_vcugear(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double steeringWheelAngle = 9;
  void clear_steeringwheelangle();
  double steeringwheelangle() const;
  void set_steeringwheelangle(double value);

  // double steeringWheelTorque = 10;
  void clear_steeringwheeltorque();
  double steeringwheeltorque() const;
  void set_steeringwheeltorque(double value);

  // uint32 shibaoSteeringWheelWorkMode = 11;
  void clear_shibaosteeringwheelworkmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 shibaosteeringwheelworkmode() const;
  void set_shibaosteeringwheelworkmode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 operationStateX = 12;
  void clear_operationstatex();
  ::PROTOBUF_NAMESPACE_ID::uint32 operationstatex() const;
  void set_operationstatex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 epbStatus = 13;
  void clear_epbstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 epbstatus() const;
  void set_epbstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 pLightStatus = 14;
  void clear_plightstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 plightstatus() const;
  void set_plightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double realThrottlePedalOpening = 16;
  void clear_realthrottlepedalopening();
  double realthrottlepedalopening() const;
  void set_realthrottlepedalopening(double value);

  // double vcuThrottlePedalOpening = 17;
  void clear_vcuthrottlepedalopening();
  double vcuthrottlepedalopening() const;
  void set_vcuthrottlepedalopening(double value);

  // uint32 brakeStatus = 15;
  void clear_brakestatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 brakestatus() const;
  void set_brakestatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 autoQuitReason = 19;
  void clear_autoquitreason();
  ::PROTOBUF_NAMESPACE_ID::uint32 autoquitreason() const;
  void set_autoquitreason(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double breakPedalOpening = 18;
  void clear_breakpedalopening();
  double breakpedalopening() const;
  void set_breakpedalopening(double value);

  // uint32 emergencyStopStatus = 20;
  void clear_emergencystopstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 emergencystopstatus() const;
  void set_emergencystopstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 emergencyStopReason = 21;
  void clear_emergencystopreason();
  ::PROTOBUF_NAMESPACE_ID::uint32 emergencystopreason() const;
  void set_emergencystopreason(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 autoButton = 22;
  void clear_autobutton();
  ::PROTOBUF_NAMESPACE_ID::uint32 autobutton() const;
  void set_autobutton(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 autoHoldStatus = 23;
  void clear_autoholdstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 autoholdstatus() const;
  void set_autoholdstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IBUS.VehicleInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::IBUS::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 currentcontrolid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 automode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vcudrivemode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vehiclestatus_;
  double realspeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drivergear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vcugear_;
  double steeringwheelangle_;
  double steeringwheeltorque_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shibaosteeringwheelworkmode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operationstatex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epbstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 plightstatus_;
  double realthrottlepedalopening_;
  double vcuthrottlepedalopening_;
  ::PROTOBUF_NAMESPACE_ID::uint32 brakestatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 autoquitreason_;
  double breakpedalopening_;
  ::PROTOBUF_NAMESPACE_ID::uint32 emergencystopstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 emergencystopreason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 autobutton_;
  ::PROTOBUF_NAMESPACE_ID::uint32 autoholdstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleInfo

// .IBUS.Header header = 1;
inline bool VehicleInfo::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::IBUS::Header& VehicleInfo::header() const {
  const ::IBUS::Header* p = header_;
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Header*>(
      &::IBUS::_Header_default_instance_);
}
inline ::IBUS::Header* VehicleInfo::release_header() {
  // @@protoc_insertion_point(field_release:IBUS.VehicleInfo.header)
  
  ::IBUS::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::IBUS::Header* VehicleInfo::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.VehicleInfo.header)
  return header_;
}
inline void VehicleInfo::set_allocated_header(::IBUS::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:IBUS.VehicleInfo.header)
}

// uint32 currentControlId = 2;
inline void VehicleInfo::clear_currentcontrolid() {
  currentcontrolid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::currentcontrolid() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.currentControlId)
  return currentcontrolid_;
}
inline void VehicleInfo::set_currentcontrolid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  currentcontrolid_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.currentControlId)
}

// uint32 autoMode = 3;
inline void VehicleInfo::clear_automode() {
  automode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::automode() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.autoMode)
  return automode_;
}
inline void VehicleInfo::set_automode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  automode_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.autoMode)
}

// uint32 vcuDriveMode = 4;
inline void VehicleInfo::clear_vcudrivemode() {
  vcudrivemode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::vcudrivemode() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.vcuDriveMode)
  return vcudrivemode_;
}
inline void VehicleInfo::set_vcudrivemode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vcudrivemode_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.vcuDriveMode)
}

// uint32 vehicleStatus = 5;
inline void VehicleInfo::clear_vehiclestatus() {
  vehiclestatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::vehiclestatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.vehicleStatus)
  return vehiclestatus_;
}
inline void VehicleInfo::set_vehiclestatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vehiclestatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.vehicleStatus)
}

// double realSpeed = 6;
inline void VehicleInfo::clear_realspeed() {
  realspeed_ = 0;
}
inline double VehicleInfo::realspeed() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.realSpeed)
  return realspeed_;
}
inline void VehicleInfo::set_realspeed(double value) {
  
  realspeed_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.realSpeed)
}

// uint32 driverGear = 7;
inline void VehicleInfo::clear_drivergear() {
  drivergear_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::drivergear() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.driverGear)
  return drivergear_;
}
inline void VehicleInfo::set_drivergear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  drivergear_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.driverGear)
}

// uint32 vcuGear = 8;
inline void VehicleInfo::clear_vcugear() {
  vcugear_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::vcugear() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.vcuGear)
  return vcugear_;
}
inline void VehicleInfo::set_vcugear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vcugear_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.vcuGear)
}

// double steeringWheelAngle = 9;
inline void VehicleInfo::clear_steeringwheelangle() {
  steeringwheelangle_ = 0;
}
inline double VehicleInfo::steeringwheelangle() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.steeringWheelAngle)
  return steeringwheelangle_;
}
inline void VehicleInfo::set_steeringwheelangle(double value) {
  
  steeringwheelangle_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.steeringWheelAngle)
}

// double steeringWheelTorque = 10;
inline void VehicleInfo::clear_steeringwheeltorque() {
  steeringwheeltorque_ = 0;
}
inline double VehicleInfo::steeringwheeltorque() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.steeringWheelTorque)
  return steeringwheeltorque_;
}
inline void VehicleInfo::set_steeringwheeltorque(double value) {
  
  steeringwheeltorque_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.steeringWheelTorque)
}

// uint32 shibaoSteeringWheelWorkMode = 11;
inline void VehicleInfo::clear_shibaosteeringwheelworkmode() {
  shibaosteeringwheelworkmode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::shibaosteeringwheelworkmode() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.shibaoSteeringWheelWorkMode)
  return shibaosteeringwheelworkmode_;
}
inline void VehicleInfo::set_shibaosteeringwheelworkmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shibaosteeringwheelworkmode_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.shibaoSteeringWheelWorkMode)
}

// uint32 operationStateX = 12;
inline void VehicleInfo::clear_operationstatex() {
  operationstatex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::operationstatex() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.operationStateX)
  return operationstatex_;
}
inline void VehicleInfo::set_operationstatex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  operationstatex_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.operationStateX)
}

// uint32 epbStatus = 13;
inline void VehicleInfo::clear_epbstatus() {
  epbstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::epbstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.epbStatus)
  return epbstatus_;
}
inline void VehicleInfo::set_epbstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epbstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.epbStatus)
}

// uint32 pLightStatus = 14;
inline void VehicleInfo::clear_plightstatus() {
  plightstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::plightstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.pLightStatus)
  return plightstatus_;
}
inline void VehicleInfo::set_plightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  plightstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.pLightStatus)
}

// uint32 brakeStatus = 15;
inline void VehicleInfo::clear_brakestatus() {
  brakestatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::brakestatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.brakeStatus)
  return brakestatus_;
}
inline void VehicleInfo::set_brakestatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  brakestatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.brakeStatus)
}

// double realThrottlePedalOpening = 16;
inline void VehicleInfo::clear_realthrottlepedalopening() {
  realthrottlepedalopening_ = 0;
}
inline double VehicleInfo::realthrottlepedalopening() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.realThrottlePedalOpening)
  return realthrottlepedalopening_;
}
inline void VehicleInfo::set_realthrottlepedalopening(double value) {
  
  realthrottlepedalopening_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.realThrottlePedalOpening)
}

// double vcuThrottlePedalOpening = 17;
inline void VehicleInfo::clear_vcuthrottlepedalopening() {
  vcuthrottlepedalopening_ = 0;
}
inline double VehicleInfo::vcuthrottlepedalopening() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.vcuThrottlePedalOpening)
  return vcuthrottlepedalopening_;
}
inline void VehicleInfo::set_vcuthrottlepedalopening(double value) {
  
  vcuthrottlepedalopening_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.vcuThrottlePedalOpening)
}

// double breakPedalOpening = 18;
inline void VehicleInfo::clear_breakpedalopening() {
  breakpedalopening_ = 0;
}
inline double VehicleInfo::breakpedalopening() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.breakPedalOpening)
  return breakpedalopening_;
}
inline void VehicleInfo::set_breakpedalopening(double value) {
  
  breakpedalopening_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.breakPedalOpening)
}

// uint32 autoQuitReason = 19;
inline void VehicleInfo::clear_autoquitreason() {
  autoquitreason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::autoquitreason() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.autoQuitReason)
  return autoquitreason_;
}
inline void VehicleInfo::set_autoquitreason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  autoquitreason_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.autoQuitReason)
}

// uint32 emergencyStopStatus = 20;
inline void VehicleInfo::clear_emergencystopstatus() {
  emergencystopstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::emergencystopstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.emergencyStopStatus)
  return emergencystopstatus_;
}
inline void VehicleInfo::set_emergencystopstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  emergencystopstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.emergencyStopStatus)
}

// uint32 emergencyStopReason = 21;
inline void VehicleInfo::clear_emergencystopreason() {
  emergencystopreason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::emergencystopreason() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.emergencyStopReason)
  return emergencystopreason_;
}
inline void VehicleInfo::set_emergencystopreason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  emergencystopreason_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.emergencyStopReason)
}

// uint32 autoButton = 22;
inline void VehicleInfo::clear_autobutton() {
  autobutton_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::autobutton() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.autoButton)
  return autobutton_;
}
inline void VehicleInfo::set_autobutton(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  autobutton_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.autoButton)
}

// uint32 autoHoldStatus = 23;
inline void VehicleInfo::clear_autoholdstatus() {
  autoholdstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleInfo::autoholdstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleInfo.autoHoldStatus)
  return autoholdstatus_;
}
inline void VehicleInfo::set_autoholdstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  autoholdstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleInfo.autoHoldStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace IBUS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_5finfo_2eproto
