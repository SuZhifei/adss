// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace IBUS {
class Acceleration;
class AccelerationDefaultTypeInternal;
extern AccelerationDefaultTypeInternal _Acceleration_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class TimeStamp;
class TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
class Velocity;
class VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
class VersionID;
class VersionIDDefaultTypeInternal;
extern VersionIDDefaultTypeInternal _VersionID_default_instance_;
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> ::IBUS::Acceleration* Arena::CreateMaybeMessage<::IBUS::Acceleration>(Arena*);
template<> ::IBUS::Header* Arena::CreateMaybeMessage<::IBUS::Header>(Arena*);
template<> ::IBUS::Point2D* Arena::CreateMaybeMessage<::IBUS::Point2D>(Arena*);
template<> ::IBUS::Point3D* Arena::CreateMaybeMessage<::IBUS::Point3D>(Arena*);
template<> ::IBUS::Pose* Arena::CreateMaybeMessage<::IBUS::Pose>(Arena*);
template<> ::IBUS::Quaternion* Arena::CreateMaybeMessage<::IBUS::Quaternion>(Arena*);
template<> ::IBUS::TimeStamp* Arena::CreateMaybeMessage<::IBUS::TimeStamp>(Arena*);
template<> ::IBUS::Velocity* Arena::CreateMaybeMessage<::IBUS::Velocity>(Arena*);
template<> ::IBUS::VersionID* Arena::CreateMaybeMessage<::IBUS::VersionID>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IBUS {

enum FRAMETYPE : int {
  NA = 0,
  VCS = 1,
  WGS84 = 2,
  UTM = 3,
  CCS = 4,
  FRAMETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FRAMETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FRAMETYPE_IsValid(int value);
constexpr FRAMETYPE FRAMETYPE_MIN = NA;
constexpr FRAMETYPE FRAMETYPE_MAX = CCS;
constexpr int FRAMETYPE_ARRAYSIZE = FRAMETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FRAMETYPE_descriptor();
template<typename T>
inline const std::string& FRAMETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FRAMETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FRAMETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FRAMETYPE_descriptor(), enum_t_value);
}
inline bool FRAMETYPE_Parse(
    const std::string& name, FRAMETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FRAMETYPE>(
    FRAMETYPE_descriptor(), name, value);
}
enum STATUS : int {
  GOOD = 0,
  MED = 1,
  FAILURE = 2,
  STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool STATUS_IsValid(int value);
constexpr STATUS STATUS_MIN = GOOD;
constexpr STATUS STATUS_MAX = FAILURE;
constexpr int STATUS_ARRAYSIZE = STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STATUS_descriptor();
template<typename T>
inline const std::string& STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STATUS_descriptor(), enum_t_value);
}
inline bool STATUS_Parse(
    const std::string& name, STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STATUS>(
    STATUS_descriptor(), name, value);
}
// ===================================================================

class VersionID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.VersionID) */ {
 public:
  VersionID();
  virtual ~VersionID();

  VersionID(const VersionID& from);
  VersionID(VersionID&& from) noexcept
    : VersionID() {
    *this = ::std::move(from);
  }

  inline VersionID& operator=(const VersionID& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionID& operator=(VersionID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionID* internal_default_instance() {
    return reinterpret_cast<const VersionID*>(
               &_VersionID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionID& a, VersionID& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionID* New() const final {
    return CreateMaybeMessage<VersionID>(nullptr);
  }

  VersionID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionID& from);
  void MergeFrom(const VersionID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.VersionID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // uint32 major = 1;
  void clear_major();
  ::PROTOBUF_NAMESPACE_ID::uint32 major() const;
  void set_major(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 minor = 2;
  void clear_minor();
  ::PROTOBUF_NAMESPACE_ID::uint32 minor() const;
  void set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 patch = 3;
  void clear_patch();
  ::PROTOBUF_NAMESPACE_ID::uint32 patch() const;
  void set_patch(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IBUS.VersionID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 patch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TimeStamp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.TimeStamp) */ {
 public:
  TimeStamp();
  virtual ~TimeStamp();

  TimeStamp(const TimeStamp& from);
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStamp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeStamp* New() const final {
    return CreateMaybeMessage<TimeStamp>(nullptr);
  }

  TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeStamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeStamp& from);
  void MergeFrom(const TimeStamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.TimeStamp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampSFieldNumber = 1,
    kTimeStampNsFieldNumber = 2,
  };
  // uint64 timeStampS = 1;
  void clear_timestamps();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamps() const;
  void set_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 timeStampNs = 2;
  void clear_timestampns();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestampns() const;
  void set_timestampns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:IBUS.TimeStamp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamps_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestampns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 2,
    kTimeStampFieldNumber = 4,
    kModuleIDFieldNumber = 1,
    kSequenceNumFieldNumber = 3,
    kFrameFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // .IBUS.VersionID vid = 2;
  bool has_vid() const;
  void clear_vid();
  const ::IBUS::VersionID& vid() const;
  ::IBUS::VersionID* release_vid();
  ::IBUS::VersionID* mutable_vid();
  void set_allocated_vid(::IBUS::VersionID* vid);

  // .IBUS.TimeStamp timeStamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  const ::IBUS::TimeStamp& timestamp() const;
  ::IBUS::TimeStamp* release_timestamp();
  ::IBUS::TimeStamp* mutable_timestamp();
  void set_allocated_timestamp(::IBUS::TimeStamp* timestamp);

  // uint32 ModuleID = 1;
  void clear_moduleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 moduleid() const;
  void set_moduleid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 sequenceNum = 3;
  void clear_sequencenum();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequencenum() const;
  void set_sequencenum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .IBUS.FRAMETYPE Frame = 5;
  void clear_frame();
  ::IBUS::FRAMETYPE frame() const;
  void set_frame(::IBUS::FRAMETYPE value);

  // .IBUS.STATUS Status = 6;
  void clear_status();
  ::IBUS::STATUS status() const;
  void set_status(::IBUS::STATUS value);

  // @@protoc_insertion_point(class_scope:IBUS.Header)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::IBUS::VersionID* vid_;
  ::IBUS::TimeStamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 moduleid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequencenum_;
  int frame_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Point2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.Point2D) */ {
 public:
  Point2D();
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.Point2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:IBUS.Point2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Point3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.Point3D) */ {
 public:
  Point3D();
  virtual ~Point3D();

  Point3D(const Point3D& from);
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3D* New() const final {
    return CreateMaybeMessage<Point3D>(nullptr);
  }

  Point3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.Point3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:IBUS.Point3D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQxFieldNumber = 1,
    kQyFieldNumber = 2,
    kQzFieldNumber = 3,
    kQwFieldNumber = 4,
  };
  // double qx = 1;
  void clear_qx();
  double qx() const;
  void set_qx(double value);

  // double qy = 2;
  void clear_qy();
  double qy() const;
  void set_qy(double value);

  // double qz = 3;
  void clear_qz();
  double qz() const;
  void set_qz(double value);

  // double qw = 4;
  void clear_qw();
  double qw() const;
  void set_qw(double value);

  // @@protoc_insertion_point(class_scope:IBUS.Quaternion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double qx_;
  double qy_;
  double qz_;
  double qw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Pose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.Pose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 3,
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // repeated double Covariance = 3;
  int covariance_size() const;
  void clear_covariance();
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .IBUS.Point3D Position = 1;
  bool has_position() const;
  void clear_position();
  const ::IBUS::Point3D& position() const;
  ::IBUS::Point3D* release_position();
  ::IBUS::Point3D* mutable_position();
  void set_allocated_position(::IBUS::Point3D* position);

  // .IBUS.Quaternion Orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  const ::IBUS::Quaternion& orientation() const;
  ::IBUS::Quaternion* release_orientation();
  ::IBUS::Quaternion* mutable_orientation();
  void set_allocated_orientation(::IBUS::Quaternion* orientation);

  // @@protoc_insertion_point(class_scope:IBUS.Pose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::IBUS::Point3D* position_;
  ::IBUS::Quaternion* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Velocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.Velocity) */ {
 public:
  Velocity();
  virtual ~Velocity();

  Velocity(const Velocity& from);
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Velocity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return CreateMaybeMessage<Velocity>(nullptr);
  }

  Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.Velocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 3,
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // repeated double Covariance = 3;
  int covariance_size() const;
  void clear_covariance();
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .IBUS.Point3D Linear = 1;
  bool has_linear() const;
  void clear_linear();
  const ::IBUS::Point3D& linear() const;
  ::IBUS::Point3D* release_linear();
  ::IBUS::Point3D* mutable_linear();
  void set_allocated_linear(::IBUS::Point3D* linear);

  // .IBUS.Point3D Angular = 2;
  bool has_angular() const;
  void clear_angular();
  const ::IBUS::Point3D& angular() const;
  ::IBUS::Point3D* release_angular();
  ::IBUS::Point3D* mutable_angular();
  void set_allocated_angular(::IBUS::Point3D* angular);

  // @@protoc_insertion_point(class_scope:IBUS.Velocity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::IBUS::Point3D* linear_;
  ::IBUS::Point3D* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Acceleration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.Acceleration) */ {
 public:
  Acceleration();
  virtual ~Acceleration();

  Acceleration(const Acceleration& from);
  Acceleration(Acceleration&& from) noexcept
    : Acceleration() {
    *this = ::std::move(from);
  }

  inline Acceleration& operator=(const Acceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acceleration& operator=(Acceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acceleration* internal_default_instance() {
    return reinterpret_cast<const Acceleration*>(
               &_Acceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Acceleration& a, Acceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Acceleration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acceleration* New() const final {
    return CreateMaybeMessage<Acceleration>(nullptr);
  }

  Acceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acceleration& from);
  void MergeFrom(const Acceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.Acceleration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 3,
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // repeated double Covariance = 3;
  int covariance_size() const;
  void clear_covariance();
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .IBUS.Point3D Linear = 1;
  bool has_linear() const;
  void clear_linear();
  const ::IBUS::Point3D& linear() const;
  ::IBUS::Point3D* release_linear();
  ::IBUS::Point3D* mutable_linear();
  void set_allocated_linear(::IBUS::Point3D* linear);

  // .IBUS.Point3D Angular = 2;
  bool has_angular() const;
  void clear_angular();
  const ::IBUS::Point3D& angular() const;
  ::IBUS::Point3D* release_angular();
  ::IBUS::Point3D* mutable_angular();
  void set_allocated_angular(::IBUS::Point3D* angular);

  // @@protoc_insertion_point(class_scope:IBUS.Acceleration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::IBUS::Point3D* linear_;
  ::IBUS::Point3D* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionID

// uint32 major = 1;
inline void VersionID::clear_major() {
  major_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionID::major() const {
  // @@protoc_insertion_point(field_get:IBUS.VersionID.major)
  return major_;
}
inline void VersionID::set_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VersionID.major)
}

// uint32 minor = 2;
inline void VersionID::clear_minor() {
  minor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionID::minor() const {
  // @@protoc_insertion_point(field_get:IBUS.VersionID.minor)
  return minor_;
}
inline void VersionID::set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VersionID.minor)
}

// uint32 patch = 3;
inline void VersionID::clear_patch() {
  patch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionID::patch() const {
  // @@protoc_insertion_point(field_get:IBUS.VersionID.patch)
  return patch_;
}
inline void VersionID::set_patch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  patch_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VersionID.patch)
}

// -------------------------------------------------------------------

// TimeStamp

// uint64 timeStampS = 1;
inline void TimeStamp::clear_timestamps() {
  timestamps_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimeStamp::timestamps() const {
  // @@protoc_insertion_point(field_get:IBUS.TimeStamp.timeStampS)
  return timestamps_;
}
inline void TimeStamp::set_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamps_ = value;
  // @@protoc_insertion_point(field_set:IBUS.TimeStamp.timeStampS)
}

// uint64 timeStampNs = 2;
inline void TimeStamp::clear_timestampns() {
  timestampns_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimeStamp::timestampns() const {
  // @@protoc_insertion_point(field_get:IBUS.TimeStamp.timeStampNs)
  return timestampns_;
}
inline void TimeStamp::set_timestampns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestampns_ = value;
  // @@protoc_insertion_point(field_set:IBUS.TimeStamp.timeStampNs)
}

// -------------------------------------------------------------------

// Header

// uint32 ModuleID = 1;
inline void Header::clear_moduleid() {
  moduleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::moduleid() const {
  // @@protoc_insertion_point(field_get:IBUS.Header.ModuleID)
  return moduleid_;
}
inline void Header::set_moduleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  moduleid_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Header.ModuleID)
}

// .IBUS.VersionID vid = 2;
inline bool Header::has_vid() const {
  return this != internal_default_instance() && vid_ != nullptr;
}
inline void Header::clear_vid() {
  if (GetArenaNoVirtual() == nullptr && vid_ != nullptr) {
    delete vid_;
  }
  vid_ = nullptr;
}
inline const ::IBUS::VersionID& Header::vid() const {
  const ::IBUS::VersionID* p = vid_;
  // @@protoc_insertion_point(field_get:IBUS.Header.vid)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::VersionID*>(
      &::IBUS::_VersionID_default_instance_);
}
inline ::IBUS::VersionID* Header::release_vid() {
  // @@protoc_insertion_point(field_release:IBUS.Header.vid)
  
  ::IBUS::VersionID* temp = vid_;
  vid_ = nullptr;
  return temp;
}
inline ::IBUS::VersionID* Header::mutable_vid() {
  
  if (vid_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::VersionID>(GetArenaNoVirtual());
    vid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.Header.vid)
  return vid_;
}
inline void Header::set_allocated_vid(::IBUS::VersionID* vid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vid_;
  }
  if (vid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vid, submessage_arena);
    }
    
  } else {
    
  }
  vid_ = vid;
  // @@protoc_insertion_point(field_set_allocated:IBUS.Header.vid)
}

// uint32 sequenceNum = 3;
inline void Header::clear_sequencenum() {
  sequencenum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sequencenum() const {
  // @@protoc_insertion_point(field_get:IBUS.Header.sequenceNum)
  return sequencenum_;
}
inline void Header::set_sequencenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequencenum_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Header.sequenceNum)
}

// .IBUS.TimeStamp timeStamp = 4;
inline bool Header::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline void Header::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
inline const ::IBUS::TimeStamp& Header::timestamp() const {
  const ::IBUS::TimeStamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:IBUS.Header.timeStamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::TimeStamp*>(
      &::IBUS::_TimeStamp_default_instance_);
}
inline ::IBUS::TimeStamp* Header::release_timestamp() {
  // @@protoc_insertion_point(field_release:IBUS.Header.timeStamp)
  
  ::IBUS::TimeStamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::IBUS::TimeStamp* Header::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::TimeStamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.Header.timeStamp)
  return timestamp_;
}
inline void Header::set_allocated_timestamp(::IBUS::TimeStamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timestamp_;
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:IBUS.Header.timeStamp)
}

// .IBUS.FRAMETYPE Frame = 5;
inline void Header::clear_frame() {
  frame_ = 0;
}
inline ::IBUS::FRAMETYPE Header::frame() const {
  // @@protoc_insertion_point(field_get:IBUS.Header.Frame)
  return static_cast< ::IBUS::FRAMETYPE >(frame_);
}
inline void Header::set_frame(::IBUS::FRAMETYPE value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Header.Frame)
}

// .IBUS.STATUS Status = 6;
inline void Header::clear_status() {
  status_ = 0;
}
inline ::IBUS::STATUS Header::status() const {
  // @@protoc_insertion_point(field_get:IBUS.Header.Status)
  return static_cast< ::IBUS::STATUS >(status_);
}
inline void Header::set_status(::IBUS::STATUS value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Header.Status)
}

// -------------------------------------------------------------------

// Point2D

// double x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:IBUS.Point2D.x)
  return x_;
}
inline void Point2D::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Point2D.x)
}

// double y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:IBUS.Point2D.y)
  return y_;
}
inline void Point2D::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Point2D.y)
}

// -------------------------------------------------------------------

// Point3D

// double x = 1;
inline void Point3D::clear_x() {
  x_ = 0;
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:IBUS.Point3D.x)
  return x_;
}
inline void Point3D::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Point3D.x)
}

// double y = 2;
inline void Point3D::clear_y() {
  y_ = 0;
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:IBUS.Point3D.y)
  return y_;
}
inline void Point3D::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Point3D.y)
}

// double z = 3;
inline void Point3D::clear_z() {
  z_ = 0;
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:IBUS.Point3D.z)
  return z_;
}
inline void Point3D::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Point3D.z)
}

// -------------------------------------------------------------------

// Quaternion

// double qx = 1;
inline void Quaternion::clear_qx() {
  qx_ = 0;
}
inline double Quaternion::qx() const {
  // @@protoc_insertion_point(field_get:IBUS.Quaternion.qx)
  return qx_;
}
inline void Quaternion::set_qx(double value) {
  
  qx_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Quaternion.qx)
}

// double qy = 2;
inline void Quaternion::clear_qy() {
  qy_ = 0;
}
inline double Quaternion::qy() const {
  // @@protoc_insertion_point(field_get:IBUS.Quaternion.qy)
  return qy_;
}
inline void Quaternion::set_qy(double value) {
  
  qy_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Quaternion.qy)
}

// double qz = 3;
inline void Quaternion::clear_qz() {
  qz_ = 0;
}
inline double Quaternion::qz() const {
  // @@protoc_insertion_point(field_get:IBUS.Quaternion.qz)
  return qz_;
}
inline void Quaternion::set_qz(double value) {
  
  qz_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Quaternion.qz)
}

// double qw = 4;
inline void Quaternion::clear_qw() {
  qw_ = 0;
}
inline double Quaternion::qw() const {
  // @@protoc_insertion_point(field_get:IBUS.Quaternion.qw)
  return qw_;
}
inline void Quaternion::set_qw(double value) {
  
  qw_ = value;
  // @@protoc_insertion_point(field_set:IBUS.Quaternion.qw)
}

// -------------------------------------------------------------------

// Pose

// .IBUS.Point3D Position = 1;
inline bool Pose::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void Pose::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::IBUS::Point3D& Pose::position() const {
  const ::IBUS::Point3D* p = position_;
  // @@protoc_insertion_point(field_get:IBUS.Pose.Position)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Point3D*>(
      &::IBUS::_Point3D_default_instance_);
}
inline ::IBUS::Point3D* Pose::release_position() {
  // @@protoc_insertion_point(field_release:IBUS.Pose.Position)
  
  ::IBUS::Point3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::IBUS::Point3D* Pose::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Point3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.Pose.Position)
  return position_;
}
inline void Pose::set_allocated_position(::IBUS::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:IBUS.Pose.Position)
}

// .IBUS.Quaternion Orientation = 2;
inline bool Pose::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void Pose::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::IBUS::Quaternion& Pose::orientation() const {
  const ::IBUS::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:IBUS.Pose.Orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Quaternion*>(
      &::IBUS::_Quaternion_default_instance_);
}
inline ::IBUS::Quaternion* Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:IBUS.Pose.Orientation)
  
  ::IBUS::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::IBUS::Quaternion* Pose::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.Pose.Orientation)
  return orientation_;
}
inline void Pose::set_allocated_orientation(::IBUS::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:IBUS.Pose.Orientation)
}

// repeated double Covariance = 3;
inline int Pose::covariance_size() const {
  return covariance_.size();
}
inline void Pose::clear_covariance() {
  covariance_.Clear();
}
inline double Pose::covariance(int index) const {
  // @@protoc_insertion_point(field_get:IBUS.Pose.Covariance)
  return covariance_.Get(index);
}
inline void Pose::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:IBUS.Pose.Covariance)
}
inline void Pose::add_covariance(double value) {
  covariance_.Add(value);
  // @@protoc_insertion_point(field_add:IBUS.Pose.Covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pose::covariance() const {
  // @@protoc_insertion_point(field_list:IBUS.Pose.Covariance)
  return covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pose::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:IBUS.Pose.Covariance)
  return &covariance_;
}

// -------------------------------------------------------------------

// Velocity

// .IBUS.Point3D Linear = 1;
inline bool Velocity::has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline void Velocity::clear_linear() {
  if (GetArenaNoVirtual() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::IBUS::Point3D& Velocity::linear() const {
  const ::IBUS::Point3D* p = linear_;
  // @@protoc_insertion_point(field_get:IBUS.Velocity.Linear)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Point3D*>(
      &::IBUS::_Point3D_default_instance_);
}
inline ::IBUS::Point3D* Velocity::release_linear() {
  // @@protoc_insertion_point(field_release:IBUS.Velocity.Linear)
  
  ::IBUS::Point3D* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::IBUS::Point3D* Velocity::mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Point3D>(GetArenaNoVirtual());
    linear_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.Velocity.Linear)
  return linear_;
}
inline void Velocity::set_allocated_linear(::IBUS::Point3D* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:IBUS.Velocity.Linear)
}

// .IBUS.Point3D Angular = 2;
inline bool Velocity::has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline void Velocity::clear_angular() {
  if (GetArenaNoVirtual() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::IBUS::Point3D& Velocity::angular() const {
  const ::IBUS::Point3D* p = angular_;
  // @@protoc_insertion_point(field_get:IBUS.Velocity.Angular)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Point3D*>(
      &::IBUS::_Point3D_default_instance_);
}
inline ::IBUS::Point3D* Velocity::release_angular() {
  // @@protoc_insertion_point(field_release:IBUS.Velocity.Angular)
  
  ::IBUS::Point3D* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::IBUS::Point3D* Velocity::mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Point3D>(GetArenaNoVirtual());
    angular_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.Velocity.Angular)
  return angular_;
}
inline void Velocity::set_allocated_angular(::IBUS::Point3D* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:IBUS.Velocity.Angular)
}

// repeated double Covariance = 3;
inline int Velocity::covariance_size() const {
  return covariance_.size();
}
inline void Velocity::clear_covariance() {
  covariance_.Clear();
}
inline double Velocity::covariance(int index) const {
  // @@protoc_insertion_point(field_get:IBUS.Velocity.Covariance)
  return covariance_.Get(index);
}
inline void Velocity::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:IBUS.Velocity.Covariance)
}
inline void Velocity::add_covariance(double value) {
  covariance_.Add(value);
  // @@protoc_insertion_point(field_add:IBUS.Velocity.Covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Velocity::covariance() const {
  // @@protoc_insertion_point(field_list:IBUS.Velocity.Covariance)
  return covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Velocity::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:IBUS.Velocity.Covariance)
  return &covariance_;
}

// -------------------------------------------------------------------

// Acceleration

// .IBUS.Point3D Linear = 1;
inline bool Acceleration::has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline void Acceleration::clear_linear() {
  if (GetArenaNoVirtual() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::IBUS::Point3D& Acceleration::linear() const {
  const ::IBUS::Point3D* p = linear_;
  // @@protoc_insertion_point(field_get:IBUS.Acceleration.Linear)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Point3D*>(
      &::IBUS::_Point3D_default_instance_);
}
inline ::IBUS::Point3D* Acceleration::release_linear() {
  // @@protoc_insertion_point(field_release:IBUS.Acceleration.Linear)
  
  ::IBUS::Point3D* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::IBUS::Point3D* Acceleration::mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Point3D>(GetArenaNoVirtual());
    linear_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.Acceleration.Linear)
  return linear_;
}
inline void Acceleration::set_allocated_linear(::IBUS::Point3D* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:IBUS.Acceleration.Linear)
}

// .IBUS.Point3D Angular = 2;
inline bool Acceleration::has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline void Acceleration::clear_angular() {
  if (GetArenaNoVirtual() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::IBUS::Point3D& Acceleration::angular() const {
  const ::IBUS::Point3D* p = angular_;
  // @@protoc_insertion_point(field_get:IBUS.Acceleration.Angular)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Point3D*>(
      &::IBUS::_Point3D_default_instance_);
}
inline ::IBUS::Point3D* Acceleration::release_angular() {
  // @@protoc_insertion_point(field_release:IBUS.Acceleration.Angular)
  
  ::IBUS::Point3D* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::IBUS::Point3D* Acceleration::mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Point3D>(GetArenaNoVirtual());
    angular_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.Acceleration.Angular)
  return angular_;
}
inline void Acceleration::set_allocated_angular(::IBUS::Point3D* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:IBUS.Acceleration.Angular)
}

// repeated double Covariance = 3;
inline int Acceleration::covariance_size() const {
  return covariance_.size();
}
inline void Acceleration::clear_covariance() {
  covariance_.Clear();
}
inline double Acceleration::covariance(int index) const {
  // @@protoc_insertion_point(field_get:IBUS.Acceleration.Covariance)
  return covariance_.Get(index);
}
inline void Acceleration::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:IBUS.Acceleration.Covariance)
}
inline void Acceleration::add_covariance(double value) {
  covariance_.Add(value);
  // @@protoc_insertion_point(field_add:IBUS.Acceleration.Covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Acceleration::covariance() const {
  // @@protoc_insertion_point(field_list:IBUS.Acceleration.Covariance)
  return covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Acceleration::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:IBUS.Acceleration.Covariance)
  return &covariance_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IBUS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::IBUS::FRAMETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IBUS::FRAMETYPE>() {
  return ::IBUS::FRAMETYPE_descriptor();
}
template <> struct is_proto_enum< ::IBUS::STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IBUS::STATUS>() {
  return ::IBUS::STATUS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
