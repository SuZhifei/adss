// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_auxiliary_info.proto

#include "vehicle_auxiliary_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Header_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fauxiliary_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TyreInfo_vehicle_5fauxiliary_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fauxiliary_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TyreInfoList_vehicle_5fauxiliary_5finfo_2eproto;
namespace IBUS {
class TyreInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TyreInfo> _instance;
} _TyreInfo_default_instance_;
class TyreInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TyreInfoList> _instance;
} _TyreInfoList_default_instance_;
class VehicleAuxiliaryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleAuxiliaryInfo> _instance;
} _VehicleAuxiliaryInfo_default_instance_;
}  // namespace IBUS
static void InitDefaultsscc_info_TyreInfo_vehicle_5fauxiliary_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_TyreInfo_default_instance_;
    new (ptr) ::IBUS::TyreInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::TyreInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TyreInfo_vehicle_5fauxiliary_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TyreInfo_vehicle_5fauxiliary_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_TyreInfoList_vehicle_5fauxiliary_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_TyreInfoList_default_instance_;
    new (ptr) ::IBUS::TyreInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::TyreInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TyreInfoList_vehicle_5fauxiliary_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TyreInfoList_vehicle_5fauxiliary_5finfo_2eproto}, {
      &scc_info_TyreInfo_vehicle_5fauxiliary_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_VehicleAuxiliaryInfo_vehicle_5fauxiliary_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_VehicleAuxiliaryInfo_default_instance_;
    new (ptr) ::IBUS::VehicleAuxiliaryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::VehicleAuxiliaryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleAuxiliaryInfo_vehicle_5fauxiliary_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VehicleAuxiliaryInfo_vehicle_5fauxiliary_5finfo_2eproto}, {
      &scc_info_Header_common_2eproto.base,
      &scc_info_TyreInfoList_vehicle_5fauxiliary_5finfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5fauxiliary_5finfo_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vehicle_5fauxiliary_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fauxiliary_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5fauxiliary_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::TyreInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::TyreInfo, tyrelocation_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TyreInfo, tyrepressure_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TyreInfo, tyretemperature_),
  PROTOBUF_FIELD_OFFSET(::IBUS::TyreInfo, tyrespeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::TyreInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::TyreInfoList, tyreinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, header_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, leftlightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, rightlightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, lowlightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, highlightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, emergencylightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, frontfoglightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, rearfoglightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, motorrotationdirection_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, hornstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, yawinvaild_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, yawrate_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, lateralacceleration_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, longitudinalacceleration_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, batterycapacity_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, airconditionerstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, smalldecisionstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, szwaterpercent_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, tyreinfolist_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, tipperhopperstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, tipperhoppererrstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, electronicparkingindication_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, feedbackcurvature_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, wheelanglevoltagesignalfeedback_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, difflockstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, cleaningsystemworkmode_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, cleaningsystemworkstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, liquidtemperature_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, liquidlevelstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, cleaningsystemfaultlevel_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, cleaningsystemfaultcode_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, driverepbon_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, driverepboff_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, leftdoor1_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, leftdoor2_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, leftdoor3_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, leftdoor4_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, rightdoor1_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, rightdoor2_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, rightdoor3_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, rightdoor4_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, seatbeltstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, leaveseatstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, holdsteeringwheel_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, leftfrontwheelspeed_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, rightfrontwheelspeed_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, leftrearwheelspeed_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, rightrearwheelspeed_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryInfo, collisiontape_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IBUS::TyreInfo)},
  { 9, -1, sizeof(::IBUS::TyreInfoList)},
  { 15, -1, sizeof(::IBUS::VehicleAuxiliaryInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_TyreInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_TyreInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_VehicleAuxiliaryInfo_default_instance_),
};

const char descriptor_table_protodef_vehicle_5fauxiliary_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034vehicle_auxiliary_info.proto\022\004IBUS\032\014co"
  "mmon.proto\"b\n\010TyreInfo\022\024\n\014tyreLocation\030\001"
  " \001(\r\022\024\n\014tyrePressure\030\002 \001(\r\022\027\n\017tyreTemper"
  "ature\030\003 \001(\r\022\021\n\ttyreSpeed\030\004 \001(\r\"4\n\014TyreIn"
  "foList\022$\n\014tyreInfoList\030\001 \003(\0132\016.IBUS.Tyre"
  "Info\"\262\n\n\024VehicleAuxiliaryInfo\022\034\n\006header\030"
  "\001 \001(\0132\014.IBUS.Header\022\027\n\017leftLightStatus\030\002"
  " \001(\r\022\030\n\020rightLightStatus\030\003 \001(\r\022\026\n\016lowLig"
  "htStatus\030\004 \001(\r\022\027\n\017highLightStatus\030\005 \001(\r\022"
  "\034\n\024emergencyLightStatus\030\006 \001(\r\022\033\n\023frontFo"
  "gLightStatus\030\007 \001(\r\022\032\n\022rearFogLightStatus"
  "\030\010 \001(\r\022\036\n\026motorRotationDirection\030\t \001(\r\022\022"
  "\n\nhornStatus\030\n \001(\r\022\022\n\nyawInvaild\030\013 \001(\010\022\017"
  "\n\007yawRate\030\014 \001(\001\022\033\n\023lateralAcceleration\030\r"
  " \001(\001\022 \n\030longitudinalAcceleration\030\016 \001(\001\022\027"
  "\n\017batteryCapacity\030\017 \001(\r\022\034\n\024airConditione"
  "rStatus\030\020 \001(\r\022\033\n\023smallDecisionStatus\030\021 \001"
  "(\r\022\026\n\016szWaterPercent\030\022 \001(\r\022(\n\014tyreInfoLi"
  "st\030\023 \001(\0132\022.IBUS.TyreInfoList\022\032\n\022tipperHo"
  "pperStatus\030\024 \001(\r\022\035\n\025tipperHopperErrStatu"
  "s\030\025 \001(\r\022#\n\033electronicParkingIndication\030\026"
  " \001(\r\022\031\n\021feedbackCurvature\030\027 \001(\001\022\'\n\037wheel"
  "AngleVoltageSignalFeedback\030\030 \001(\001\022\026\n\016diff"
  "LockStatus\030\031 \001(\r\022\036\n\026cleaningSystemWorkMo"
  "de\030\032 \001(\r\022 \n\030cleaningSystemWorkStatus\030\033 \001"
  "(\r\022\031\n\021liquidTemperature\030\034 \001(\002\022\031\n\021liquidL"
  "evelStatus\030\035 \001(\002\022 \n\030cleaningSystemFaultL"
  "evel\030\036 \001(\r\022\037\n\027cleaningSystemFaultCode\030\037 "
  "\001(\r\022\023\n\013driverEpbOn\030  \001(\r\022\024\n\014driverEpbOff"
  "\030! \001(\r\022\021\n\tleftDoor1\030\" \001(\r\022\021\n\tleftDoor2\030#"
  " \001(\r\022\021\n\tleftDoor3\030$ \001(\r\022\021\n\tleftDoor4\030% \001"
  "(\r\022\022\n\nrightDoor1\030& \001(\r\022\022\n\nrightDoor2\030\' \001"
  "(\r\022\022\n\nrightDoor3\030( \001(\r\022\022\n\nrightDoor4\030) \001"
  "(\r\022\026\n\016seatBeltStatus\030* \001(\r\022\027\n\017leaveSeatS"
  "tatus\030+ \001(\r\022\031\n\021holdSteeringWheel\030, \001(\r\022\033"
  "\n\023leftFrontWheelSpeed\030- \001(\002\022\034\n\024rightFron"
  "tWheelSpeed\030. \001(\002\022\032\n\022leftRearWheelSpeed\030"
  "/ \001(\002\022\033\n\023rightRearWheelSpeed\0300 \001(\002\022\025\n\rco"
  "llisionTape\0301 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5fauxiliary_5finfo_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5fauxiliary_5finfo_2eproto_sccs[3] = {
  &scc_info_TyreInfo_vehicle_5fauxiliary_5finfo_2eproto.base,
  &scc_info_TyreInfoList_vehicle_5fauxiliary_5finfo_2eproto.base,
  &scc_info_VehicleAuxiliaryInfo_vehicle_5fauxiliary_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5fauxiliary_5finfo_2eproto_once;
static bool descriptor_table_vehicle_5fauxiliary_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fauxiliary_5finfo_2eproto = {
  &descriptor_table_vehicle_5fauxiliary_5finfo_2eproto_initialized, descriptor_table_protodef_vehicle_5fauxiliary_5finfo_2eproto, "vehicle_auxiliary_info.proto", 1545,
  &descriptor_table_vehicle_5fauxiliary_5finfo_2eproto_once, descriptor_table_vehicle_5fauxiliary_5finfo_2eproto_sccs, descriptor_table_vehicle_5fauxiliary_5finfo_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_vehicle_5fauxiliary_5finfo_2eproto::offsets,
  file_level_metadata_vehicle_5fauxiliary_5finfo_2eproto, 3, file_level_enum_descriptors_vehicle_5fauxiliary_5finfo_2eproto, file_level_service_descriptors_vehicle_5fauxiliary_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fauxiliary_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5fauxiliary_5finfo_2eproto), true);
namespace IBUS {

// ===================================================================

void TyreInfo::InitAsDefaultInstance() {
}
class TyreInfo::_Internal {
 public:
};

TyreInfo::TyreInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.TyreInfo)
}
TyreInfo::TyreInfo(const TyreInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tyrelocation_, &from.tyrelocation_,
    static_cast<size_t>(reinterpret_cast<char*>(&tyrespeed_) -
    reinterpret_cast<char*>(&tyrelocation_)) + sizeof(tyrespeed_));
  // @@protoc_insertion_point(copy_constructor:IBUS.TyreInfo)
}

void TyreInfo::SharedCtor() {
  ::memset(&tyrelocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tyrespeed_) -
      reinterpret_cast<char*>(&tyrelocation_)) + sizeof(tyrespeed_));
}

TyreInfo::~TyreInfo() {
  // @@protoc_insertion_point(destructor:IBUS.TyreInfo)
  SharedDtor();
}

void TyreInfo::SharedDtor() {
}

void TyreInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TyreInfo& TyreInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TyreInfo_vehicle_5fauxiliary_5finfo_2eproto.base);
  return *internal_default_instance();
}


void TyreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.TyreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tyrelocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tyrespeed_) -
      reinterpret_cast<char*>(&tyrelocation_)) + sizeof(tyrespeed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TyreInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tyreLocation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tyrelocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tyrePressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tyrepressure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tyreTemperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tyretemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tyreSpeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tyrespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TyreInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.TyreInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tyreLocation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tyrelocation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tyrePressure = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tyrepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tyreTemperature = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tyretemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tyreSpeed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tyrespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.TyreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.TyreInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TyreInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.TyreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tyreLocation = 1;
  if (this->tyrelocation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->tyrelocation(), output);
  }

  // uint32 tyrePressure = 2;
  if (this->tyrepressure() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->tyrepressure(), output);
  }

  // uint32 tyreTemperature = 3;
  if (this->tyretemperature() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->tyretemperature(), output);
  }

  // uint32 tyreSpeed = 4;
  if (this->tyrespeed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->tyrespeed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.TyreInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TyreInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.TyreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tyreLocation = 1;
  if (this->tyrelocation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->tyrelocation(), target);
  }

  // uint32 tyrePressure = 2;
  if (this->tyrepressure() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->tyrepressure(), target);
  }

  // uint32 tyreTemperature = 3;
  if (this->tyretemperature() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->tyretemperature(), target);
  }

  // uint32 tyreSpeed = 4;
  if (this->tyrespeed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->tyrespeed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.TyreInfo)
  return target;
}

size_t TyreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.TyreInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tyreLocation = 1;
  if (this->tyrelocation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->tyrelocation());
  }

  // uint32 tyrePressure = 2;
  if (this->tyrepressure() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->tyrepressure());
  }

  // uint32 tyreTemperature = 3;
  if (this->tyretemperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->tyretemperature());
  }

  // uint32 tyreSpeed = 4;
  if (this->tyrespeed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->tyrespeed());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TyreInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.TyreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TyreInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TyreInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.TyreInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.TyreInfo)
    MergeFrom(*source);
  }
}

void TyreInfo::MergeFrom(const TyreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.TyreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tyrelocation() != 0) {
    set_tyrelocation(from.tyrelocation());
  }
  if (from.tyrepressure() != 0) {
    set_tyrepressure(from.tyrepressure());
  }
  if (from.tyretemperature() != 0) {
    set_tyretemperature(from.tyretemperature());
  }
  if (from.tyrespeed() != 0) {
    set_tyrespeed(from.tyrespeed());
  }
}

void TyreInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.TyreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TyreInfo::CopyFrom(const TyreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.TyreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TyreInfo::IsInitialized() const {
  return true;
}

void TyreInfo::InternalSwap(TyreInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tyrelocation_, other->tyrelocation_);
  swap(tyrepressure_, other->tyrepressure_);
  swap(tyretemperature_, other->tyretemperature_);
  swap(tyrespeed_, other->tyrespeed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TyreInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TyreInfoList::InitAsDefaultInstance() {
}
class TyreInfoList::_Internal {
 public:
};

TyreInfoList::TyreInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.TyreInfoList)
}
TyreInfoList::TyreInfoList(const TyreInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tyreinfolist_(from.tyreinfolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IBUS.TyreInfoList)
}

void TyreInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TyreInfoList_vehicle_5fauxiliary_5finfo_2eproto.base);
}

TyreInfoList::~TyreInfoList() {
  // @@protoc_insertion_point(destructor:IBUS.TyreInfoList)
  SharedDtor();
}

void TyreInfoList::SharedDtor() {
}

void TyreInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TyreInfoList& TyreInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TyreInfoList_vehicle_5fauxiliary_5finfo_2eproto.base);
  return *internal_default_instance();
}


void TyreInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.TyreInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tyreinfolist_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TyreInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IBUS.TyreInfo tyreInfoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tyreinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TyreInfoList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.TyreInfoList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IBUS.TyreInfo tyreInfoList = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tyreinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.TyreInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.TyreInfoList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TyreInfoList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.TyreInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IBUS.TyreInfo tyreInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tyreinfolist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tyreinfolist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.TyreInfoList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TyreInfoList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.TyreInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IBUS.TyreInfo tyreInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tyreinfolist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tyreinfolist(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.TyreInfoList)
  return target;
}

size_t TyreInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.TyreInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IBUS.TyreInfo tyreInfoList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tyreinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tyreinfolist(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TyreInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.TyreInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const TyreInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TyreInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.TyreInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.TyreInfoList)
    MergeFrom(*source);
  }
}

void TyreInfoList::MergeFrom(const TyreInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.TyreInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tyreinfolist_.MergeFrom(from.tyreinfolist_);
}

void TyreInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.TyreInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TyreInfoList::CopyFrom(const TyreInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.TyreInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TyreInfoList::IsInitialized() const {
  return true;
}

void TyreInfoList::InternalSwap(TyreInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tyreinfolist_)->InternalSwap(CastToBase(&other->tyreinfolist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TyreInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleAuxiliaryInfo::InitAsDefaultInstance() {
  ::IBUS::_VehicleAuxiliaryInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::IBUS::Header*>(
      ::IBUS::Header::internal_default_instance());
  ::IBUS::_VehicleAuxiliaryInfo_default_instance_._instance.get_mutable()->tyreinfolist_ = const_cast< ::IBUS::TyreInfoList*>(
      ::IBUS::TyreInfoList::internal_default_instance());
}
class VehicleAuxiliaryInfo::_Internal {
 public:
  static const ::IBUS::Header& header(const VehicleAuxiliaryInfo* msg);
  static const ::IBUS::TyreInfoList& tyreinfolist(const VehicleAuxiliaryInfo* msg);
};

const ::IBUS::Header&
VehicleAuxiliaryInfo::_Internal::header(const VehicleAuxiliaryInfo* msg) {
  return *msg->header_;
}
const ::IBUS::TyreInfoList&
VehicleAuxiliaryInfo::_Internal::tyreinfolist(const VehicleAuxiliaryInfo* msg) {
  return *msg->tyreinfolist_;
}
void VehicleAuxiliaryInfo::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VehicleAuxiliaryInfo::VehicleAuxiliaryInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.VehicleAuxiliaryInfo)
}
VehicleAuxiliaryInfo::VehicleAuxiliaryInfo(const VehicleAuxiliaryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::IBUS::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_tyreinfolist()) {
    tyreinfolist_ = new ::IBUS::TyreInfoList(*from.tyreinfolist_);
  } else {
    tyreinfolist_ = nullptr;
  }
  ::memcpy(&leftlightstatus_, &from.leftlightstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&collisiontape_) -
    reinterpret_cast<char*>(&leftlightstatus_)) + sizeof(collisiontape_));
  // @@protoc_insertion_point(copy_constructor:IBUS.VehicleAuxiliaryInfo)
}

void VehicleAuxiliaryInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleAuxiliaryInfo_vehicle_5fauxiliary_5finfo_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collisiontape_) -
      reinterpret_cast<char*>(&header_)) + sizeof(collisiontape_));
}

VehicleAuxiliaryInfo::~VehicleAuxiliaryInfo() {
  // @@protoc_insertion_point(destructor:IBUS.VehicleAuxiliaryInfo)
  SharedDtor();
}

void VehicleAuxiliaryInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete tyreinfolist_;
}

void VehicleAuxiliaryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleAuxiliaryInfo& VehicleAuxiliaryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleAuxiliaryInfo_vehicle_5fauxiliary_5finfo_2eproto.base);
  return *internal_default_instance();
}


void VehicleAuxiliaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.VehicleAuxiliaryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tyreinfolist_ != nullptr) {
    delete tyreinfolist_;
  }
  tyreinfolist_ = nullptr;
  ::memset(&leftlightstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collisiontape_) -
      reinterpret_cast<char*>(&leftlightstatus_)) + sizeof(collisiontape_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleAuxiliaryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leftLightStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leftlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rightLightStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rightlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lowLightStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lowlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highLightStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          highlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 emergencyLightStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          emergencylightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frontFogLightStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          frontfoglightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rearFogLightStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rearfoglightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 motorRotationDirection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          motorrotationdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hornStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          hornstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool yawInvaild = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          yawinvaild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double yawRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          yawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lateralAcceleration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          lateralacceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitudinalAcceleration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          longitudinalacceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 batteryCapacity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          batterycapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 airConditionerStatus = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          airconditionerstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 smallDecisionStatus = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          smalldecisionstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 szWaterPercent = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          szwaterpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.TyreInfoList tyreInfoList = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_tyreinfolist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tipperHopperStatus = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          tipperhopperstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tipperHopperErrStatus = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          tipperhoppererrstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 electronicParkingIndication = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          electronicparkingindication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double feedbackCurvature = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          feedbackcurvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wheelAngleVoltageSignalFeedback = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          wheelanglevoltagesignalfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 diffLockStatus = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          difflockstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cleaningSystemWorkMode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          cleaningsystemworkmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cleaningSystemWorkStatus = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          cleaningsystemworkstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float liquidTemperature = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          liquidtemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float liquidLevelStatus = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          liquidlevelstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 cleaningSystemFaultLevel = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          cleaningsystemfaultlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cleaningSystemFaultCode = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          cleaningsystemfaultcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 driverEpbOn = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          driverepbon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 driverEpbOff = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverepboff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leftDoor1 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leftdoor1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leftDoor2 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          leftdoor2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leftDoor3 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          leftdoor3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leftDoor4 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          leftdoor4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rightDoor1 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rightdoor1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rightDoor2 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rightdoor2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rightDoor3 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rightdoor3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rightDoor4 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rightdoor4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seatBeltStatus = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          seatbeltstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leaveSeatStatus = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          leaveseatstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 holdSteeringWheel = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          holdsteeringwheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float leftFrontWheelSpeed = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          leftfrontwheelspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rightFrontWheelSpeed = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          rightfrontwheelspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float leftRearWheelSpeed = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          leftrearwheelspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rightRearWheelSpeed = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          rightrearwheelspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 collisionTape = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          collisiontape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleAuxiliaryInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.VehicleAuxiliaryInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leftLightStatus = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftlightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rightLightStatus = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightlightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lowLightStatus = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 highLightStatus = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 emergencyLightStatus = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emergencylightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frontFogLightStatus = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frontfoglightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rearFogLightStatus = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rearfoglightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 motorRotationDirection = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motorrotationdirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hornStatus = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hornstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool yawInvaild = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yawinvaild_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yawRate = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateralAcceleration = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateralacceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitudinalAcceleration = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinalacceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batteryCapacity = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batterycapacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 airConditionerStatus = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &airconditionerstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 smallDecisionStatus = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smalldecisionstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 szWaterPercent = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &szwaterpercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.TyreInfoList tyreInfoList = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tyreinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tipperHopperStatus = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tipperhopperstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tipperHopperErrStatus = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tipperhoppererrstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 electronicParkingIndication = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &electronicparkingindication_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double feedbackCurvature = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (185 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &feedbackcurvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheelAngleVoltageSignalFeedback = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (193 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheelanglevoltagesignalfeedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 diffLockStatus = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difflockstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cleaningSystemWorkMode = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleaningsystemworkmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cleaningSystemWorkStatus = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleaningsystemworkstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float liquidTemperature = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (229 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &liquidtemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float liquidLevelStatus = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (237 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &liquidlevelstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cleaningSystemFaultLevel = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleaningsystemfaultlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cleaningSystemFaultCode = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleaningsystemfaultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 driverEpbOn = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &driverepbon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 driverEpbOff = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &driverepboff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leftDoor1 = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftdoor1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leftDoor2 = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftdoor2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leftDoor3 = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftdoor3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leftDoor4 = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftdoor4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rightDoor1 = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightdoor1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rightDoor2 = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightdoor2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rightDoor3 = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightdoor3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rightDoor4 = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightdoor4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seatBeltStatus = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seatbeltstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leaveSeatStatus = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (344 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaveseatstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 holdSteeringWheel = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (352 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &holdsteeringwheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float leftFrontWheelSpeed = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (365 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftfrontwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rightFrontWheelSpeed = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (373 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightfrontwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float leftRearWheelSpeed = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (381 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftrearwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rightRearWheelSpeed = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (389 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightrearwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 collisionTape = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (392 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collisiontape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.VehicleAuxiliaryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.VehicleAuxiliaryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleAuxiliaryInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.VehicleAuxiliaryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // uint32 leftLightStatus = 2;
  if (this->leftlightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->leftlightstatus(), output);
  }

  // uint32 rightLightStatus = 3;
  if (this->rightlightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->rightlightstatus(), output);
  }

  // uint32 lowLightStatus = 4;
  if (this->lowlightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->lowlightstatus(), output);
  }

  // uint32 highLightStatus = 5;
  if (this->highlightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->highlightstatus(), output);
  }

  // uint32 emergencyLightStatus = 6;
  if (this->emergencylightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->emergencylightstatus(), output);
  }

  // uint32 frontFogLightStatus = 7;
  if (this->frontfoglightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->frontfoglightstatus(), output);
  }

  // uint32 rearFogLightStatus = 8;
  if (this->rearfoglightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->rearfoglightstatus(), output);
  }

  // uint32 motorRotationDirection = 9;
  if (this->motorrotationdirection() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->motorrotationdirection(), output);
  }

  // uint32 hornStatus = 10;
  if (this->hornstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->hornstatus(), output);
  }

  // bool yawInvaild = 11;
  if (this->yawinvaild() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->yawinvaild(), output);
  }

  // double yawRate = 12;
  if (!(this->yawrate() <= 0 && this->yawrate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->yawrate(), output);
  }

  // double lateralAcceleration = 13;
  if (!(this->lateralacceleration() <= 0 && this->lateralacceleration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->lateralacceleration(), output);
  }

  // double longitudinalAcceleration = 14;
  if (!(this->longitudinalacceleration() <= 0 && this->longitudinalacceleration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->longitudinalacceleration(), output);
  }

  // uint32 batteryCapacity = 15;
  if (this->batterycapacity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->batterycapacity(), output);
  }

  // uint32 airConditionerStatus = 16;
  if (this->airconditionerstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->airconditionerstatus(), output);
  }

  // uint32 smallDecisionStatus = 17;
  if (this->smalldecisionstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->smalldecisionstatus(), output);
  }

  // uint32 szWaterPercent = 18;
  if (this->szwaterpercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->szwaterpercent(), output);
  }

  // .IBUS.TyreInfoList tyreInfoList = 19;
  if (this->has_tyreinfolist()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, _Internal::tyreinfolist(this), output);
  }

  // uint32 tipperHopperStatus = 20;
  if (this->tipperhopperstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->tipperhopperstatus(), output);
  }

  // uint32 tipperHopperErrStatus = 21;
  if (this->tipperhoppererrstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(21, this->tipperhoppererrstatus(), output);
  }

  // uint32 electronicParkingIndication = 22;
  if (this->electronicparkingindication() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(22, this->electronicparkingindication(), output);
  }

  // double feedbackCurvature = 23;
  if (!(this->feedbackcurvature() <= 0 && this->feedbackcurvature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(23, this->feedbackcurvature(), output);
  }

  // double wheelAngleVoltageSignalFeedback = 24;
  if (!(this->wheelanglevoltagesignalfeedback() <= 0 && this->wheelanglevoltagesignalfeedback() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(24, this->wheelanglevoltagesignalfeedback(), output);
  }

  // uint32 diffLockStatus = 25;
  if (this->difflockstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(25, this->difflockstatus(), output);
  }

  // uint32 cleaningSystemWorkMode = 26;
  if (this->cleaningsystemworkmode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(26, this->cleaningsystemworkmode(), output);
  }

  // uint32 cleaningSystemWorkStatus = 27;
  if (this->cleaningsystemworkstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(27, this->cleaningsystemworkstatus(), output);
  }

  // float liquidTemperature = 28;
  if (!(this->liquidtemperature() <= 0 && this->liquidtemperature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(28, this->liquidtemperature(), output);
  }

  // float liquidLevelStatus = 29;
  if (!(this->liquidlevelstatus() <= 0 && this->liquidlevelstatus() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(29, this->liquidlevelstatus(), output);
  }

  // uint32 cleaningSystemFaultLevel = 30;
  if (this->cleaningsystemfaultlevel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(30, this->cleaningsystemfaultlevel(), output);
  }

  // uint32 cleaningSystemFaultCode = 31;
  if (this->cleaningsystemfaultcode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(31, this->cleaningsystemfaultcode(), output);
  }

  // uint32 driverEpbOn = 32;
  if (this->driverepbon() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(32, this->driverepbon(), output);
  }

  // uint32 driverEpbOff = 33;
  if (this->driverepboff() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(33, this->driverepboff(), output);
  }

  // uint32 leftDoor1 = 34;
  if (this->leftdoor1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(34, this->leftdoor1(), output);
  }

  // uint32 leftDoor2 = 35;
  if (this->leftdoor2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(35, this->leftdoor2(), output);
  }

  // uint32 leftDoor3 = 36;
  if (this->leftdoor3() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(36, this->leftdoor3(), output);
  }

  // uint32 leftDoor4 = 37;
  if (this->leftdoor4() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(37, this->leftdoor4(), output);
  }

  // uint32 rightDoor1 = 38;
  if (this->rightdoor1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(38, this->rightdoor1(), output);
  }

  // uint32 rightDoor2 = 39;
  if (this->rightdoor2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(39, this->rightdoor2(), output);
  }

  // uint32 rightDoor3 = 40;
  if (this->rightdoor3() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(40, this->rightdoor3(), output);
  }

  // uint32 rightDoor4 = 41;
  if (this->rightdoor4() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(41, this->rightdoor4(), output);
  }

  // uint32 seatBeltStatus = 42;
  if (this->seatbeltstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(42, this->seatbeltstatus(), output);
  }

  // uint32 leaveSeatStatus = 43;
  if (this->leaveseatstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(43, this->leaveseatstatus(), output);
  }

  // uint32 holdSteeringWheel = 44;
  if (this->holdsteeringwheel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(44, this->holdsteeringwheel(), output);
  }

  // float leftFrontWheelSpeed = 45;
  if (!(this->leftfrontwheelspeed() <= 0 && this->leftfrontwheelspeed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(45, this->leftfrontwheelspeed(), output);
  }

  // float rightFrontWheelSpeed = 46;
  if (!(this->rightfrontwheelspeed() <= 0 && this->rightfrontwheelspeed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(46, this->rightfrontwheelspeed(), output);
  }

  // float leftRearWheelSpeed = 47;
  if (!(this->leftrearwheelspeed() <= 0 && this->leftrearwheelspeed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(47, this->leftrearwheelspeed(), output);
  }

  // float rightRearWheelSpeed = 48;
  if (!(this->rightrearwheelspeed() <= 0 && this->rightrearwheelspeed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(48, this->rightrearwheelspeed(), output);
  }

  // uint32 collisionTape = 49;
  if (this->collisiontape() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(49, this->collisiontape(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.VehicleAuxiliaryInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleAuxiliaryInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.VehicleAuxiliaryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // uint32 leftLightStatus = 2;
  if (this->leftlightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->leftlightstatus(), target);
  }

  // uint32 rightLightStatus = 3;
  if (this->rightlightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->rightlightstatus(), target);
  }

  // uint32 lowLightStatus = 4;
  if (this->lowlightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->lowlightstatus(), target);
  }

  // uint32 highLightStatus = 5;
  if (this->highlightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->highlightstatus(), target);
  }

  // uint32 emergencyLightStatus = 6;
  if (this->emergencylightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->emergencylightstatus(), target);
  }

  // uint32 frontFogLightStatus = 7;
  if (this->frontfoglightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->frontfoglightstatus(), target);
  }

  // uint32 rearFogLightStatus = 8;
  if (this->rearfoglightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->rearfoglightstatus(), target);
  }

  // uint32 motorRotationDirection = 9;
  if (this->motorrotationdirection() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->motorrotationdirection(), target);
  }

  // uint32 hornStatus = 10;
  if (this->hornstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->hornstatus(), target);
  }

  // bool yawInvaild = 11;
  if (this->yawinvaild() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->yawinvaild(), target);
  }

  // double yawRate = 12;
  if (!(this->yawrate() <= 0 && this->yawrate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->yawrate(), target);
  }

  // double lateralAcceleration = 13;
  if (!(this->lateralacceleration() <= 0 && this->lateralacceleration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->lateralacceleration(), target);
  }

  // double longitudinalAcceleration = 14;
  if (!(this->longitudinalacceleration() <= 0 && this->longitudinalacceleration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->longitudinalacceleration(), target);
  }

  // uint32 batteryCapacity = 15;
  if (this->batterycapacity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->batterycapacity(), target);
  }

  // uint32 airConditionerStatus = 16;
  if (this->airconditionerstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->airconditionerstatus(), target);
  }

  // uint32 smallDecisionStatus = 17;
  if (this->smalldecisionstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->smalldecisionstatus(), target);
  }

  // uint32 szWaterPercent = 18;
  if (this->szwaterpercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->szwaterpercent(), target);
  }

  // .IBUS.TyreInfoList tyreInfoList = 19;
  if (this->has_tyreinfolist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::tyreinfolist(this), target);
  }

  // uint32 tipperHopperStatus = 20;
  if (this->tipperhopperstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->tipperhopperstatus(), target);
  }

  // uint32 tipperHopperErrStatus = 21;
  if (this->tipperhoppererrstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->tipperhoppererrstatus(), target);
  }

  // uint32 electronicParkingIndication = 22;
  if (this->electronicparkingindication() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->electronicparkingindication(), target);
  }

  // double feedbackCurvature = 23;
  if (!(this->feedbackcurvature() <= 0 && this->feedbackcurvature() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->feedbackcurvature(), target);
  }

  // double wheelAngleVoltageSignalFeedback = 24;
  if (!(this->wheelanglevoltagesignalfeedback() <= 0 && this->wheelanglevoltagesignalfeedback() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->wheelanglevoltagesignalfeedback(), target);
  }

  // uint32 diffLockStatus = 25;
  if (this->difflockstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->difflockstatus(), target);
  }

  // uint32 cleaningSystemWorkMode = 26;
  if (this->cleaningsystemworkmode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->cleaningsystemworkmode(), target);
  }

  // uint32 cleaningSystemWorkStatus = 27;
  if (this->cleaningsystemworkstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->cleaningsystemworkstatus(), target);
  }

  // float liquidTemperature = 28;
  if (!(this->liquidtemperature() <= 0 && this->liquidtemperature() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->liquidtemperature(), target);
  }

  // float liquidLevelStatus = 29;
  if (!(this->liquidlevelstatus() <= 0 && this->liquidlevelstatus() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->liquidlevelstatus(), target);
  }

  // uint32 cleaningSystemFaultLevel = 30;
  if (this->cleaningsystemfaultlevel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->cleaningsystemfaultlevel(), target);
  }

  // uint32 cleaningSystemFaultCode = 31;
  if (this->cleaningsystemfaultcode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->cleaningsystemfaultcode(), target);
  }

  // uint32 driverEpbOn = 32;
  if (this->driverepbon() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->driverepbon(), target);
  }

  // uint32 driverEpbOff = 33;
  if (this->driverepboff() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->driverepboff(), target);
  }

  // uint32 leftDoor1 = 34;
  if (this->leftdoor1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->leftdoor1(), target);
  }

  // uint32 leftDoor2 = 35;
  if (this->leftdoor2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->leftdoor2(), target);
  }

  // uint32 leftDoor3 = 36;
  if (this->leftdoor3() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->leftdoor3(), target);
  }

  // uint32 leftDoor4 = 37;
  if (this->leftdoor4() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->leftdoor4(), target);
  }

  // uint32 rightDoor1 = 38;
  if (this->rightdoor1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->rightdoor1(), target);
  }

  // uint32 rightDoor2 = 39;
  if (this->rightdoor2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->rightdoor2(), target);
  }

  // uint32 rightDoor3 = 40;
  if (this->rightdoor3() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->rightdoor3(), target);
  }

  // uint32 rightDoor4 = 41;
  if (this->rightdoor4() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->rightdoor4(), target);
  }

  // uint32 seatBeltStatus = 42;
  if (this->seatbeltstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->seatbeltstatus(), target);
  }

  // uint32 leaveSeatStatus = 43;
  if (this->leaveseatstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->leaveseatstatus(), target);
  }

  // uint32 holdSteeringWheel = 44;
  if (this->holdsteeringwheel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->holdsteeringwheel(), target);
  }

  // float leftFrontWheelSpeed = 45;
  if (!(this->leftfrontwheelspeed() <= 0 && this->leftfrontwheelspeed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->leftfrontwheelspeed(), target);
  }

  // float rightFrontWheelSpeed = 46;
  if (!(this->rightfrontwheelspeed() <= 0 && this->rightfrontwheelspeed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->rightfrontwheelspeed(), target);
  }

  // float leftRearWheelSpeed = 47;
  if (!(this->leftrearwheelspeed() <= 0 && this->leftrearwheelspeed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(47, this->leftrearwheelspeed(), target);
  }

  // float rightRearWheelSpeed = 48;
  if (!(this->rightrearwheelspeed() <= 0 && this->rightrearwheelspeed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(48, this->rightrearwheelspeed(), target);
  }

  // uint32 collisionTape = 49;
  if (this->collisiontape() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->collisiontape(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.VehicleAuxiliaryInfo)
  return target;
}

size_t VehicleAuxiliaryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.VehicleAuxiliaryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .IBUS.TyreInfoList tyreInfoList = 19;
  if (this->has_tyreinfolist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tyreinfolist_);
  }

  // uint32 leftLightStatus = 2;
  if (this->leftlightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->leftlightstatus());
  }

  // uint32 rightLightStatus = 3;
  if (this->rightlightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rightlightstatus());
  }

  // uint32 lowLightStatus = 4;
  if (this->lowlightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lowlightstatus());
  }

  // uint32 highLightStatus = 5;
  if (this->highlightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->highlightstatus());
  }

  // uint32 emergencyLightStatus = 6;
  if (this->emergencylightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->emergencylightstatus());
  }

  // uint32 frontFogLightStatus = 7;
  if (this->frontfoglightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->frontfoglightstatus());
  }

  // uint32 rearFogLightStatus = 8;
  if (this->rearfoglightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rearfoglightstatus());
  }

  // uint32 motorRotationDirection = 9;
  if (this->motorrotationdirection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->motorrotationdirection());
  }

  // uint32 hornStatus = 10;
  if (this->hornstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->hornstatus());
  }

  // bool yawInvaild = 11;
  if (this->yawinvaild() != 0) {
    total_size += 1 + 1;
  }

  // double yawRate = 12;
  if (!(this->yawrate() <= 0 && this->yawrate() >= 0)) {
    total_size += 1 + 8;
  }

  // double lateralAcceleration = 13;
  if (!(this->lateralacceleration() <= 0 && this->lateralacceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitudinalAcceleration = 14;
  if (!(this->longitudinalacceleration() <= 0 && this->longitudinalacceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 batteryCapacity = 15;
  if (this->batterycapacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->batterycapacity());
  }

  // uint32 airConditionerStatus = 16;
  if (this->airconditionerstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->airconditionerstatus());
  }

  // uint32 smallDecisionStatus = 17;
  if (this->smalldecisionstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->smalldecisionstatus());
  }

  // uint32 szWaterPercent = 18;
  if (this->szwaterpercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->szwaterpercent());
  }

  // uint32 tipperHopperStatus = 20;
  if (this->tipperhopperstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->tipperhopperstatus());
  }

  // uint32 tipperHopperErrStatus = 21;
  if (this->tipperhoppererrstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->tipperhoppererrstatus());
  }

  // double feedbackCurvature = 23;
  if (!(this->feedbackcurvature() <= 0 && this->feedbackcurvature() >= 0)) {
    total_size += 2 + 8;
  }

  // uint32 electronicParkingIndication = 22;
  if (this->electronicparkingindication() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->electronicparkingindication());
  }

  // uint32 diffLockStatus = 25;
  if (this->difflockstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->difflockstatus());
  }

  // double wheelAngleVoltageSignalFeedback = 24;
  if (!(this->wheelanglevoltagesignalfeedback() <= 0 && this->wheelanglevoltagesignalfeedback() >= 0)) {
    total_size += 2 + 8;
  }

  // uint32 cleaningSystemWorkMode = 26;
  if (this->cleaningsystemworkmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->cleaningsystemworkmode());
  }

  // uint32 cleaningSystemWorkStatus = 27;
  if (this->cleaningsystemworkstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->cleaningsystemworkstatus());
  }

  // float liquidTemperature = 28;
  if (!(this->liquidtemperature() <= 0 && this->liquidtemperature() >= 0)) {
    total_size += 2 + 4;
  }

  // float liquidLevelStatus = 29;
  if (!(this->liquidlevelstatus() <= 0 && this->liquidlevelstatus() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 cleaningSystemFaultLevel = 30;
  if (this->cleaningsystemfaultlevel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->cleaningsystemfaultlevel());
  }

  // uint32 cleaningSystemFaultCode = 31;
  if (this->cleaningsystemfaultcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->cleaningsystemfaultcode());
  }

  // uint32 driverEpbOn = 32;
  if (this->driverepbon() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->driverepbon());
  }

  // uint32 driverEpbOff = 33;
  if (this->driverepboff() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->driverepboff());
  }

  // uint32 leftDoor1 = 34;
  if (this->leftdoor1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->leftdoor1());
  }

  // uint32 leftDoor2 = 35;
  if (this->leftdoor2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->leftdoor2());
  }

  // uint32 leftDoor3 = 36;
  if (this->leftdoor3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->leftdoor3());
  }

  // uint32 leftDoor4 = 37;
  if (this->leftdoor4() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->leftdoor4());
  }

  // uint32 rightDoor1 = 38;
  if (this->rightdoor1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rightdoor1());
  }

  // uint32 rightDoor2 = 39;
  if (this->rightdoor2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rightdoor2());
  }

  // uint32 rightDoor3 = 40;
  if (this->rightdoor3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rightdoor3());
  }

  // uint32 rightDoor4 = 41;
  if (this->rightdoor4() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rightdoor4());
  }

  // uint32 seatBeltStatus = 42;
  if (this->seatbeltstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->seatbeltstatus());
  }

  // uint32 leaveSeatStatus = 43;
  if (this->leaveseatstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->leaveseatstatus());
  }

  // uint32 holdSteeringWheel = 44;
  if (this->holdsteeringwheel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->holdsteeringwheel());
  }

  // float leftFrontWheelSpeed = 45;
  if (!(this->leftfrontwheelspeed() <= 0 && this->leftfrontwheelspeed() >= 0)) {
    total_size += 2 + 4;
  }

  // float rightFrontWheelSpeed = 46;
  if (!(this->rightfrontwheelspeed() <= 0 && this->rightfrontwheelspeed() >= 0)) {
    total_size += 2 + 4;
  }

  // float leftRearWheelSpeed = 47;
  if (!(this->leftrearwheelspeed() <= 0 && this->leftrearwheelspeed() >= 0)) {
    total_size += 2 + 4;
  }

  // float rightRearWheelSpeed = 48;
  if (!(this->rightrearwheelspeed() <= 0 && this->rightrearwheelspeed() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 collisionTape = 49;
  if (this->collisiontape() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->collisiontape());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleAuxiliaryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.VehicleAuxiliaryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAuxiliaryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleAuxiliaryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.VehicleAuxiliaryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.VehicleAuxiliaryInfo)
    MergeFrom(*source);
  }
}

void VehicleAuxiliaryInfo::MergeFrom(const VehicleAuxiliaryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.VehicleAuxiliaryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::IBUS::Header::MergeFrom(from.header());
  }
  if (from.has_tyreinfolist()) {
    mutable_tyreinfolist()->::IBUS::TyreInfoList::MergeFrom(from.tyreinfolist());
  }
  if (from.leftlightstatus() != 0) {
    set_leftlightstatus(from.leftlightstatus());
  }
  if (from.rightlightstatus() != 0) {
    set_rightlightstatus(from.rightlightstatus());
  }
  if (from.lowlightstatus() != 0) {
    set_lowlightstatus(from.lowlightstatus());
  }
  if (from.highlightstatus() != 0) {
    set_highlightstatus(from.highlightstatus());
  }
  if (from.emergencylightstatus() != 0) {
    set_emergencylightstatus(from.emergencylightstatus());
  }
  if (from.frontfoglightstatus() != 0) {
    set_frontfoglightstatus(from.frontfoglightstatus());
  }
  if (from.rearfoglightstatus() != 0) {
    set_rearfoglightstatus(from.rearfoglightstatus());
  }
  if (from.motorrotationdirection() != 0) {
    set_motorrotationdirection(from.motorrotationdirection());
  }
  if (from.hornstatus() != 0) {
    set_hornstatus(from.hornstatus());
  }
  if (from.yawinvaild() != 0) {
    set_yawinvaild(from.yawinvaild());
  }
  if (!(from.yawrate() <= 0 && from.yawrate() >= 0)) {
    set_yawrate(from.yawrate());
  }
  if (!(from.lateralacceleration() <= 0 && from.lateralacceleration() >= 0)) {
    set_lateralacceleration(from.lateralacceleration());
  }
  if (!(from.longitudinalacceleration() <= 0 && from.longitudinalacceleration() >= 0)) {
    set_longitudinalacceleration(from.longitudinalacceleration());
  }
  if (from.batterycapacity() != 0) {
    set_batterycapacity(from.batterycapacity());
  }
  if (from.airconditionerstatus() != 0) {
    set_airconditionerstatus(from.airconditionerstatus());
  }
  if (from.smalldecisionstatus() != 0) {
    set_smalldecisionstatus(from.smalldecisionstatus());
  }
  if (from.szwaterpercent() != 0) {
    set_szwaterpercent(from.szwaterpercent());
  }
  if (from.tipperhopperstatus() != 0) {
    set_tipperhopperstatus(from.tipperhopperstatus());
  }
  if (from.tipperhoppererrstatus() != 0) {
    set_tipperhoppererrstatus(from.tipperhoppererrstatus());
  }
  if (!(from.feedbackcurvature() <= 0 && from.feedbackcurvature() >= 0)) {
    set_feedbackcurvature(from.feedbackcurvature());
  }
  if (from.electronicparkingindication() != 0) {
    set_electronicparkingindication(from.electronicparkingindication());
  }
  if (from.difflockstatus() != 0) {
    set_difflockstatus(from.difflockstatus());
  }
  if (!(from.wheelanglevoltagesignalfeedback() <= 0 && from.wheelanglevoltagesignalfeedback() >= 0)) {
    set_wheelanglevoltagesignalfeedback(from.wheelanglevoltagesignalfeedback());
  }
  if (from.cleaningsystemworkmode() != 0) {
    set_cleaningsystemworkmode(from.cleaningsystemworkmode());
  }
  if (from.cleaningsystemworkstatus() != 0) {
    set_cleaningsystemworkstatus(from.cleaningsystemworkstatus());
  }
  if (!(from.liquidtemperature() <= 0 && from.liquidtemperature() >= 0)) {
    set_liquidtemperature(from.liquidtemperature());
  }
  if (!(from.liquidlevelstatus() <= 0 && from.liquidlevelstatus() >= 0)) {
    set_liquidlevelstatus(from.liquidlevelstatus());
  }
  if (from.cleaningsystemfaultlevel() != 0) {
    set_cleaningsystemfaultlevel(from.cleaningsystemfaultlevel());
  }
  if (from.cleaningsystemfaultcode() != 0) {
    set_cleaningsystemfaultcode(from.cleaningsystemfaultcode());
  }
  if (from.driverepbon() != 0) {
    set_driverepbon(from.driverepbon());
  }
  if (from.driverepboff() != 0) {
    set_driverepboff(from.driverepboff());
  }
  if (from.leftdoor1() != 0) {
    set_leftdoor1(from.leftdoor1());
  }
  if (from.leftdoor2() != 0) {
    set_leftdoor2(from.leftdoor2());
  }
  if (from.leftdoor3() != 0) {
    set_leftdoor3(from.leftdoor3());
  }
  if (from.leftdoor4() != 0) {
    set_leftdoor4(from.leftdoor4());
  }
  if (from.rightdoor1() != 0) {
    set_rightdoor1(from.rightdoor1());
  }
  if (from.rightdoor2() != 0) {
    set_rightdoor2(from.rightdoor2());
  }
  if (from.rightdoor3() != 0) {
    set_rightdoor3(from.rightdoor3());
  }
  if (from.rightdoor4() != 0) {
    set_rightdoor4(from.rightdoor4());
  }
  if (from.seatbeltstatus() != 0) {
    set_seatbeltstatus(from.seatbeltstatus());
  }
  if (from.leaveseatstatus() != 0) {
    set_leaveseatstatus(from.leaveseatstatus());
  }
  if (from.holdsteeringwheel() != 0) {
    set_holdsteeringwheel(from.holdsteeringwheel());
  }
  if (!(from.leftfrontwheelspeed() <= 0 && from.leftfrontwheelspeed() >= 0)) {
    set_leftfrontwheelspeed(from.leftfrontwheelspeed());
  }
  if (!(from.rightfrontwheelspeed() <= 0 && from.rightfrontwheelspeed() >= 0)) {
    set_rightfrontwheelspeed(from.rightfrontwheelspeed());
  }
  if (!(from.leftrearwheelspeed() <= 0 && from.leftrearwheelspeed() >= 0)) {
    set_leftrearwheelspeed(from.leftrearwheelspeed());
  }
  if (!(from.rightrearwheelspeed() <= 0 && from.rightrearwheelspeed() >= 0)) {
    set_rightrearwheelspeed(from.rightrearwheelspeed());
  }
  if (from.collisiontape() != 0) {
    set_collisiontape(from.collisiontape());
  }
}

void VehicleAuxiliaryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.VehicleAuxiliaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAuxiliaryInfo::CopyFrom(const VehicleAuxiliaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.VehicleAuxiliaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAuxiliaryInfo::IsInitialized() const {
  return true;
}

void VehicleAuxiliaryInfo::InternalSwap(VehicleAuxiliaryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(tyreinfolist_, other->tyreinfolist_);
  swap(leftlightstatus_, other->leftlightstatus_);
  swap(rightlightstatus_, other->rightlightstatus_);
  swap(lowlightstatus_, other->lowlightstatus_);
  swap(highlightstatus_, other->highlightstatus_);
  swap(emergencylightstatus_, other->emergencylightstatus_);
  swap(frontfoglightstatus_, other->frontfoglightstatus_);
  swap(rearfoglightstatus_, other->rearfoglightstatus_);
  swap(motorrotationdirection_, other->motorrotationdirection_);
  swap(hornstatus_, other->hornstatus_);
  swap(yawinvaild_, other->yawinvaild_);
  swap(yawrate_, other->yawrate_);
  swap(lateralacceleration_, other->lateralacceleration_);
  swap(longitudinalacceleration_, other->longitudinalacceleration_);
  swap(batterycapacity_, other->batterycapacity_);
  swap(airconditionerstatus_, other->airconditionerstatus_);
  swap(smalldecisionstatus_, other->smalldecisionstatus_);
  swap(szwaterpercent_, other->szwaterpercent_);
  swap(tipperhopperstatus_, other->tipperhopperstatus_);
  swap(tipperhoppererrstatus_, other->tipperhoppererrstatus_);
  swap(feedbackcurvature_, other->feedbackcurvature_);
  swap(electronicparkingindication_, other->electronicparkingindication_);
  swap(difflockstatus_, other->difflockstatus_);
  swap(wheelanglevoltagesignalfeedback_, other->wheelanglevoltagesignalfeedback_);
  swap(cleaningsystemworkmode_, other->cleaningsystemworkmode_);
  swap(cleaningsystemworkstatus_, other->cleaningsystemworkstatus_);
  swap(liquidtemperature_, other->liquidtemperature_);
  swap(liquidlevelstatus_, other->liquidlevelstatus_);
  swap(cleaningsystemfaultlevel_, other->cleaningsystemfaultlevel_);
  swap(cleaningsystemfaultcode_, other->cleaningsystemfaultcode_);
  swap(driverepbon_, other->driverepbon_);
  swap(driverepboff_, other->driverepboff_);
  swap(leftdoor1_, other->leftdoor1_);
  swap(leftdoor2_, other->leftdoor2_);
  swap(leftdoor3_, other->leftdoor3_);
  swap(leftdoor4_, other->leftdoor4_);
  swap(rightdoor1_, other->rightdoor1_);
  swap(rightdoor2_, other->rightdoor2_);
  swap(rightdoor3_, other->rightdoor3_);
  swap(rightdoor4_, other->rightdoor4_);
  swap(seatbeltstatus_, other->seatbeltstatus_);
  swap(leaveseatstatus_, other->leaveseatstatus_);
  swap(holdsteeringwheel_, other->holdsteeringwheel_);
  swap(leftfrontwheelspeed_, other->leftfrontwheelspeed_);
  swap(rightfrontwheelspeed_, other->rightfrontwheelspeed_);
  swap(leftrearwheelspeed_, other->leftrearwheelspeed_);
  swap(rightrearwheelspeed_, other->rightrearwheelspeed_);
  swap(collisiontape_, other->collisiontape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleAuxiliaryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IBUS::TyreInfo* Arena::CreateMaybeMessage< ::IBUS::TyreInfo >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::TyreInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::TyreInfoList* Arena::CreateMaybeMessage< ::IBUS::TyreInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::TyreInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::VehicleAuxiliaryInfo* Arena::CreateMaybeMessage< ::IBUS::VehicleAuxiliaryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::VehicleAuxiliaryInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
