// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocationInterface.proto

#include "LocationInterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Acceleration_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bias_LocationInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Header_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocationInterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPY_LocationInterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Velocity_common_2eproto;
namespace IBUS {
class RPYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPY> _instance;
} _RPY_default_instance_;
class BiasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bias> _instance;
} _Bias_default_instance_;
class LocationServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationService> _instance;
} _LocationService_default_instance_;
}  // namespace IBUS
static void InitDefaultsscc_info_Bias_LocationInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_Bias_default_instance_;
    new (ptr) ::IBUS::Bias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::Bias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bias_LocationInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Bias_LocationInterface_2eproto}, {
      &scc_info_Point3D_common_2eproto.base,}};

static void InitDefaultsscc_info_LocationService_LocationInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_LocationService_default_instance_;
    new (ptr) ::IBUS::LocationService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::LocationService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_LocationService_LocationInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_LocationService_LocationInterface_2eproto}, {
      &scc_info_Header_common_2eproto.base,
      &scc_info_Point3D_common_2eproto.base,
      &scc_info_Pose_common_2eproto.base,
      &scc_info_Velocity_common_2eproto.base,
      &scc_info_Acceleration_common_2eproto.base,
      &scc_info_Bias_LocationInterface_2eproto.base,
      &scc_info_RPY_LocationInterface_2eproto.base,}};

static void InitDefaultsscc_info_RPY_LocationInterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_RPY_default_instance_;
    new (ptr) ::IBUS::RPY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::RPY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPY_LocationInterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RPY_LocationInterface_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LocationInterface_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LocationInterface_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LocationInterface_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LocationInterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::RPY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::RPY, pitch_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RPY, roll_),
  PROTOBUF_FIELD_OFFSET(::IBUS::RPY, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::Bias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::Bias, linearaccelerationbias_),
  PROTOBUF_FIELD_OFFSET(::IBUS::Bias, angularvelocitybias_),
  PROTOBUF_FIELD_OFFSET(::IBUS::Bias, covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, header_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, parentcoordinate_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, childcoordinate_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, positionstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, utmzoneid_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, issouth_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, offsetx_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, offsety_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, refpoint_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, pose_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, vel_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, acc_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, imub_),
  PROTOBUF_FIELD_OFFSET(::IBUS::LocationService, rpy_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IBUS::RPY)},
  { 8, -1, sizeof(::IBUS::Bias)},
  { 16, -1, sizeof(::IBUS::LocationService)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_RPY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_Bias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_LocationService_default_instance_),
};

const char descriptor_table_protodef_LocationInterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027LocationInterface.proto\022\004IBUS\032\014common."
  "proto\"/\n\003RPY\022\r\n\005pitch\030\t \001(\002\022\014\n\004roll\030\n \001("
  "\002\022\013\n\003yaw\030\013 \001(\002\"u\n\004Bias\022-\n\026LinearAccelera"
  "tionBias\030\001 \001(\0132\r.IBUS.Point3D\022*\n\023Angular"
  "VelocityBias\030\002 \001(\0132\r.IBUS.Point3D\022\022\n\nCov"
  "ariance\030\003 \003(\001\"\360\003\n\017LocationService\022\034\n\006hea"
  "der\030\001 \001(\0132\014.IBUS.Header\022)\n\020ParentCoordin"
  "ate\030\002 \001(\0162\017.IBUS.FRAMETYPE\022(\n\017ChildCoord"
  "inate\030\003 \001(\0162\017.IBUS.FRAMETYPE\0225\n\016Position"
  "Status\030\004 \001(\0162\035.IBUS.LocationService.pSta"
  "tus\022\021\n\tUTMZoneID\030\005 \001(\r\022\017\n\007IsSouth\030\006 \001(\010\022"
  "\017\n\007OffsetX\030\007 \001(\r\022\017\n\007OffsetY\030\010 \001(\r\022\037\n\010Ref"
  "Point\030\t \001(\0132\r.IBUS.Point3D\022\030\n\004pose\030\n \001(\013"
  "2\n.IBUS.Pose\022\033\n\003Vel\030\013 \001(\0132\016.IBUS.Velocit"
  "y\022\037\n\003acc\030\014 \001(\0132\022.IBUS.Acceleration\022\030\n\004im"
  "ub\030\r \001(\0132\n.IBUS.Bias\022\026\n\003rpy\030\016 \001(\0132\t.IBUS"
  ".RPY\"B\n\007pStatus\022\010\n\004GOOD\020\000\022\025\n\021POSITION_NO"
  "T_GOOD\020\001\022\026\n\022ORIENTATIONNOTGOOD\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LocationInterface_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LocationInterface_2eproto_sccs[3] = {
  &scc_info_Bias_LocationInterface_2eproto.base,
  &scc_info_LocationService_LocationInterface_2eproto.base,
  &scc_info_RPY_LocationInterface_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LocationInterface_2eproto_once;
static bool descriptor_table_LocationInterface_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LocationInterface_2eproto = {
  &descriptor_table_LocationInterface_2eproto_initialized, descriptor_table_protodef_LocationInterface_2eproto, "LocationInterface.proto", 720,
  &descriptor_table_LocationInterface_2eproto_once, descriptor_table_LocationInterface_2eproto_sccs, descriptor_table_LocationInterface_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_LocationInterface_2eproto::offsets,
  file_level_metadata_LocationInterface_2eproto, 3, file_level_enum_descriptors_LocationInterface_2eproto, file_level_service_descriptors_LocationInterface_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LocationInterface_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LocationInterface_2eproto), true);
namespace IBUS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationService_pStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LocationInterface_2eproto);
  return file_level_enum_descriptors_LocationInterface_2eproto[0];
}
bool LocationService_pStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LocationService_pStatus LocationService::GOOD;
constexpr LocationService_pStatus LocationService::POSITION_NOT_GOOD;
constexpr LocationService_pStatus LocationService::ORIENTATIONNOTGOOD;
constexpr LocationService_pStatus LocationService::pStatus_MIN;
constexpr LocationService_pStatus LocationService::pStatus_MAX;
constexpr int LocationService::pStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RPY::InitAsDefaultInstance() {
}
class RPY::_Internal {
 public:
};

RPY::RPY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.RPY)
}
RPY::RPY(const RPY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:IBUS.RPY)
}

void RPY::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
}

RPY::~RPY() {
  // @@protoc_insertion_point(destructor:IBUS.RPY)
  SharedDtor();
}

void RPY::SharedDtor() {
}

void RPY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPY& RPY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPY_LocationInterface_2eproto.base);
  return *internal_default_instance();
}


void RPY::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.RPY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RPY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float pitch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RPY::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.RPY)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pitch = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.RPY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.RPY)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RPY::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.RPY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 9;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->pitch(), output);
  }

  // float roll = 10;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->roll(), output);
  }

  // float yaw = 11;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.RPY)
}

::PROTOBUF_NAMESPACE_ID::uint8* RPY::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.RPY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 9;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->pitch(), target);
  }

  // float roll = 10;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->roll(), target);
  }

  // float yaw = 11;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.RPY)
  return target;
}

size_t RPY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.RPY)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float yaw = 11;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 9;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 10;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.RPY)
  GOOGLE_DCHECK_NE(&from, this);
  const RPY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.RPY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.RPY)
    MergeFrom(*source);
  }
}

void RPY::MergeFrom(const RPY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.RPY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    set_yaw(from.yaw());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    set_pitch(from.pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    set_roll(from.roll());
  }
}

void RPY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.RPY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPY::CopyFrom(const RPY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.RPY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPY::IsInitialized() const {
  return true;
}

void RPY::InternalSwap(RPY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bias::InitAsDefaultInstance() {
  ::IBUS::_Bias_default_instance_._instance.get_mutable()->linearaccelerationbias_ = const_cast< ::IBUS::Point3D*>(
      ::IBUS::Point3D::internal_default_instance());
  ::IBUS::_Bias_default_instance_._instance.get_mutable()->angularvelocitybias_ = const_cast< ::IBUS::Point3D*>(
      ::IBUS::Point3D::internal_default_instance());
}
class Bias::_Internal {
 public:
  static const ::IBUS::Point3D& linearaccelerationbias(const Bias* msg);
  static const ::IBUS::Point3D& angularvelocitybias(const Bias* msg);
};

const ::IBUS::Point3D&
Bias::_Internal::linearaccelerationbias(const Bias* msg) {
  return *msg->linearaccelerationbias_;
}
const ::IBUS::Point3D&
Bias::_Internal::angularvelocitybias(const Bias* msg) {
  return *msg->angularvelocitybias_;
}
void Bias::clear_linearaccelerationbias() {
  if (GetArenaNoVirtual() == nullptr && linearaccelerationbias_ != nullptr) {
    delete linearaccelerationbias_;
  }
  linearaccelerationbias_ = nullptr;
}
void Bias::clear_angularvelocitybias() {
  if (GetArenaNoVirtual() == nullptr && angularvelocitybias_ != nullptr) {
    delete angularvelocitybias_;
  }
  angularvelocitybias_ = nullptr;
}
Bias::Bias()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.Bias)
}
Bias::Bias(const Bias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linearaccelerationbias()) {
    linearaccelerationbias_ = new ::IBUS::Point3D(*from.linearaccelerationbias_);
  } else {
    linearaccelerationbias_ = nullptr;
  }
  if (from.has_angularvelocitybias()) {
    angularvelocitybias_ = new ::IBUS::Point3D(*from.angularvelocitybias_);
  } else {
    angularvelocitybias_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IBUS.Bias)
}

void Bias::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bias_LocationInterface_2eproto.base);
  ::memset(&linearaccelerationbias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angularvelocitybias_) -
      reinterpret_cast<char*>(&linearaccelerationbias_)) + sizeof(angularvelocitybias_));
}

Bias::~Bias() {
  // @@protoc_insertion_point(destructor:IBUS.Bias)
  SharedDtor();
}

void Bias::SharedDtor() {
  if (this != internal_default_instance()) delete linearaccelerationbias_;
  if (this != internal_default_instance()) delete angularvelocitybias_;
}

void Bias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bias& Bias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bias_LocationInterface_2eproto.base);
  return *internal_default_instance();
}


void Bias::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.Bias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArenaNoVirtual() == nullptr && linearaccelerationbias_ != nullptr) {
    delete linearaccelerationbias_;
  }
  linearaccelerationbias_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angularvelocitybias_ != nullptr) {
    delete angularvelocitybias_;
  }
  angularvelocitybias_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Bias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Point3D LinearAccelerationBias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_linearaccelerationbias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Point3D AngularVelocityBias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_angularvelocitybias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double Covariance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Bias::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.Bias)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Point3D LinearAccelerationBias = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_linearaccelerationbias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Point3D AngularVelocityBias = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angularvelocitybias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double Covariance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_covariance())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.Bias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.Bias)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Bias::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.Bias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Point3D LinearAccelerationBias = 1;
  if (this->has_linearaccelerationbias()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::linearaccelerationbias(this), output);
  }

  // .IBUS.Point3D AngularVelocityBias = 2;
  if (this->has_angularvelocitybias()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::angularvelocitybias(this), output);
  }

  // repeated double Covariance = 3;
  if (this->covariance_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_covariance_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->covariance().data(), this->covariance_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.Bias)
}

::PROTOBUF_NAMESPACE_ID::uint8* Bias::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.Bias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Point3D LinearAccelerationBias = 1;
  if (this->has_linearaccelerationbias()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::linearaccelerationbias(this), target);
  }

  // .IBUS.Point3D AngularVelocityBias = 2;
  if (this->has_angularvelocitybias()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::angularvelocitybias(this), target);
  }

  // repeated double Covariance = 3;
  if (this->covariance_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _covariance_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->covariance_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.Bias)
  return target;
}

size_t Bias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.Bias)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double Covariance = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IBUS.Point3D LinearAccelerationBias = 1;
  if (this->has_linearaccelerationbias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linearaccelerationbias_);
  }

  // .IBUS.Point3D AngularVelocityBias = 2;
  if (this->has_angularvelocitybias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angularvelocitybias_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.Bias)
  GOOGLE_DCHECK_NE(&from, this);
  const Bias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.Bias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.Bias)
    MergeFrom(*source);
  }
}

void Bias::MergeFrom(const Bias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.Bias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_linearaccelerationbias()) {
    mutable_linearaccelerationbias()->::IBUS::Point3D::MergeFrom(from.linearaccelerationbias());
  }
  if (from.has_angularvelocitybias()) {
    mutable_angularvelocitybias()->::IBUS::Point3D::MergeFrom(from.angularvelocitybias());
  }
}

void Bias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.Bias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bias::CopyFrom(const Bias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.Bias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bias::IsInitialized() const {
  return true;
}

void Bias::InternalSwap(Bias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  swap(linearaccelerationbias_, other->linearaccelerationbias_);
  swap(angularvelocitybias_, other->angularvelocitybias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationService::InitAsDefaultInstance() {
  ::IBUS::_LocationService_default_instance_._instance.get_mutable()->header_ = const_cast< ::IBUS::Header*>(
      ::IBUS::Header::internal_default_instance());
  ::IBUS::_LocationService_default_instance_._instance.get_mutable()->refpoint_ = const_cast< ::IBUS::Point3D*>(
      ::IBUS::Point3D::internal_default_instance());
  ::IBUS::_LocationService_default_instance_._instance.get_mutable()->pose_ = const_cast< ::IBUS::Pose*>(
      ::IBUS::Pose::internal_default_instance());
  ::IBUS::_LocationService_default_instance_._instance.get_mutable()->vel_ = const_cast< ::IBUS::Velocity*>(
      ::IBUS::Velocity::internal_default_instance());
  ::IBUS::_LocationService_default_instance_._instance.get_mutable()->acc_ = const_cast< ::IBUS::Acceleration*>(
      ::IBUS::Acceleration::internal_default_instance());
  ::IBUS::_LocationService_default_instance_._instance.get_mutable()->imub_ = const_cast< ::IBUS::Bias*>(
      ::IBUS::Bias::internal_default_instance());
  ::IBUS::_LocationService_default_instance_._instance.get_mutable()->rpy_ = const_cast< ::IBUS::RPY*>(
      ::IBUS::RPY::internal_default_instance());
}
class LocationService::_Internal {
 public:
  static const ::IBUS::Header& header(const LocationService* msg);
  static const ::IBUS::Point3D& refpoint(const LocationService* msg);
  static const ::IBUS::Pose& pose(const LocationService* msg);
  static const ::IBUS::Velocity& vel(const LocationService* msg);
  static const ::IBUS::Acceleration& acc(const LocationService* msg);
  static const ::IBUS::Bias& imub(const LocationService* msg);
  static const ::IBUS::RPY& rpy(const LocationService* msg);
};

const ::IBUS::Header&
LocationService::_Internal::header(const LocationService* msg) {
  return *msg->header_;
}
const ::IBUS::Point3D&
LocationService::_Internal::refpoint(const LocationService* msg) {
  return *msg->refpoint_;
}
const ::IBUS::Pose&
LocationService::_Internal::pose(const LocationService* msg) {
  return *msg->pose_;
}
const ::IBUS::Velocity&
LocationService::_Internal::vel(const LocationService* msg) {
  return *msg->vel_;
}
const ::IBUS::Acceleration&
LocationService::_Internal::acc(const LocationService* msg) {
  return *msg->acc_;
}
const ::IBUS::Bias&
LocationService::_Internal::imub(const LocationService* msg) {
  return *msg->imub_;
}
const ::IBUS::RPY&
LocationService::_Internal::rpy(const LocationService* msg) {
  return *msg->rpy_;
}
void LocationService::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void LocationService::clear_refpoint() {
  if (GetArenaNoVirtual() == nullptr && refpoint_ != nullptr) {
    delete refpoint_;
  }
  refpoint_ = nullptr;
}
void LocationService::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void LocationService::clear_vel() {
  if (GetArenaNoVirtual() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
}
void LocationService::clear_acc() {
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
}
LocationService::LocationService()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.LocationService)
}
LocationService::LocationService(const LocationService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::IBUS::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_refpoint()) {
    refpoint_ = new ::IBUS::Point3D(*from.refpoint_);
  } else {
    refpoint_ = nullptr;
  }
  if (from.has_pose()) {
    pose_ = new ::IBUS::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from.has_vel()) {
    vel_ = new ::IBUS::Velocity(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  if (from.has_acc()) {
    acc_ = new ::IBUS::Acceleration(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  if (from.has_imub()) {
    imub_ = new ::IBUS::Bias(*from.imub_);
  } else {
    imub_ = nullptr;
  }
  if (from.has_rpy()) {
    rpy_ = new ::IBUS::RPY(*from.rpy_);
  } else {
    rpy_ = nullptr;
  }
  ::memcpy(&parentcoordinate_, &from.parentcoordinate_,
    static_cast<size_t>(reinterpret_cast<char*>(&offsety_) -
    reinterpret_cast<char*>(&parentcoordinate_)) + sizeof(offsety_));
  // @@protoc_insertion_point(copy_constructor:IBUS.LocationService)
}

void LocationService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationService_LocationInterface_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsety_) -
      reinterpret_cast<char*>(&header_)) + sizeof(offsety_));
}

LocationService::~LocationService() {
  // @@protoc_insertion_point(destructor:IBUS.LocationService)
  SharedDtor();
}

void LocationService::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete refpoint_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete imub_;
  if (this != internal_default_instance()) delete rpy_;
}

void LocationService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationService& LocationService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationService_LocationInterface_2eproto.base);
  return *internal_default_instance();
}


void LocationService::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.LocationService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && refpoint_ != nullptr) {
    delete refpoint_;
  }
  refpoint_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imub_ != nullptr) {
    delete imub_;
  }
  imub_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rpy_ != nullptr) {
    delete rpy_;
  }
  rpy_ = nullptr;
  ::memset(&parentcoordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsety_) -
      reinterpret_cast<char*>(&parentcoordinate_)) + sizeof(offsety_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocationService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.FRAMETYPE ParentCoordinate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_parentcoordinate(static_cast<::IBUS::FRAMETYPE>(val));
        } else goto handle_unusual;
        continue;
      // .IBUS.FRAMETYPE ChildCoordinate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_childcoordinate(static_cast<::IBUS::FRAMETYPE>(val));
        } else goto handle_unusual;
        continue;
      // .IBUS.LocationService.pStatus PositionStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_positionstatus(static_cast<::IBUS::LocationService_pStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint32 UTMZoneID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          utmzoneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsSouth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          issouth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 OffsetX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          offsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 OffsetY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          offsety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Point3D RefPoint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_refpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Pose pose = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Velocity Vel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Acceleration acc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.Bias imub = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_imub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IBUS.RPY rpy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_rpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocationService::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.LocationService)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.FRAMETYPE ParentCoordinate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parentcoordinate(static_cast< ::IBUS::FRAMETYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.FRAMETYPE ChildCoordinate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_childcoordinate(static_cast< ::IBUS::FRAMETYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.LocationService.pStatus PositionStatus = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_positionstatus(static_cast< ::IBUS::LocationService_pStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UTMZoneID = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utmzoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsSouth = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issouth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OffsetX = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offsetx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OffsetY = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offsety_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Point3D RefPoint = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_refpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Pose pose = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Velocity Vel = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Acceleration acc = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.Bias imub = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IBUS.RPY rpy = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.LocationService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.LocationService)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocationService::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.LocationService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .IBUS.FRAMETYPE ParentCoordinate = 2;
  if (this->parentcoordinate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->parentcoordinate(), output);
  }

  // .IBUS.FRAMETYPE ChildCoordinate = 3;
  if (this->childcoordinate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->childcoordinate(), output);
  }

  // .IBUS.LocationService.pStatus PositionStatus = 4;
  if (this->positionstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->positionstatus(), output);
  }

  // uint32 UTMZoneID = 5;
  if (this->utmzoneid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->utmzoneid(), output);
  }

  // bool IsSouth = 6;
  if (this->issouth() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->issouth(), output);
  }

  // uint32 OffsetX = 7;
  if (this->offsetx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->offsetx(), output);
  }

  // uint32 OffsetY = 8;
  if (this->offsety() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->offsety(), output);
  }

  // .IBUS.Point3D RefPoint = 9;
  if (this->has_refpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::refpoint(this), output);
  }

  // .IBUS.Pose pose = 10;
  if (this->has_pose()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::pose(this), output);
  }

  // .IBUS.Velocity Vel = 11;
  if (this->has_vel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::vel(this), output);
  }

  // .IBUS.Acceleration acc = 12;
  if (this->has_acc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::acc(this), output);
  }

  // .IBUS.Bias imub = 13;
  if (this->has_imub()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::imub(this), output);
  }

  // .IBUS.RPY rpy = 14;
  if (this->has_rpy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::rpy(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.LocationService)
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationService::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.LocationService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .IBUS.FRAMETYPE ParentCoordinate = 2;
  if (this->parentcoordinate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->parentcoordinate(), target);
  }

  // .IBUS.FRAMETYPE ChildCoordinate = 3;
  if (this->childcoordinate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->childcoordinate(), target);
  }

  // .IBUS.LocationService.pStatus PositionStatus = 4;
  if (this->positionstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->positionstatus(), target);
  }

  // uint32 UTMZoneID = 5;
  if (this->utmzoneid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->utmzoneid(), target);
  }

  // bool IsSouth = 6;
  if (this->issouth() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->issouth(), target);
  }

  // uint32 OffsetX = 7;
  if (this->offsetx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->offsetx(), target);
  }

  // uint32 OffsetY = 8;
  if (this->offsety() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->offsety(), target);
  }

  // .IBUS.Point3D RefPoint = 9;
  if (this->has_refpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::refpoint(this), target);
  }

  // .IBUS.Pose pose = 10;
  if (this->has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::pose(this), target);
  }

  // .IBUS.Velocity Vel = 11;
  if (this->has_vel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::vel(this), target);
  }

  // .IBUS.Acceleration acc = 12;
  if (this->has_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::acc(this), target);
  }

  // .IBUS.Bias imub = 13;
  if (this->has_imub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::imub(this), target);
  }

  // .IBUS.RPY rpy = 14;
  if (this->has_rpy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::rpy(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.LocationService)
  return target;
}

size_t LocationService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.LocationService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .IBUS.Point3D RefPoint = 9;
  if (this->has_refpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *refpoint_);
  }

  // .IBUS.Pose pose = 10;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .IBUS.Velocity Vel = 11;
  if (this->has_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  // .IBUS.Acceleration acc = 12;
  if (this->has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  // .IBUS.Bias imub = 13;
  if (this->has_imub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imub_);
  }

  // .IBUS.RPY rpy = 14;
  if (this->has_rpy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rpy_);
  }

  // .IBUS.FRAMETYPE ParentCoordinate = 2;
  if (this->parentcoordinate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->parentcoordinate());
  }

  // .IBUS.FRAMETYPE ChildCoordinate = 3;
  if (this->childcoordinate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->childcoordinate());
  }

  // .IBUS.LocationService.pStatus PositionStatus = 4;
  if (this->positionstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->positionstatus());
  }

  // uint32 UTMZoneID = 5;
  if (this->utmzoneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->utmzoneid());
  }

  // bool IsSouth = 6;
  if (this->issouth() != 0) {
    total_size += 1 + 1;
  }

  // uint32 OffsetX = 7;
  if (this->offsetx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->offsetx());
  }

  // uint32 OffsetY = 8;
  if (this->offsety() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->offsety());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.LocationService)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.LocationService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.LocationService)
    MergeFrom(*source);
  }
}

void LocationService::MergeFrom(const LocationService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.LocationService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::IBUS::Header::MergeFrom(from.header());
  }
  if (from.has_refpoint()) {
    mutable_refpoint()->::IBUS::Point3D::MergeFrom(from.refpoint());
  }
  if (from.has_pose()) {
    mutable_pose()->::IBUS::Pose::MergeFrom(from.pose());
  }
  if (from.has_vel()) {
    mutable_vel()->::IBUS::Velocity::MergeFrom(from.vel());
  }
  if (from.has_acc()) {
    mutable_acc()->::IBUS::Acceleration::MergeFrom(from.acc());
  }
  if (from.has_imub()) {
    mutable_imub()->::IBUS::Bias::MergeFrom(from.imub());
  }
  if (from.has_rpy()) {
    mutable_rpy()->::IBUS::RPY::MergeFrom(from.rpy());
  }
  if (from.parentcoordinate() != 0) {
    set_parentcoordinate(from.parentcoordinate());
  }
  if (from.childcoordinate() != 0) {
    set_childcoordinate(from.childcoordinate());
  }
  if (from.positionstatus() != 0) {
    set_positionstatus(from.positionstatus());
  }
  if (from.utmzoneid() != 0) {
    set_utmzoneid(from.utmzoneid());
  }
  if (from.issouth() != 0) {
    set_issouth(from.issouth());
  }
  if (from.offsetx() != 0) {
    set_offsetx(from.offsetx());
  }
  if (from.offsety() != 0) {
    set_offsety(from.offsety());
  }
}

void LocationService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.LocationService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationService::CopyFrom(const LocationService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.LocationService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationService::IsInitialized() const {
  return true;
}

void LocationService::InternalSwap(LocationService* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(refpoint_, other->refpoint_);
  swap(pose_, other->pose_);
  swap(vel_, other->vel_);
  swap(acc_, other->acc_);
  swap(imub_, other->imub_);
  swap(rpy_, other->rpy_);
  swap(parentcoordinate_, other->parentcoordinate_);
  swap(childcoordinate_, other->childcoordinate_);
  swap(positionstatus_, other->positionstatus_);
  swap(utmzoneid_, other->utmzoneid_);
  swap(issouth_, other->issouth_);
  swap(offsetx_, other->offsetx_);
  swap(offsety_, other->offsety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationService::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IBUS::RPY* Arena::CreateMaybeMessage< ::IBUS::RPY >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::RPY >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::Bias* Arena::CreateMaybeMessage< ::IBUS::Bias >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::Bias >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::LocationService* Arena::CreateMaybeMessage< ::IBUS::LocationService >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::LocationService >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
