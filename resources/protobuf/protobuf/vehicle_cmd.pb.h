// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fcmd_2eproto;
namespace IBUS {
class VehicleCmd;
class VehicleCmdDefaultTypeInternal;
extern VehicleCmdDefaultTypeInternal _VehicleCmd_default_instance_;
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> ::IBUS::VehicleCmd* Arena::CreateMaybeMessage<::IBUS::VehicleCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IBUS {

// ===================================================================

class VehicleCmd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.VehicleCmd) */ {
 public:
  VehicleCmd();
  virtual ~VehicleCmd();

  VehicleCmd(const VehicleCmd& from);
  VehicleCmd(VehicleCmd&& from) noexcept
    : VehicleCmd() {
    *this = ::std::move(from);
  }

  inline VehicleCmd& operator=(const VehicleCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleCmd& operator=(VehicleCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleCmd* internal_default_instance() {
    return reinterpret_cast<const VehicleCmd*>(
               &_VehicleCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleCmd& a, VehicleCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleCmd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleCmd* New() const final {
    return CreateMaybeMessage<VehicleCmd>(nullptr);
  }

  VehicleCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleCmd& from);
  void MergeFrom(const VehicleCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.VehicleCmd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fcmd_2eproto);
    return ::descriptor_table_vehicle_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kControlSrcIdFieldNumber = 2,
    kCurrentSrcIdFieldNumber = 3,
    kAutoModeFieldNumber = 4,
    kSteeringWheelModeFieldNumber = 5,
    kSteeringWheelAngleFieldNumber = 6,
    kSteeringWheelSpeedFieldNumber = 7,
    kThrottleOpeningFieldNumber = 9,
    kDriveActivationFlagFieldNumber = 8,
    kBrakingStatusFlagFieldNumber = 10,
    kBrakingDecelerationFieldNumber = 11,
    kBreakPedalOpeningFieldNumber = 12,
    kEmergencyStopAccFieldNumber = 14,
    kEmergencyStopFlagFieldNumber = 13,
    kEpbStatusFieldNumber = 15,
    kGearFieldNumber = 16,
  };
  // .IBUS.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::IBUS::Header& header() const;
  ::IBUS::Header* release_header();
  ::IBUS::Header* mutable_header();
  void set_allocated_header(::IBUS::Header* header);

  // uint32 controlSrcId = 2;
  void clear_controlsrcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 controlsrcid() const;
  void set_controlsrcid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 currentSrcId = 3;
  void clear_currentsrcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 currentsrcid() const;
  void set_currentsrcid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 autoMode = 4;
  void clear_automode();
  ::PROTOBUF_NAMESPACE_ID::uint32 automode() const;
  void set_automode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 steeringWheelMode = 5;
  void clear_steeringwheelmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 steeringwheelmode() const;
  void set_steeringwheelmode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double steeringWheelAngle = 6;
  void clear_steeringwheelangle();
  double steeringwheelangle() const;
  void set_steeringwheelangle(double value);

  // double steeringWheelSpeed = 7;
  void clear_steeringwheelspeed();
  double steeringwheelspeed() const;
  void set_steeringwheelspeed(double value);

  // double throttleOpening = 9;
  void clear_throttleopening();
  double throttleopening() const;
  void set_throttleopening(double value);

  // uint32 driveActivationFlag = 8;
  void clear_driveactivationflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 driveactivationflag() const;
  void set_driveactivationflag(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 brakingStatusFlag = 10;
  void clear_brakingstatusflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 brakingstatusflag() const;
  void set_brakingstatusflag(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double brakingDeceleration = 11;
  void clear_brakingdeceleration();
  double brakingdeceleration() const;
  void set_brakingdeceleration(double value);

  // double breakPedalOpening = 12;
  void clear_breakpedalopening();
  double breakpedalopening() const;
  void set_breakpedalopening(double value);

  // double emergencyStopAcc = 14;
  void clear_emergencystopacc();
  double emergencystopacc() const;
  void set_emergencystopacc(double value);

  // uint32 emergencyStopFlag = 13;
  void clear_emergencystopflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 emergencystopflag() const;
  void set_emergencystopflag(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 epbStatus = 15;
  void clear_epbstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 epbstatus() const;
  void set_epbstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 gear = 16;
  void clear_gear();
  ::PROTOBUF_NAMESPACE_ID::uint32 gear() const;
  void set_gear(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IBUS.VehicleCmd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::IBUS::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlsrcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 currentsrcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 automode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 steeringwheelmode_;
  double steeringwheelangle_;
  double steeringwheelspeed_;
  double throttleopening_;
  ::PROTOBUF_NAMESPACE_ID::uint32 driveactivationflag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 brakingstatusflag_;
  double brakingdeceleration_;
  double breakpedalopening_;
  double emergencystopacc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 emergencystopflag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epbstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleCmd

// .IBUS.Header header = 1;
inline bool VehicleCmd::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::IBUS::Header& VehicleCmd::header() const {
  const ::IBUS::Header* p = header_;
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Header*>(
      &::IBUS::_Header_default_instance_);
}
inline ::IBUS::Header* VehicleCmd::release_header() {
  // @@protoc_insertion_point(field_release:IBUS.VehicleCmd.header)
  
  ::IBUS::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::IBUS::Header* VehicleCmd::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.VehicleCmd.header)
  return header_;
}
inline void VehicleCmd::set_allocated_header(::IBUS::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:IBUS.VehicleCmd.header)
}

// uint32 controlSrcId = 2;
inline void VehicleCmd::clear_controlsrcid() {
  controlsrcid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::controlsrcid() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.controlSrcId)
  return controlsrcid_;
}
inline void VehicleCmd::set_controlsrcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  controlsrcid_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.controlSrcId)
}

// uint32 currentSrcId = 3;
inline void VehicleCmd::clear_currentsrcid() {
  currentsrcid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::currentsrcid() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.currentSrcId)
  return currentsrcid_;
}
inline void VehicleCmd::set_currentsrcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  currentsrcid_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.currentSrcId)
}

// uint32 autoMode = 4;
inline void VehicleCmd::clear_automode() {
  automode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::automode() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.autoMode)
  return automode_;
}
inline void VehicleCmd::set_automode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  automode_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.autoMode)
}

// uint32 steeringWheelMode = 5;
inline void VehicleCmd::clear_steeringwheelmode() {
  steeringwheelmode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::steeringwheelmode() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.steeringWheelMode)
  return steeringwheelmode_;
}
inline void VehicleCmd::set_steeringwheelmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  steeringwheelmode_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.steeringWheelMode)
}

// double steeringWheelAngle = 6;
inline void VehicleCmd::clear_steeringwheelangle() {
  steeringwheelangle_ = 0;
}
inline double VehicleCmd::steeringwheelangle() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.steeringWheelAngle)
  return steeringwheelangle_;
}
inline void VehicleCmd::set_steeringwheelangle(double value) {
  
  steeringwheelangle_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.steeringWheelAngle)
}

// double steeringWheelSpeed = 7;
inline void VehicleCmd::clear_steeringwheelspeed() {
  steeringwheelspeed_ = 0;
}
inline double VehicleCmd::steeringwheelspeed() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.steeringWheelSpeed)
  return steeringwheelspeed_;
}
inline void VehicleCmd::set_steeringwheelspeed(double value) {
  
  steeringwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.steeringWheelSpeed)
}

// uint32 driveActivationFlag = 8;
inline void VehicleCmd::clear_driveactivationflag() {
  driveactivationflag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::driveactivationflag() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.driveActivationFlag)
  return driveactivationflag_;
}
inline void VehicleCmd::set_driveactivationflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  driveactivationflag_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.driveActivationFlag)
}

// double throttleOpening = 9;
inline void VehicleCmd::clear_throttleopening() {
  throttleopening_ = 0;
}
inline double VehicleCmd::throttleopening() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.throttleOpening)
  return throttleopening_;
}
inline void VehicleCmd::set_throttleopening(double value) {
  
  throttleopening_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.throttleOpening)
}

// uint32 brakingStatusFlag = 10;
inline void VehicleCmd::clear_brakingstatusflag() {
  brakingstatusflag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::brakingstatusflag() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.brakingStatusFlag)
  return brakingstatusflag_;
}
inline void VehicleCmd::set_brakingstatusflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  brakingstatusflag_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.brakingStatusFlag)
}

// double brakingDeceleration = 11;
inline void VehicleCmd::clear_brakingdeceleration() {
  brakingdeceleration_ = 0;
}
inline double VehicleCmd::brakingdeceleration() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.brakingDeceleration)
  return brakingdeceleration_;
}
inline void VehicleCmd::set_brakingdeceleration(double value) {
  
  brakingdeceleration_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.brakingDeceleration)
}

// double breakPedalOpening = 12;
inline void VehicleCmd::clear_breakpedalopening() {
  breakpedalopening_ = 0;
}
inline double VehicleCmd::breakpedalopening() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.breakPedalOpening)
  return breakpedalopening_;
}
inline void VehicleCmd::set_breakpedalopening(double value) {
  
  breakpedalopening_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.breakPedalOpening)
}

// uint32 emergencyStopFlag = 13;
inline void VehicleCmd::clear_emergencystopflag() {
  emergencystopflag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::emergencystopflag() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.emergencyStopFlag)
  return emergencystopflag_;
}
inline void VehicleCmd::set_emergencystopflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  emergencystopflag_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.emergencyStopFlag)
}

// double emergencyStopAcc = 14;
inline void VehicleCmd::clear_emergencystopacc() {
  emergencystopacc_ = 0;
}
inline double VehicleCmd::emergencystopacc() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.emergencyStopAcc)
  return emergencystopacc_;
}
inline void VehicleCmd::set_emergencystopacc(double value) {
  
  emergencystopacc_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.emergencyStopAcc)
}

// uint32 epbStatus = 15;
inline void VehicleCmd::clear_epbstatus() {
  epbstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::epbstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.epbStatus)
  return epbstatus_;
}
inline void VehicleCmd::set_epbstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epbstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.epbStatus)
}

// uint32 gear = 16;
inline void VehicleCmd::clear_gear() {
  gear_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleCmd::gear() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleCmd.gear)
  return gear_;
}
inline void VehicleCmd::set_gear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleCmd.gear)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace IBUS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_5fcmd_2eproto
