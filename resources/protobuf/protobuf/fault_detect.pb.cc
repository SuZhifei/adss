// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fault_detect.proto

#include "fault_detect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fault_5fdetect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaultDetectInfo_fault_5fdetect_2eproto;
namespace IBUS {
class FaultDetectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaultDetectInfo> _instance;
} _FaultDetectInfo_default_instance_;
class FaultDetectMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaultDetectMsg> _instance;
} _FaultDetectMsg_default_instance_;
}  // namespace IBUS
static void InitDefaultsscc_info_FaultDetectInfo_fault_5fdetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_FaultDetectInfo_default_instance_;
    new (ptr) ::IBUS::FaultDetectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::FaultDetectInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaultDetectInfo_fault_5fdetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaultDetectInfo_fault_5fdetect_2eproto}, {}};

static void InitDefaultsscc_info_FaultDetectMsg_fault_5fdetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_FaultDetectMsg_default_instance_;
    new (ptr) ::IBUS::FaultDetectMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::FaultDetectMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaultDetectMsg_fault_5fdetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaultDetectMsg_fault_5fdetect_2eproto}, {
      &scc_info_FaultDetectInfo_fault_5fdetect_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fault_5fdetect_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fault_5fdetect_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fault_5fdetect_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fault_5fdetect_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultDetectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultDetectInfo, sub_system_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultDetectInfo, fault_level_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultDetectInfo, dtc_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultDetectInfo, fault_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultDetectMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultDetectMsg, moudle_id_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultDetectMsg, detect_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IBUS::FaultDetectInfo)},
  { 9, -1, sizeof(::IBUS::FaultDetectMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_FaultDetectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_FaultDetectMsg_default_instance_),
};

const char descriptor_table_protodef_fault_5fdetect_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022fault_detect.proto\022\004IBUS\"Y\n\017FaultDetec"
  "tInfo\022\022\n\nsub_system\030\001 \001(\r\022\023\n\013fault_level"
  "\030\002 \001(\r\022\013\n\003dtc\030\003 \001(\r\022\020\n\010fault_id\030\004 \001(\r\"O\n"
  "\016FaultDetectMsg\022\021\n\tmoudle_id\030\001 \001(\r\022*\n\013de"
  "tect_info\030\002 \003(\0132\025.IBUS.FaultDetectInfob\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fault_5fdetect_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fault_5fdetect_2eproto_sccs[2] = {
  &scc_info_FaultDetectInfo_fault_5fdetect_2eproto.base,
  &scc_info_FaultDetectMsg_fault_5fdetect_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fault_5fdetect_2eproto_once;
static bool descriptor_table_fault_5fdetect_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fault_5fdetect_2eproto = {
  &descriptor_table_fault_5fdetect_2eproto_initialized, descriptor_table_protodef_fault_5fdetect_2eproto, "fault_detect.proto", 206,
  &descriptor_table_fault_5fdetect_2eproto_once, descriptor_table_fault_5fdetect_2eproto_sccs, descriptor_table_fault_5fdetect_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_fault_5fdetect_2eproto::offsets,
  file_level_metadata_fault_5fdetect_2eproto, 2, file_level_enum_descriptors_fault_5fdetect_2eproto, file_level_service_descriptors_fault_5fdetect_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fault_5fdetect_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fault_5fdetect_2eproto), true);
namespace IBUS {

// ===================================================================

void FaultDetectInfo::InitAsDefaultInstance() {
}
class FaultDetectInfo::_Internal {
 public:
};

FaultDetectInfo::FaultDetectInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.FaultDetectInfo)
}
FaultDetectInfo::FaultDetectInfo(const FaultDetectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sub_system_, &from.sub_system_,
    static_cast<size_t>(reinterpret_cast<char*>(&fault_id_) -
    reinterpret_cast<char*>(&sub_system_)) + sizeof(fault_id_));
  // @@protoc_insertion_point(copy_constructor:IBUS.FaultDetectInfo)
}

void FaultDetectInfo::SharedCtor() {
  ::memset(&sub_system_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_id_) -
      reinterpret_cast<char*>(&sub_system_)) + sizeof(fault_id_));
}

FaultDetectInfo::~FaultDetectInfo() {
  // @@protoc_insertion_point(destructor:IBUS.FaultDetectInfo)
  SharedDtor();
}

void FaultDetectInfo::SharedDtor() {
}

void FaultDetectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaultDetectInfo& FaultDetectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaultDetectInfo_fault_5fdetect_2eproto.base);
  return *internal_default_instance();
}


void FaultDetectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.FaultDetectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sub_system_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_id_) -
      reinterpret_cast<char*>(&sub_system_)) + sizeof(fault_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaultDetectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sub_system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sub_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fault_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fault_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dtc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fault_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fault_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaultDetectInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.FaultDetectInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sub_system = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_system_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fault_level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fault_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dtc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dtc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fault_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fault_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.FaultDetectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.FaultDetectInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaultDetectInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.FaultDetectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_system = 1;
  if (this->sub_system() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->sub_system(), output);
  }

  // uint32 fault_level = 2;
  if (this->fault_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->fault_level(), output);
  }

  // uint32 dtc = 3;
  if (this->dtc() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->dtc(), output);
  }

  // uint32 fault_id = 4;
  if (this->fault_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->fault_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.FaultDetectInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaultDetectInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.FaultDetectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_system = 1;
  if (this->sub_system() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->sub_system(), target);
  }

  // uint32 fault_level = 2;
  if (this->fault_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->fault_level(), target);
  }

  // uint32 dtc = 3;
  if (this->dtc() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->dtc(), target);
  }

  // uint32 fault_id = 4;
  if (this->fault_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->fault_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.FaultDetectInfo)
  return target;
}

size_t FaultDetectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.FaultDetectInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sub_system = 1;
  if (this->sub_system() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sub_system());
  }

  // uint32 fault_level = 2;
  if (this->fault_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->fault_level());
  }

  // uint32 dtc = 3;
  if (this->dtc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->dtc());
  }

  // uint32 fault_id = 4;
  if (this->fault_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->fault_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaultDetectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.FaultDetectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultDetectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaultDetectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.FaultDetectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.FaultDetectInfo)
    MergeFrom(*source);
  }
}

void FaultDetectInfo::MergeFrom(const FaultDetectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.FaultDetectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sub_system() != 0) {
    set_sub_system(from.sub_system());
  }
  if (from.fault_level() != 0) {
    set_fault_level(from.fault_level());
  }
  if (from.dtc() != 0) {
    set_dtc(from.dtc());
  }
  if (from.fault_id() != 0) {
    set_fault_id(from.fault_id());
  }
}

void FaultDetectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.FaultDetectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultDetectInfo::CopyFrom(const FaultDetectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.FaultDetectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultDetectInfo::IsInitialized() const {
  return true;
}

void FaultDetectInfo::InternalSwap(FaultDetectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sub_system_, other->sub_system_);
  swap(fault_level_, other->fault_level_);
  swap(dtc_, other->dtc_);
  swap(fault_id_, other->fault_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaultDetectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaultDetectMsg::InitAsDefaultInstance() {
}
class FaultDetectMsg::_Internal {
 public:
};

FaultDetectMsg::FaultDetectMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.FaultDetectMsg)
}
FaultDetectMsg::FaultDetectMsg(const FaultDetectMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      detect_info_(from.detect_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moudle_id_ = from.moudle_id_;
  // @@protoc_insertion_point(copy_constructor:IBUS.FaultDetectMsg)
}

void FaultDetectMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaultDetectMsg_fault_5fdetect_2eproto.base);
  moudle_id_ = 0u;
}

FaultDetectMsg::~FaultDetectMsg() {
  // @@protoc_insertion_point(destructor:IBUS.FaultDetectMsg)
  SharedDtor();
}

void FaultDetectMsg::SharedDtor() {
}

void FaultDetectMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaultDetectMsg& FaultDetectMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaultDetectMsg_fault_5fdetect_2eproto.base);
  return *internal_default_instance();
}


void FaultDetectMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.FaultDetectMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detect_info_.Clear();
  moudle_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaultDetectMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 moudle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          moudle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IBUS.FaultDetectInfo detect_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detect_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaultDetectMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.FaultDetectMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 moudle_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moudle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IBUS.FaultDetectInfo detect_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detect_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.FaultDetectMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.FaultDetectMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaultDetectMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.FaultDetectMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 moudle_id = 1;
  if (this->moudle_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->moudle_id(), output);
  }

  // repeated .IBUS.FaultDetectInfo detect_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detect_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detect_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.FaultDetectMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaultDetectMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.FaultDetectMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 moudle_id = 1;
  if (this->moudle_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->moudle_id(), target);
  }

  // repeated .IBUS.FaultDetectInfo detect_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detect_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detect_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.FaultDetectMsg)
  return target;
}

size_t FaultDetectMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.FaultDetectMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IBUS.FaultDetectInfo detect_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detect_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detect_info(static_cast<int>(i)));
    }
  }

  // uint32 moudle_id = 1;
  if (this->moudle_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->moudle_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaultDetectMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.FaultDetectMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultDetectMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaultDetectMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.FaultDetectMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.FaultDetectMsg)
    MergeFrom(*source);
  }
}

void FaultDetectMsg::MergeFrom(const FaultDetectMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.FaultDetectMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detect_info_.MergeFrom(from.detect_info_);
  if (from.moudle_id() != 0) {
    set_moudle_id(from.moudle_id());
  }
}

void FaultDetectMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.FaultDetectMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultDetectMsg::CopyFrom(const FaultDetectMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.FaultDetectMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultDetectMsg::IsInitialized() const {
  return true;
}

void FaultDetectMsg::InternalSwap(FaultDetectMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&detect_info_)->InternalSwap(CastToBase(&other->detect_info_));
  swap(moudle_id_, other->moudle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaultDetectMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IBUS::FaultDetectInfo* Arena::CreateMaybeMessage< ::IBUS::FaultDetectInfo >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::FaultDetectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::FaultDetectMsg* Arena::CreateMaybeMessage< ::IBUS::FaultDetectMsg >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::FaultDetectMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
