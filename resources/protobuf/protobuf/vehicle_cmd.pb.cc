// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_cmd.proto

#include "vehicle_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Header_common_2eproto;
namespace IBUS {
class VehicleCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleCmd> _instance;
} _VehicleCmd_default_instance_;
}  // namespace IBUS
static void InitDefaultsscc_info_VehicleCmd_vehicle_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_VehicleCmd_default_instance_;
    new (ptr) ::IBUS::VehicleCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::VehicleCmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleCmd_vehicle_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VehicleCmd_vehicle_5fcmd_2eproto}, {
      &scc_info_Header_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5fcmd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vehicle_5fcmd_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, header_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, controlsrcid_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, currentsrcid_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, automode_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, steeringwheelmode_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, steeringwheelangle_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, steeringwheelspeed_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, driveactivationflag_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, throttleopening_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, brakingstatusflag_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, brakingdeceleration_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, breakpedalopening_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, emergencystopflag_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, emergencystopacc_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, epbstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleCmd, gear_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IBUS::VehicleCmd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_VehicleCmd_default_instance_),
};

const char descriptor_table_protodef_vehicle_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021vehicle_cmd.proto\022\004IBUS\032\014common.proto\""
  "\232\003\n\nVehicleCmd\022\034\n\006header\030\001 \001(\0132\014.IBUS.He"
  "ader\022\024\n\014controlSrcId\030\002 \001(\r\022\024\n\014currentSrc"
  "Id\030\003 \001(\r\022\020\n\010autoMode\030\004 \001(\r\022\031\n\021steeringWh"
  "eelMode\030\005 \001(\r\022\032\n\022steeringWheelAngle\030\006 \001("
  "\001\022\032\n\022steeringWheelSpeed\030\007 \001(\001\022\033\n\023driveAc"
  "tivationFlag\030\010 \001(\r\022\027\n\017throttleOpening\030\t "
  "\001(\001\022\031\n\021brakingStatusFlag\030\n \001(\r\022\033\n\023brakin"
  "gDeceleration\030\013 \001(\001\022\031\n\021breakPedalOpening"
  "\030\014 \001(\001\022\031\n\021emergencyStopFlag\030\r \001(\r\022\030\n\020eme"
  "rgencyStopAcc\030\016 \001(\001\022\021\n\tepbStatus\030\017 \001(\r\022\014"
  "\n\004gear\030\020 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5fcmd_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5fcmd_2eproto_sccs[1] = {
  &scc_info_VehicleCmd_vehicle_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5fcmd_2eproto_once;
static bool descriptor_table_vehicle_5fcmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fcmd_2eproto = {
  &descriptor_table_vehicle_5fcmd_2eproto_initialized, descriptor_table_protodef_vehicle_5fcmd_2eproto, "vehicle_cmd.proto", 460,
  &descriptor_table_vehicle_5fcmd_2eproto_once, descriptor_table_vehicle_5fcmd_2eproto_sccs, descriptor_table_vehicle_5fcmd_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_vehicle_5fcmd_2eproto::offsets,
  file_level_metadata_vehicle_5fcmd_2eproto, 1, file_level_enum_descriptors_vehicle_5fcmd_2eproto, file_level_service_descriptors_vehicle_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fcmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5fcmd_2eproto), true);
namespace IBUS {

// ===================================================================

void VehicleCmd::InitAsDefaultInstance() {
  ::IBUS::_VehicleCmd_default_instance_._instance.get_mutable()->header_ = const_cast< ::IBUS::Header*>(
      ::IBUS::Header::internal_default_instance());
}
class VehicleCmd::_Internal {
 public:
  static const ::IBUS::Header& header(const VehicleCmd* msg);
};

const ::IBUS::Header&
VehicleCmd::_Internal::header(const VehicleCmd* msg) {
  return *msg->header_;
}
void VehicleCmd::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VehicleCmd::VehicleCmd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.VehicleCmd)
}
VehicleCmd::VehicleCmd(const VehicleCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::IBUS::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&controlsrcid_, &from.controlsrcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_) -
    reinterpret_cast<char*>(&controlsrcid_)) + sizeof(gear_));
  // @@protoc_insertion_point(copy_constructor:IBUS.VehicleCmd)
}

void VehicleCmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleCmd_vehicle_5fcmd_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gear_));
}

VehicleCmd::~VehicleCmd() {
  // @@protoc_insertion_point(destructor:IBUS.VehicleCmd)
  SharedDtor();
}

void VehicleCmd::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void VehicleCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleCmd& VehicleCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleCmd_vehicle_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void VehicleCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.VehicleCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&controlsrcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&controlsrcid_)) + sizeof(gear_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 controlSrcId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          controlsrcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 currentSrcId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          currentsrcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 autoMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          automode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 steeringWheelMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          steeringwheelmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double steeringWheelAngle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          steeringwheelangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double steeringWheelSpeed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          steeringwheelspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 driveActivationFlag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          driveactivationflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double throttleOpening = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          throttleopening_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 brakingStatusFlag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          brakingstatusflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double brakingDeceleration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          brakingdeceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double breakPedalOpening = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          breakpedalopening_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 emergencyStopFlag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          emergencystopflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double emergencyStopAcc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          emergencystopacc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 epbStatus = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          epbstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gear = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleCmd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.VehicleCmd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controlSrcId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controlsrcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 currentSrcId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentsrcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autoMode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &automode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 steeringWheelMode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steeringwheelmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steeringWheelAngle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringwheelangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steeringWheelSpeed = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 driveActivationFlag = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &driveactivationflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttleOpening = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttleopening_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 brakingStatusFlag = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brakingstatusflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brakingDeceleration = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brakingdeceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double breakPedalOpening = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &breakpedalopening_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 emergencyStopFlag = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emergencystopflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double emergencyStopAcc = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &emergencystopacc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 epbStatus = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epbstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gear = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.VehicleCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.VehicleCmd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleCmd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.VehicleCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // uint32 controlSrcId = 2;
  if (this->controlsrcid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->controlsrcid(), output);
  }

  // uint32 currentSrcId = 3;
  if (this->currentsrcid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->currentsrcid(), output);
  }

  // uint32 autoMode = 4;
  if (this->automode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->automode(), output);
  }

  // uint32 steeringWheelMode = 5;
  if (this->steeringwheelmode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->steeringwheelmode(), output);
  }

  // double steeringWheelAngle = 6;
  if (!(this->steeringwheelangle() <= 0 && this->steeringwheelangle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->steeringwheelangle(), output);
  }

  // double steeringWheelSpeed = 7;
  if (!(this->steeringwheelspeed() <= 0 && this->steeringwheelspeed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->steeringwheelspeed(), output);
  }

  // uint32 driveActivationFlag = 8;
  if (this->driveactivationflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->driveactivationflag(), output);
  }

  // double throttleOpening = 9;
  if (!(this->throttleopening() <= 0 && this->throttleopening() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->throttleopening(), output);
  }

  // uint32 brakingStatusFlag = 10;
  if (this->brakingstatusflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->brakingstatusflag(), output);
  }

  // double brakingDeceleration = 11;
  if (!(this->brakingdeceleration() <= 0 && this->brakingdeceleration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->brakingdeceleration(), output);
  }

  // double breakPedalOpening = 12;
  if (!(this->breakpedalopening() <= 0 && this->breakpedalopening() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->breakpedalopening(), output);
  }

  // uint32 emergencyStopFlag = 13;
  if (this->emergencystopflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->emergencystopflag(), output);
  }

  // double emergencyStopAcc = 14;
  if (!(this->emergencystopacc() <= 0 && this->emergencystopacc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->emergencystopacc(), output);
  }

  // uint32 epbStatus = 15;
  if (this->epbstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->epbstatus(), output);
  }

  // uint32 gear = 16;
  if (this->gear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->gear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.VehicleCmd)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleCmd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.VehicleCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // uint32 controlSrcId = 2;
  if (this->controlsrcid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->controlsrcid(), target);
  }

  // uint32 currentSrcId = 3;
  if (this->currentsrcid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentsrcid(), target);
  }

  // uint32 autoMode = 4;
  if (this->automode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->automode(), target);
  }

  // uint32 steeringWheelMode = 5;
  if (this->steeringwheelmode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->steeringwheelmode(), target);
  }

  // double steeringWheelAngle = 6;
  if (!(this->steeringwheelangle() <= 0 && this->steeringwheelangle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->steeringwheelangle(), target);
  }

  // double steeringWheelSpeed = 7;
  if (!(this->steeringwheelspeed() <= 0 && this->steeringwheelspeed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->steeringwheelspeed(), target);
  }

  // uint32 driveActivationFlag = 8;
  if (this->driveactivationflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->driveactivationflag(), target);
  }

  // double throttleOpening = 9;
  if (!(this->throttleopening() <= 0 && this->throttleopening() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->throttleopening(), target);
  }

  // uint32 brakingStatusFlag = 10;
  if (this->brakingstatusflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->brakingstatusflag(), target);
  }

  // double brakingDeceleration = 11;
  if (!(this->brakingdeceleration() <= 0 && this->brakingdeceleration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->brakingdeceleration(), target);
  }

  // double breakPedalOpening = 12;
  if (!(this->breakpedalopening() <= 0 && this->breakpedalopening() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->breakpedalopening(), target);
  }

  // uint32 emergencyStopFlag = 13;
  if (this->emergencystopflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->emergencystopflag(), target);
  }

  // double emergencyStopAcc = 14;
  if (!(this->emergencystopacc() <= 0 && this->emergencystopacc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->emergencystopacc(), target);
  }

  // uint32 epbStatus = 15;
  if (this->epbstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->epbstatus(), target);
  }

  // uint32 gear = 16;
  if (this->gear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->gear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.VehicleCmd)
  return target;
}

size_t VehicleCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.VehicleCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 controlSrcId = 2;
  if (this->controlsrcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->controlsrcid());
  }

  // uint32 currentSrcId = 3;
  if (this->currentsrcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->currentsrcid());
  }

  // uint32 autoMode = 4;
  if (this->automode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->automode());
  }

  // uint32 steeringWheelMode = 5;
  if (this->steeringwheelmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->steeringwheelmode());
  }

  // double steeringWheelAngle = 6;
  if (!(this->steeringwheelangle() <= 0 && this->steeringwheelangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double steeringWheelSpeed = 7;
  if (!(this->steeringwheelspeed() <= 0 && this->steeringwheelspeed() >= 0)) {
    total_size += 1 + 8;
  }

  // double throttleOpening = 9;
  if (!(this->throttleopening() <= 0 && this->throttleopening() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 driveActivationFlag = 8;
  if (this->driveactivationflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->driveactivationflag());
  }

  // uint32 brakingStatusFlag = 10;
  if (this->brakingstatusflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->brakingstatusflag());
  }

  // double brakingDeceleration = 11;
  if (!(this->brakingdeceleration() <= 0 && this->brakingdeceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double breakPedalOpening = 12;
  if (!(this->breakpedalopening() <= 0 && this->breakpedalopening() >= 0)) {
    total_size += 1 + 8;
  }

  // double emergencyStopAcc = 14;
  if (!(this->emergencystopacc() <= 0 && this->emergencystopacc() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 emergencyStopFlag = 13;
  if (this->emergencystopflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->emergencystopflag());
  }

  // uint32 epbStatus = 15;
  if (this->epbstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->epbstatus());
  }

  // uint32 gear = 16;
  if (this->gear() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->gear());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.VehicleCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.VehicleCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.VehicleCmd)
    MergeFrom(*source);
  }
}

void VehicleCmd::MergeFrom(const VehicleCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.VehicleCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::IBUS::Header::MergeFrom(from.header());
  }
  if (from.controlsrcid() != 0) {
    set_controlsrcid(from.controlsrcid());
  }
  if (from.currentsrcid() != 0) {
    set_currentsrcid(from.currentsrcid());
  }
  if (from.automode() != 0) {
    set_automode(from.automode());
  }
  if (from.steeringwheelmode() != 0) {
    set_steeringwheelmode(from.steeringwheelmode());
  }
  if (!(from.steeringwheelangle() <= 0 && from.steeringwheelangle() >= 0)) {
    set_steeringwheelangle(from.steeringwheelangle());
  }
  if (!(from.steeringwheelspeed() <= 0 && from.steeringwheelspeed() >= 0)) {
    set_steeringwheelspeed(from.steeringwheelspeed());
  }
  if (!(from.throttleopening() <= 0 && from.throttleopening() >= 0)) {
    set_throttleopening(from.throttleopening());
  }
  if (from.driveactivationflag() != 0) {
    set_driveactivationflag(from.driveactivationflag());
  }
  if (from.brakingstatusflag() != 0) {
    set_brakingstatusflag(from.brakingstatusflag());
  }
  if (!(from.brakingdeceleration() <= 0 && from.brakingdeceleration() >= 0)) {
    set_brakingdeceleration(from.brakingdeceleration());
  }
  if (!(from.breakpedalopening() <= 0 && from.breakpedalopening() >= 0)) {
    set_breakpedalopening(from.breakpedalopening());
  }
  if (!(from.emergencystopacc() <= 0 && from.emergencystopacc() >= 0)) {
    set_emergencystopacc(from.emergencystopacc());
  }
  if (from.emergencystopflag() != 0) {
    set_emergencystopflag(from.emergencystopflag());
  }
  if (from.epbstatus() != 0) {
    set_epbstatus(from.epbstatus());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
}

void VehicleCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.VehicleCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleCmd::CopyFrom(const VehicleCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.VehicleCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleCmd::IsInitialized() const {
  return true;
}

void VehicleCmd::InternalSwap(VehicleCmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(controlsrcid_, other->controlsrcid_);
  swap(currentsrcid_, other->currentsrcid_);
  swap(automode_, other->automode_);
  swap(steeringwheelmode_, other->steeringwheelmode_);
  swap(steeringwheelangle_, other->steeringwheelangle_);
  swap(steeringwheelspeed_, other->steeringwheelspeed_);
  swap(throttleopening_, other->throttleopening_);
  swap(driveactivationflag_, other->driveactivationflag_);
  swap(brakingstatusflag_, other->brakingstatusflag_);
  swap(brakingdeceleration_, other->brakingdeceleration_);
  swap(breakpedalopening_, other->breakpedalopening_);
  swap(emergencystopacc_, other->emergencystopacc_);
  swap(emergencystopflag_, other->emergencystopflag_);
  swap(epbstatus_, other->epbstatus_);
  swap(gear_, other->gear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IBUS::VehicleCmd* Arena::CreateMaybeMessage< ::IBUS::VehicleCmd >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::VehicleCmd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
