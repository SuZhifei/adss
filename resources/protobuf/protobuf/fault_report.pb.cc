// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fault_report.proto

#include "fault_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fault_5freport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaultReportInfo_fault_5freport_2eproto;
namespace IBUS {
class FaultReportInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaultReportInfo> _instance;
} _FaultReportInfo_default_instance_;
class FaultReportMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaultReportMsg> _instance;
} _FaultReportMsg_default_instance_;
}  // namespace IBUS
static void InitDefaultsscc_info_FaultReportInfo_fault_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_FaultReportInfo_default_instance_;
    new (ptr) ::IBUS::FaultReportInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::FaultReportInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaultReportInfo_fault_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaultReportInfo_fault_5freport_2eproto}, {}};

static void InitDefaultsscc_info_FaultReportMsg_fault_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_FaultReportMsg_default_instance_;
    new (ptr) ::IBUS::FaultReportMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::FaultReportMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaultReportMsg_fault_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaultReportMsg_fault_5freport_2eproto}, {
      &scc_info_FaultReportInfo_fault_5freport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fault_5freport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fault_5freport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fault_5freport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fault_5freport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, fault_name_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, fault_level_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, fault_generate_uint_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, fault_check_uint_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, fault_influence_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, fualt_recovery_strategy_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, fault_lock_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, fault_remote_clear_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportInfo, maintain_suggestions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportMsg, has_fault_),
  PROTOBUF_FIELD_OFFSET(::IBUS::FaultReportMsg, fault_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IBUS::FaultReportInfo)},
  { 14, -1, sizeof(::IBUS::FaultReportMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_FaultReportInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_FaultReportMsg_default_instance_),
};

const char descriptor_table_protodef_fault_5freport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022fault_report.proto\022\004IBUS\"\371\001\n\017FaultRepo"
  "rtInfo\022\022\n\nfault_name\030\001 \001(\t\022\023\n\013fault_leve"
  "l\030\002 \001(\005\022\033\n\023fault_generate_uint\030\003 \001(\t\022\030\n\020"
  "fault_check_uint\030\004 \001(\t\022\027\n\017fault_influenc"
  "e\030\005 \001(\t\022\037\n\027fualt_recovery_strategy\030\006 \001(\t"
  "\022\022\n\nfault_lock\030\007 \001(\010\022\032\n\022fault_remote_cle"
  "ar\030\010 \001(\010\022\034\n\024maintain_suggestions\030\t \001(\t\"N"
  "\n\016FaultReportMsg\022\021\n\thas_fault\030\001 \001(\010\022)\n\nf"
  "ault_list\030\002 \003(\0132\025.IBUS.FaultReportInfob\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fault_5freport_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fault_5freport_2eproto_sccs[2] = {
  &scc_info_FaultReportInfo_fault_5freport_2eproto.base,
  &scc_info_FaultReportMsg_fault_5freport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fault_5freport_2eproto_once;
static bool descriptor_table_fault_5freport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fault_5freport_2eproto = {
  &descriptor_table_fault_5freport_2eproto_initialized, descriptor_table_protodef_fault_5freport_2eproto, "fault_report.proto", 366,
  &descriptor_table_fault_5freport_2eproto_once, descriptor_table_fault_5freport_2eproto_sccs, descriptor_table_fault_5freport_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_fault_5freport_2eproto::offsets,
  file_level_metadata_fault_5freport_2eproto, 2, file_level_enum_descriptors_fault_5freport_2eproto, file_level_service_descriptors_fault_5freport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fault_5freport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fault_5freport_2eproto), true);
namespace IBUS {

// ===================================================================

void FaultReportInfo::InitAsDefaultInstance() {
}
class FaultReportInfo::_Internal {
 public:
};

FaultReportInfo::FaultReportInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.FaultReportInfo)
}
FaultReportInfo::FaultReportInfo(const FaultReportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fault_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.fault_name().empty()) {
    fault_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fault_name_);
  }
  fault_generate_uint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.fault_generate_uint().empty()) {
    fault_generate_uint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fault_generate_uint_);
  }
  fault_check_uint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.fault_check_uint().empty()) {
    fault_check_uint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fault_check_uint_);
  }
  fault_influence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.fault_influence().empty()) {
    fault_influence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fault_influence_);
  }
  fualt_recovery_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.fualt_recovery_strategy().empty()) {
    fualt_recovery_strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fualt_recovery_strategy_);
  }
  maintain_suggestions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.maintain_suggestions().empty()) {
    maintain_suggestions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maintain_suggestions_);
  }
  ::memcpy(&fault_level_, &from.fault_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&fault_remote_clear_) -
    reinterpret_cast<char*>(&fault_level_)) + sizeof(fault_remote_clear_));
  // @@protoc_insertion_point(copy_constructor:IBUS.FaultReportInfo)
}

void FaultReportInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaultReportInfo_fault_5freport_2eproto.base);
  fault_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_generate_uint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_check_uint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_influence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fualt_recovery_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maintain_suggestions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fault_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_remote_clear_) -
      reinterpret_cast<char*>(&fault_level_)) + sizeof(fault_remote_clear_));
}

FaultReportInfo::~FaultReportInfo() {
  // @@protoc_insertion_point(destructor:IBUS.FaultReportInfo)
  SharedDtor();
}

void FaultReportInfo::SharedDtor() {
  fault_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_generate_uint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_check_uint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_influence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fualt_recovery_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maintain_suggestions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FaultReportInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaultReportInfo& FaultReportInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaultReportInfo_fault_5freport_2eproto.base);
  return *internal_default_instance();
}


void FaultReportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.FaultReportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fault_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_generate_uint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_check_uint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_influence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fualt_recovery_strategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maintain_suggestions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fault_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_remote_clear_) -
      reinterpret_cast<char*>(&fault_level_)) + sizeof(fault_remote_clear_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaultReportInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fault_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fault_name(), ptr, ctx, "IBUS.FaultReportInfo.fault_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fault_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fault_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fault_generate_uint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fault_generate_uint(), ptr, ctx, "IBUS.FaultReportInfo.fault_generate_uint");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fault_check_uint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fault_check_uint(), ptr, ctx, "IBUS.FaultReportInfo.fault_check_uint");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fault_influence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fault_influence(), ptr, ctx, "IBUS.FaultReportInfo.fault_influence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fualt_recovery_strategy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fualt_recovery_strategy(), ptr, ctx, "IBUS.FaultReportInfo.fualt_recovery_strategy");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fault_lock = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fault_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fault_remote_clear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          fault_remote_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maintain_suggestions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_maintain_suggestions(), ptr, ctx, "IBUS.FaultReportInfo.maintain_suggestions");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaultReportInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.FaultReportInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fault_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fault_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fault_name().data(), static_cast<int>(this->fault_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IBUS.FaultReportInfo.fault_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fault_level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fault_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fault_generate_uint = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fault_generate_uint()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fault_generate_uint().data(), static_cast<int>(this->fault_generate_uint().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IBUS.FaultReportInfo.fault_generate_uint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fault_check_uint = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fault_check_uint()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fault_check_uint().data(), static_cast<int>(this->fault_check_uint().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IBUS.FaultReportInfo.fault_check_uint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fault_influence = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fault_influence()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fault_influence().data(), static_cast<int>(this->fault_influence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IBUS.FaultReportInfo.fault_influence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fualt_recovery_strategy = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fualt_recovery_strategy()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fualt_recovery_strategy().data(), static_cast<int>(this->fualt_recovery_strategy().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IBUS.FaultReportInfo.fualt_recovery_strategy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fault_lock = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fault_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fault_remote_clear = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fault_remote_clear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string maintain_suggestions = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_maintain_suggestions()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->maintain_suggestions().data(), static_cast<int>(this->maintain_suggestions().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IBUS.FaultReportInfo.maintain_suggestions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.FaultReportInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.FaultReportInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaultReportInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.FaultReportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fault_name = 1;
  if (this->fault_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fault_name().data(), static_cast<int>(this->fault_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fault_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fault_name(), output);
  }

  // int32 fault_level = 2;
  if (this->fault_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->fault_level(), output);
  }

  // string fault_generate_uint = 3;
  if (this->fault_generate_uint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fault_generate_uint().data(), static_cast<int>(this->fault_generate_uint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fault_generate_uint");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fault_generate_uint(), output);
  }

  // string fault_check_uint = 4;
  if (this->fault_check_uint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fault_check_uint().data(), static_cast<int>(this->fault_check_uint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fault_check_uint");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fault_check_uint(), output);
  }

  // string fault_influence = 5;
  if (this->fault_influence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fault_influence().data(), static_cast<int>(this->fault_influence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fault_influence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fault_influence(), output);
  }

  // string fualt_recovery_strategy = 6;
  if (this->fualt_recovery_strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fualt_recovery_strategy().data(), static_cast<int>(this->fualt_recovery_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fualt_recovery_strategy");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fualt_recovery_strategy(), output);
  }

  // bool fault_lock = 7;
  if (this->fault_lock() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->fault_lock(), output);
  }

  // bool fault_remote_clear = 8;
  if (this->fault_remote_clear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->fault_remote_clear(), output);
  }

  // string maintain_suggestions = 9;
  if (this->maintain_suggestions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->maintain_suggestions().data(), static_cast<int>(this->maintain_suggestions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.maintain_suggestions");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->maintain_suggestions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.FaultReportInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaultReportInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.FaultReportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fault_name = 1;
  if (this->fault_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fault_name().data(), static_cast<int>(this->fault_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fault_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->fault_name(), target);
  }

  // int32 fault_level = 2;
  if (this->fault_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->fault_level(), target);
  }

  // string fault_generate_uint = 3;
  if (this->fault_generate_uint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fault_generate_uint().data(), static_cast<int>(this->fault_generate_uint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fault_generate_uint");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->fault_generate_uint(), target);
  }

  // string fault_check_uint = 4;
  if (this->fault_check_uint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fault_check_uint().data(), static_cast<int>(this->fault_check_uint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fault_check_uint");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->fault_check_uint(), target);
  }

  // string fault_influence = 5;
  if (this->fault_influence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fault_influence().data(), static_cast<int>(this->fault_influence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fault_influence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->fault_influence(), target);
  }

  // string fualt_recovery_strategy = 6;
  if (this->fualt_recovery_strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fualt_recovery_strategy().data(), static_cast<int>(this->fualt_recovery_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.fualt_recovery_strategy");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->fualt_recovery_strategy(), target);
  }

  // bool fault_lock = 7;
  if (this->fault_lock() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->fault_lock(), target);
  }

  // bool fault_remote_clear = 8;
  if (this->fault_remote_clear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->fault_remote_clear(), target);
  }

  // string maintain_suggestions = 9;
  if (this->maintain_suggestions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->maintain_suggestions().data(), static_cast<int>(this->maintain_suggestions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IBUS.FaultReportInfo.maintain_suggestions");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->maintain_suggestions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.FaultReportInfo)
  return target;
}

size_t FaultReportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.FaultReportInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fault_name = 1;
  if (this->fault_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fault_name());
  }

  // string fault_generate_uint = 3;
  if (this->fault_generate_uint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fault_generate_uint());
  }

  // string fault_check_uint = 4;
  if (this->fault_check_uint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fault_check_uint());
  }

  // string fault_influence = 5;
  if (this->fault_influence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fault_influence());
  }

  // string fualt_recovery_strategy = 6;
  if (this->fualt_recovery_strategy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fualt_recovery_strategy());
  }

  // string maintain_suggestions = 9;
  if (this->maintain_suggestions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->maintain_suggestions());
  }

  // int32 fault_level = 2;
  if (this->fault_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fault_level());
  }

  // bool fault_lock = 7;
  if (this->fault_lock() != 0) {
    total_size += 1 + 1;
  }

  // bool fault_remote_clear = 8;
  if (this->fault_remote_clear() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaultReportInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.FaultReportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultReportInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaultReportInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.FaultReportInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.FaultReportInfo)
    MergeFrom(*source);
  }
}

void FaultReportInfo::MergeFrom(const FaultReportInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.FaultReportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fault_name().size() > 0) {

    fault_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fault_name_);
  }
  if (from.fault_generate_uint().size() > 0) {

    fault_generate_uint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fault_generate_uint_);
  }
  if (from.fault_check_uint().size() > 0) {

    fault_check_uint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fault_check_uint_);
  }
  if (from.fault_influence().size() > 0) {

    fault_influence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fault_influence_);
  }
  if (from.fualt_recovery_strategy().size() > 0) {

    fualt_recovery_strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fualt_recovery_strategy_);
  }
  if (from.maintain_suggestions().size() > 0) {

    maintain_suggestions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maintain_suggestions_);
  }
  if (from.fault_level() != 0) {
    set_fault_level(from.fault_level());
  }
  if (from.fault_lock() != 0) {
    set_fault_lock(from.fault_lock());
  }
  if (from.fault_remote_clear() != 0) {
    set_fault_remote_clear(from.fault_remote_clear());
  }
}

void FaultReportInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.FaultReportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultReportInfo::CopyFrom(const FaultReportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.FaultReportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultReportInfo::IsInitialized() const {
  return true;
}

void FaultReportInfo::InternalSwap(FaultReportInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fault_name_.Swap(&other->fault_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fault_generate_uint_.Swap(&other->fault_generate_uint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fault_check_uint_.Swap(&other->fault_check_uint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fault_influence_.Swap(&other->fault_influence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fualt_recovery_strategy_.Swap(&other->fualt_recovery_strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  maintain_suggestions_.Swap(&other->maintain_suggestions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fault_level_, other->fault_level_);
  swap(fault_lock_, other->fault_lock_);
  swap(fault_remote_clear_, other->fault_remote_clear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaultReportInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaultReportMsg::InitAsDefaultInstance() {
}
class FaultReportMsg::_Internal {
 public:
};

FaultReportMsg::FaultReportMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.FaultReportMsg)
}
FaultReportMsg::FaultReportMsg(const FaultReportMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fault_list_(from.fault_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_fault_ = from.has_fault_;
  // @@protoc_insertion_point(copy_constructor:IBUS.FaultReportMsg)
}

void FaultReportMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaultReportMsg_fault_5freport_2eproto.base);
  has_fault_ = false;
}

FaultReportMsg::~FaultReportMsg() {
  // @@protoc_insertion_point(destructor:IBUS.FaultReportMsg)
  SharedDtor();
}

void FaultReportMsg::SharedDtor() {
}

void FaultReportMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaultReportMsg& FaultReportMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaultReportMsg_fault_5freport_2eproto.base);
  return *internal_default_instance();
}


void FaultReportMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.FaultReportMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fault_list_.Clear();
  has_fault_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaultReportMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool has_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IBUS.FaultReportInfo fault_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fault_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaultReportMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.FaultReportMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool has_fault = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IBUS.FaultReportInfo fault_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fault_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.FaultReportMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.FaultReportMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaultReportMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.FaultReportMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_fault = 1;
  if (this->has_fault() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->has_fault(), output);
  }

  // repeated .IBUS.FaultReportInfo fault_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fault_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->fault_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.FaultReportMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaultReportMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.FaultReportMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_fault = 1;
  if (this->has_fault() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->has_fault(), target);
  }

  // repeated .IBUS.FaultReportInfo fault_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fault_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->fault_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.FaultReportMsg)
  return target;
}

size_t FaultReportMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.FaultReportMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IBUS.FaultReportInfo fault_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fault_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fault_list(static_cast<int>(i)));
    }
  }

  // bool has_fault = 1;
  if (this->has_fault() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaultReportMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.FaultReportMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultReportMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaultReportMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.FaultReportMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.FaultReportMsg)
    MergeFrom(*source);
  }
}

void FaultReportMsg::MergeFrom(const FaultReportMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.FaultReportMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fault_list_.MergeFrom(from.fault_list_);
  if (from.has_fault() != 0) {
    set_has_fault(from.has_fault());
  }
}

void FaultReportMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.FaultReportMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultReportMsg::CopyFrom(const FaultReportMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.FaultReportMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultReportMsg::IsInitialized() const {
  return true;
}

void FaultReportMsg::InternalSwap(FaultReportMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fault_list_)->InternalSwap(CastToBase(&other->fault_list_));
  swap(has_fault_, other->has_fault_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaultReportMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IBUS::FaultReportInfo* Arena::CreateMaybeMessage< ::IBUS::FaultReportInfo >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::FaultReportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IBUS::FaultReportMsg* Arena::CreateMaybeMessage< ::IBUS::FaultReportMsg >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::FaultReportMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
