// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_info.proto

#include "vehicle_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Header_common_2eproto;
namespace IBUS {
class VehicleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleInfo> _instance;
} _VehicleInfo_default_instance_;
}  // namespace IBUS
static void InitDefaultsscc_info_VehicleInfo_vehicle_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_VehicleInfo_default_instance_;
    new (ptr) ::IBUS::VehicleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::VehicleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleInfo_vehicle_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VehicleInfo_vehicle_5finfo_2eproto}, {
      &scc_info_Header_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vehicle_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, header_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, currentcontrolid_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, automode_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, vcudrivemode_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, vehiclestatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, realspeed_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, drivergear_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, vcugear_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, steeringwheelangle_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, steeringwheeltorque_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, shibaosteeringwheelworkmode_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, operationstatex_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, epbstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, plightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, brakestatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, realthrottlepedalopening_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, vcuthrottlepedalopening_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, breakpedalopening_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, autoquitreason_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, emergencystopstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, emergencystopreason_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, autobutton_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleInfo, autoholdstatus_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IBUS::VehicleInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_VehicleInfo_default_instance_),
};

const char descriptor_table_protodef_vehicle_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022vehicle_info.proto\022\004IBUS\032\014common.proto"
  "\"\315\004\n\013VehicleInfo\022\034\n\006header\030\001 \001(\0132\014.IBUS."
  "Header\022\030\n\020currentControlId\030\002 \001(\r\022\020\n\010auto"
  "Mode\030\003 \001(\r\022\024\n\014vcuDriveMode\030\004 \001(\r\022\025\n\rvehi"
  "cleStatus\030\005 \001(\r\022\021\n\trealSpeed\030\006 \001(\001\022\022\n\ndr"
  "iverGear\030\007 \001(\r\022\017\n\007vcuGear\030\010 \001(\r\022\032\n\022steer"
  "ingWheelAngle\030\t \001(\001\022\033\n\023steeringWheelTorq"
  "ue\030\n \001(\001\022#\n\033shibaoSteeringWheelWorkMode\030"
  "\013 \001(\r\022\027\n\017operationStateX\030\014 \001(\r\022\021\n\tepbSta"
  "tus\030\r \001(\r\022\024\n\014pLightStatus\030\016 \001(\r\022\023\n\013brake"
  "Status\030\017 \001(\r\022 \n\030realThrottlePedalOpening"
  "\030\020 \001(\001\022\037\n\027vcuThrottlePedalOpening\030\021 \001(\001\022"
  "\031\n\021breakPedalOpening\030\022 \001(\001\022\026\n\016autoQuitRe"
  "ason\030\023 \001(\r\022\033\n\023emergencyStopStatus\030\024 \001(\r\022"
  "\033\n\023emergencyStopReason\030\025 \001(\r\022\022\n\nautoButt"
  "on\030\026 \001(\r\022\026\n\016autoHoldStatus\030\027 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5finfo_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5finfo_2eproto_sccs[1] = {
  &scc_info_VehicleInfo_vehicle_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5finfo_2eproto_once;
static bool descriptor_table_vehicle_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5finfo_2eproto = {
  &descriptor_table_vehicle_5finfo_2eproto_initialized, descriptor_table_protodef_vehicle_5finfo_2eproto, "vehicle_info.proto", 640,
  &descriptor_table_vehicle_5finfo_2eproto_once, descriptor_table_vehicle_5finfo_2eproto_sccs, descriptor_table_vehicle_5finfo_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_vehicle_5finfo_2eproto::offsets,
  file_level_metadata_vehicle_5finfo_2eproto, 1, file_level_enum_descriptors_vehicle_5finfo_2eproto, file_level_service_descriptors_vehicle_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5finfo_2eproto), true);
namespace IBUS {

// ===================================================================

void VehicleInfo::InitAsDefaultInstance() {
  ::IBUS::_VehicleInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::IBUS::Header*>(
      ::IBUS::Header::internal_default_instance());
}
class VehicleInfo::_Internal {
 public:
  static const ::IBUS::Header& header(const VehicleInfo* msg);
};

const ::IBUS::Header&
VehicleInfo::_Internal::header(const VehicleInfo* msg) {
  return *msg->header_;
}
void VehicleInfo::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VehicleInfo::VehicleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::IBUS::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&currentcontrolid_, &from.currentcontrolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autoholdstatus_) -
    reinterpret_cast<char*>(&currentcontrolid_)) + sizeof(autoholdstatus_));
  // @@protoc_insertion_point(copy_constructor:IBUS.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleInfo_vehicle_5finfo_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autoholdstatus_) -
      reinterpret_cast<char*>(&header_)) + sizeof(autoholdstatus_));
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:IBUS.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void VehicleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleInfo& VehicleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleInfo_vehicle_5finfo_2eproto.base);
  return *internal_default_instance();
}


void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&currentcontrolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autoholdstatus_) -
      reinterpret_cast<char*>(&currentcontrolid_)) + sizeof(autoholdstatus_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 currentControlId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          currentcontrolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 autoMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          automode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vcuDriveMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vcudrivemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vehicleStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vehiclestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double realSpeed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          realspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 driverGear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          drivergear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vcuGear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          vcugear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double steeringWheelAngle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          steeringwheelangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double steeringWheelTorque = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          steeringwheeltorque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 shibaoSteeringWheelWorkMode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          shibaosteeringwheelworkmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 operationStateX = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          operationstatex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 epbStatus = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          epbstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pLightStatus = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          plightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 brakeStatus = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          brakestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double realThrottlePedalOpening = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          realthrottlepedalopening_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vcuThrottlePedalOpening = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          vcuthrottlepedalopening_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double breakPedalOpening = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          breakpedalopening_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 autoQuitReason = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          autoquitreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 emergencyStopStatus = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          emergencystopstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 emergencyStopReason = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          emergencystopreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 autoButton = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          autobutton_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 autoHoldStatus = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          autoholdstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.VehicleInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 currentControlId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentcontrolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autoMode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &automode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vcuDriveMode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vcudrivemode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vehicleStatus = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehiclestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double realSpeed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 driverGear = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drivergear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vcuGear = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vcugear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steeringWheelAngle = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringwheelangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steeringWheelTorque = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringwheeltorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shibaoSteeringWheelWorkMode = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shibaosteeringwheelworkmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 operationStateX = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operationstatex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 epbStatus = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epbstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pLightStatus = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 brakeStatus = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brakestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double realThrottlePedalOpening = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realthrottlepedalopening_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vcuThrottlePedalOpening = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vcuthrottlepedalopening_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double breakPedalOpening = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (145 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &breakpedalopening_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autoQuitReason = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autoquitreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 emergencyStopStatus = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emergencystopstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 emergencyStopReason = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emergencystopreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autoButton = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autobutton_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autoHoldStatus = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autoholdstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.VehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.VehicleInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // uint32 currentControlId = 2;
  if (this->currentcontrolid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->currentcontrolid(), output);
  }

  // uint32 autoMode = 3;
  if (this->automode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->automode(), output);
  }

  // uint32 vcuDriveMode = 4;
  if (this->vcudrivemode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->vcudrivemode(), output);
  }

  // uint32 vehicleStatus = 5;
  if (this->vehiclestatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->vehiclestatus(), output);
  }

  // double realSpeed = 6;
  if (!(this->realspeed() <= 0 && this->realspeed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->realspeed(), output);
  }

  // uint32 driverGear = 7;
  if (this->drivergear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->drivergear(), output);
  }

  // uint32 vcuGear = 8;
  if (this->vcugear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->vcugear(), output);
  }

  // double steeringWheelAngle = 9;
  if (!(this->steeringwheelangle() <= 0 && this->steeringwheelangle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->steeringwheelangle(), output);
  }

  // double steeringWheelTorque = 10;
  if (!(this->steeringwheeltorque() <= 0 && this->steeringwheeltorque() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->steeringwheeltorque(), output);
  }

  // uint32 shibaoSteeringWheelWorkMode = 11;
  if (this->shibaosteeringwheelworkmode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->shibaosteeringwheelworkmode(), output);
  }

  // uint32 operationStateX = 12;
  if (this->operationstatex() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->operationstatex(), output);
  }

  // uint32 epbStatus = 13;
  if (this->epbstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->epbstatus(), output);
  }

  // uint32 pLightStatus = 14;
  if (this->plightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->plightstatus(), output);
  }

  // uint32 brakeStatus = 15;
  if (this->brakestatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->brakestatus(), output);
  }

  // double realThrottlePedalOpening = 16;
  if (!(this->realthrottlepedalopening() <= 0 && this->realthrottlepedalopening() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->realthrottlepedalopening(), output);
  }

  // double vcuThrottlePedalOpening = 17;
  if (!(this->vcuthrottlepedalopening() <= 0 && this->vcuthrottlepedalopening() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->vcuthrottlepedalopening(), output);
  }

  // double breakPedalOpening = 18;
  if (!(this->breakpedalopening() <= 0 && this->breakpedalopening() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(18, this->breakpedalopening(), output);
  }

  // uint32 autoQuitReason = 19;
  if (this->autoquitreason() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->autoquitreason(), output);
  }

  // uint32 emergencyStopStatus = 20;
  if (this->emergencystopstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->emergencystopstatus(), output);
  }

  // uint32 emergencyStopReason = 21;
  if (this->emergencystopreason() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(21, this->emergencystopreason(), output);
  }

  // uint32 autoButton = 22;
  if (this->autobutton() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(22, this->autobutton(), output);
  }

  // uint32 autoHoldStatus = 23;
  if (this->autoholdstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(23, this->autoholdstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.VehicleInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // uint32 currentControlId = 2;
  if (this->currentcontrolid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->currentcontrolid(), target);
  }

  // uint32 autoMode = 3;
  if (this->automode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->automode(), target);
  }

  // uint32 vcuDriveMode = 4;
  if (this->vcudrivemode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->vcudrivemode(), target);
  }

  // uint32 vehicleStatus = 5;
  if (this->vehiclestatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->vehiclestatus(), target);
  }

  // double realSpeed = 6;
  if (!(this->realspeed() <= 0 && this->realspeed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->realspeed(), target);
  }

  // uint32 driverGear = 7;
  if (this->drivergear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->drivergear(), target);
  }

  // uint32 vcuGear = 8;
  if (this->vcugear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->vcugear(), target);
  }

  // double steeringWheelAngle = 9;
  if (!(this->steeringwheelangle() <= 0 && this->steeringwheelangle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->steeringwheelangle(), target);
  }

  // double steeringWheelTorque = 10;
  if (!(this->steeringwheeltorque() <= 0 && this->steeringwheeltorque() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->steeringwheeltorque(), target);
  }

  // uint32 shibaoSteeringWheelWorkMode = 11;
  if (this->shibaosteeringwheelworkmode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->shibaosteeringwheelworkmode(), target);
  }

  // uint32 operationStateX = 12;
  if (this->operationstatex() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->operationstatex(), target);
  }

  // uint32 epbStatus = 13;
  if (this->epbstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->epbstatus(), target);
  }

  // uint32 pLightStatus = 14;
  if (this->plightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->plightstatus(), target);
  }

  // uint32 brakeStatus = 15;
  if (this->brakestatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->brakestatus(), target);
  }

  // double realThrottlePedalOpening = 16;
  if (!(this->realthrottlepedalopening() <= 0 && this->realthrottlepedalopening() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->realthrottlepedalopening(), target);
  }

  // double vcuThrottlePedalOpening = 17;
  if (!(this->vcuthrottlepedalopening() <= 0 && this->vcuthrottlepedalopening() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->vcuthrottlepedalopening(), target);
  }

  // double breakPedalOpening = 18;
  if (!(this->breakpedalopening() <= 0 && this->breakpedalopening() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->breakpedalopening(), target);
  }

  // uint32 autoQuitReason = 19;
  if (this->autoquitreason() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->autoquitreason(), target);
  }

  // uint32 emergencyStopStatus = 20;
  if (this->emergencystopstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->emergencystopstatus(), target);
  }

  // uint32 emergencyStopReason = 21;
  if (this->emergencystopreason() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->emergencystopreason(), target);
  }

  // uint32 autoButton = 22;
  if (this->autobutton() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->autobutton(), target);
  }

  // uint32 autoHoldStatus = 23;
  if (this->autoholdstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->autoholdstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.VehicleInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 currentControlId = 2;
  if (this->currentcontrolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->currentcontrolid());
  }

  // uint32 autoMode = 3;
  if (this->automode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->automode());
  }

  // uint32 vcuDriveMode = 4;
  if (this->vcudrivemode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->vcudrivemode());
  }

  // uint32 vehicleStatus = 5;
  if (this->vehiclestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->vehiclestatus());
  }

  // double realSpeed = 6;
  if (!(this->realspeed() <= 0 && this->realspeed() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 driverGear = 7;
  if (this->drivergear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->drivergear());
  }

  // uint32 vcuGear = 8;
  if (this->vcugear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->vcugear());
  }

  // double steeringWheelAngle = 9;
  if (!(this->steeringwheelangle() <= 0 && this->steeringwheelangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double steeringWheelTorque = 10;
  if (!(this->steeringwheeltorque() <= 0 && this->steeringwheeltorque() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 shibaoSteeringWheelWorkMode = 11;
  if (this->shibaosteeringwheelworkmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->shibaosteeringwheelworkmode());
  }

  // uint32 operationStateX = 12;
  if (this->operationstatex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->operationstatex());
  }

  // uint32 epbStatus = 13;
  if (this->epbstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->epbstatus());
  }

  // uint32 pLightStatus = 14;
  if (this->plightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->plightstatus());
  }

  // double realThrottlePedalOpening = 16;
  if (!(this->realthrottlepedalopening() <= 0 && this->realthrottlepedalopening() >= 0)) {
    total_size += 2 + 8;
  }

  // double vcuThrottlePedalOpening = 17;
  if (!(this->vcuthrottlepedalopening() <= 0 && this->vcuthrottlepedalopening() >= 0)) {
    total_size += 2 + 8;
  }

  // uint32 brakeStatus = 15;
  if (this->brakestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->brakestatus());
  }

  // uint32 autoQuitReason = 19;
  if (this->autoquitreason() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->autoquitreason());
  }

  // double breakPedalOpening = 18;
  if (!(this->breakpedalopening() <= 0 && this->breakpedalopening() >= 0)) {
    total_size += 2 + 8;
  }

  // uint32 emergencyStopStatus = 20;
  if (this->emergencystopstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->emergencystopstatus());
  }

  // uint32 emergencyStopReason = 21;
  if (this->emergencystopreason() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->emergencystopreason());
  }

  // uint32 autoButton = 22;
  if (this->autobutton() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->autobutton());
  }

  // uint32 autoHoldStatus = 23;
  if (this->autoholdstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->autoholdstatus());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.VehicleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::IBUS::Header::MergeFrom(from.header());
  }
  if (from.currentcontrolid() != 0) {
    set_currentcontrolid(from.currentcontrolid());
  }
  if (from.automode() != 0) {
    set_automode(from.automode());
  }
  if (from.vcudrivemode() != 0) {
    set_vcudrivemode(from.vcudrivemode());
  }
  if (from.vehiclestatus() != 0) {
    set_vehiclestatus(from.vehiclestatus());
  }
  if (!(from.realspeed() <= 0 && from.realspeed() >= 0)) {
    set_realspeed(from.realspeed());
  }
  if (from.drivergear() != 0) {
    set_drivergear(from.drivergear());
  }
  if (from.vcugear() != 0) {
    set_vcugear(from.vcugear());
  }
  if (!(from.steeringwheelangle() <= 0 && from.steeringwheelangle() >= 0)) {
    set_steeringwheelangle(from.steeringwheelangle());
  }
  if (!(from.steeringwheeltorque() <= 0 && from.steeringwheeltorque() >= 0)) {
    set_steeringwheeltorque(from.steeringwheeltorque());
  }
  if (from.shibaosteeringwheelworkmode() != 0) {
    set_shibaosteeringwheelworkmode(from.shibaosteeringwheelworkmode());
  }
  if (from.operationstatex() != 0) {
    set_operationstatex(from.operationstatex());
  }
  if (from.epbstatus() != 0) {
    set_epbstatus(from.epbstatus());
  }
  if (from.plightstatus() != 0) {
    set_plightstatus(from.plightstatus());
  }
  if (!(from.realthrottlepedalopening() <= 0 && from.realthrottlepedalopening() >= 0)) {
    set_realthrottlepedalopening(from.realthrottlepedalopening());
  }
  if (!(from.vcuthrottlepedalopening() <= 0 && from.vcuthrottlepedalopening() >= 0)) {
    set_vcuthrottlepedalopening(from.vcuthrottlepedalopening());
  }
  if (from.brakestatus() != 0) {
    set_brakestatus(from.brakestatus());
  }
  if (from.autoquitreason() != 0) {
    set_autoquitreason(from.autoquitreason());
  }
  if (!(from.breakpedalopening() <= 0 && from.breakpedalopening() >= 0)) {
    set_breakpedalopening(from.breakpedalopening());
  }
  if (from.emergencystopstatus() != 0) {
    set_emergencystopstatus(from.emergencystopstatus());
  }
  if (from.emergencystopreason() != 0) {
    set_emergencystopreason(from.emergencystopreason());
  }
  if (from.autobutton() != 0) {
    set_autobutton(from.autobutton());
  }
  if (from.autoholdstatus() != 0) {
    set_autoholdstatus(from.autoholdstatus());
  }
}

void VehicleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(currentcontrolid_, other->currentcontrolid_);
  swap(automode_, other->automode_);
  swap(vcudrivemode_, other->vcudrivemode_);
  swap(vehiclestatus_, other->vehiclestatus_);
  swap(realspeed_, other->realspeed_);
  swap(drivergear_, other->drivergear_);
  swap(vcugear_, other->vcugear_);
  swap(steeringwheelangle_, other->steeringwheelangle_);
  swap(steeringwheeltorque_, other->steeringwheeltorque_);
  swap(shibaosteeringwheelworkmode_, other->shibaosteeringwheelworkmode_);
  swap(operationstatex_, other->operationstatex_);
  swap(epbstatus_, other->epbstatus_);
  swap(plightstatus_, other->plightstatus_);
  swap(realthrottlepedalopening_, other->realthrottlepedalopening_);
  swap(vcuthrottlepedalopening_, other->vcuthrottlepedalopening_);
  swap(brakestatus_, other->brakestatus_);
  swap(autoquitreason_, other->autoquitreason_);
  swap(breakpedalopening_, other->breakpedalopening_);
  swap(emergencystopstatus_, other->emergencystopstatus_);
  swap(emergencystopreason_, other->emergencystopreason_);
  swap(autobutton_, other->autobutton_);
  swap(autoholdstatus_, other->autoholdstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IBUS::VehicleInfo* Arena::CreateMaybeMessage< ::IBUS::VehicleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::VehicleInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
