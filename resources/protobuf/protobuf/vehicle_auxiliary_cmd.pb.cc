// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_auxiliary_cmd.proto

#include "vehicle_auxiliary_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Header_common_2eproto;
namespace IBUS {
class VehicleAuxiliaryCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleAuxiliaryCmd> _instance;
} _VehicleAuxiliaryCmd_default_instance_;
}  // namespace IBUS
static void InitDefaultsscc_info_VehicleAuxiliaryCmd_vehicle_5fauxiliary_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IBUS::_VehicleAuxiliaryCmd_default_instance_;
    new (ptr) ::IBUS::VehicleAuxiliaryCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IBUS::VehicleAuxiliaryCmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleAuxiliaryCmd_vehicle_5fauxiliary_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VehicleAuxiliaryCmd_vehicle_5fauxiliary_5fcmd_2eproto}, {
      &scc_info_Header_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5fauxiliary_5fcmd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vehicle_5fauxiliary_5fcmd_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fauxiliary_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5fauxiliary_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, header_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, horn_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, airconditioner_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, leftlight_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, rightlight_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, lowlightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, highlightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, emergencydoubleflashlight_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, frontfoglightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, rearfoglightstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, tipperhopper_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, tipperhopperspeed_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, targetcurvatureflag_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, targetcurvature_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, vehicleweight_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, autohold_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, difflock_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, cleaningsystemworkstatus_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, cleaningsystemworkmode_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wiperwaterpump1_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wiperwaterpump2_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wipervalve1_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wipervalve2_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wipervalve3_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wiperheating1_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wiperheating2_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wiperheating3_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wiperwaterpumptime_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wipervalvetime_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, wiperheatingtime_),
  PROTOBUF_FIELD_OFFSET(::IBUS::VehicleAuxiliaryCmd, selfcheck_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IBUS::VehicleAuxiliaryCmd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IBUS::_VehicleAuxiliaryCmd_default_instance_),
};

const char descriptor_table_protodef_vehicle_5fauxiliary_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033vehicle_auxiliary_cmd.proto\022\004IBUS\032\014com"
  "mon.proto\"\210\006\n\023VehicleAuxiliaryCmd\022\034\n\006hea"
  "der\030\001 \001(\0132\014.IBUS.Header\022\014\n\004horn\030\002 \001(\r\022\026\n"
  "\016airConditioner\030\003 \001(\r\022\021\n\tleftLight\030\004 \001(\r"
  "\022\022\n\nrightLight\030\005 \001(\r\022\026\n\016lowLightStatus\030\006"
  " \001(\r\022\027\n\017highLightStatus\030\007 \001(\r\022!\n\031emergen"
  "cyDoubleFlashLight\030\010 \001(\r\022\033\n\023frontFogLigh"
  "tStatus\030\t \001(\r\022\032\n\022rearFogLightStatus\030\n \001("
  "\r\022\024\n\014tipperHopper\030\013 \001(\r\022\031\n\021tipperHopperS"
  "peed\030\014 \001(\002\022\033\n\023targetCurvatureFlag\030\r \001(\r\022"
  "\027\n\017targetCurvature\030\016 \001(\001\022\025\n\rvehicleWeigh"
  "t\030\017 \001(\002\022\020\n\010autoHold\030\020 \001(\r\022\020\n\010diffLock\030\021 "
  "\001(\r\022 \n\030cleaningSystemWorkStatus\030\022 \001(\r\022\036\n"
  "\026cleaningSystemWorkMode\030\023 \001(\r\022\027\n\017wiperWa"
  "terPump1\030\024 \001(\r\022\027\n\017wiperWaterPump2\030\025 \001(\r\022"
  "\023\n\013wiperValve1\030\026 \001(\r\022\023\n\013wiperValve2\030\027 \001("
  "\r\022\023\n\013wiperValve3\030\030 \001(\r\022\025\n\rwiperHeating1\030"
  "\031 \001(\r\022\025\n\rwiperHeating2\030\032 \001(\r\022\025\n\rwiperHea"
  "ting3\030\033 \001(\r\022\032\n\022wiperWaterPumpTime\030\034 \001(\r\022"
  "\026\n\016wiperValveTime\030\035 \001(\r\022\030\n\020wiperHeatingT"
  "ime\030\036 \001(\r\022\021\n\tselfcheck\030\037 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto_sccs[1] = {
  &scc_info_VehicleAuxiliaryCmd_vehicle_5fauxiliary_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto_once;
static bool descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto = {
  &descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto_initialized, descriptor_table_protodef_vehicle_5fauxiliary_5fcmd_2eproto, "vehicle_auxiliary_cmd.proto", 836,
  &descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto_once, descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto_sccs, descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_vehicle_5fauxiliary_5fcmd_2eproto::offsets,
  file_level_metadata_vehicle_5fauxiliary_5fcmd_2eproto, 1, file_level_enum_descriptors_vehicle_5fauxiliary_5fcmd_2eproto, file_level_service_descriptors_vehicle_5fauxiliary_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fauxiliary_5fcmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5fauxiliary_5fcmd_2eproto), true);
namespace IBUS {

// ===================================================================

void VehicleAuxiliaryCmd::InitAsDefaultInstance() {
  ::IBUS::_VehicleAuxiliaryCmd_default_instance_._instance.get_mutable()->header_ = const_cast< ::IBUS::Header*>(
      ::IBUS::Header::internal_default_instance());
}
class VehicleAuxiliaryCmd::_Internal {
 public:
  static const ::IBUS::Header& header(const VehicleAuxiliaryCmd* msg);
};

const ::IBUS::Header&
VehicleAuxiliaryCmd::_Internal::header(const VehicleAuxiliaryCmd* msg) {
  return *msg->header_;
}
void VehicleAuxiliaryCmd::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VehicleAuxiliaryCmd::VehicleAuxiliaryCmd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IBUS.VehicleAuxiliaryCmd)
}
VehicleAuxiliaryCmd::VehicleAuxiliaryCmd(const VehicleAuxiliaryCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::IBUS::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&horn_, &from.horn_,
    static_cast<size_t>(reinterpret_cast<char*>(&selfcheck_) -
    reinterpret_cast<char*>(&horn_)) + sizeof(selfcheck_));
  // @@protoc_insertion_point(copy_constructor:IBUS.VehicleAuxiliaryCmd)
}

void VehicleAuxiliaryCmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleAuxiliaryCmd_vehicle_5fauxiliary_5fcmd_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selfcheck_) -
      reinterpret_cast<char*>(&header_)) + sizeof(selfcheck_));
}

VehicleAuxiliaryCmd::~VehicleAuxiliaryCmd() {
  // @@protoc_insertion_point(destructor:IBUS.VehicleAuxiliaryCmd)
  SharedDtor();
}

void VehicleAuxiliaryCmd::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void VehicleAuxiliaryCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleAuxiliaryCmd& VehicleAuxiliaryCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleAuxiliaryCmd_vehicle_5fauxiliary_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void VehicleAuxiliaryCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:IBUS.VehicleAuxiliaryCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&horn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selfcheck_) -
      reinterpret_cast<char*>(&horn_)) + sizeof(selfcheck_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleAuxiliaryCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IBUS.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 horn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 airConditioner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          airconditioner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leftLight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          leftlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rightLight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rightlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lowLightStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lowlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highLightStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          highlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 emergencyDoubleFlashLight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          emergencydoubleflashlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frontFogLightStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          frontfoglightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rearFogLightStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rearfoglightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tipperHopper = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          tipperhopper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float tipperHopperSpeed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          tipperhopperspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 targetCurvatureFlag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          targetcurvatureflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double targetCurvature = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          targetcurvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float vehicleWeight = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          vehicleweight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 autoHold = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          autohold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 diffLock = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          difflock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cleaningSystemWorkStatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          cleaningsystemworkstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cleaningSystemWorkMode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          cleaningsystemworkmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperWaterPump1 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          wiperwaterpump1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperWaterPump2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          wiperwaterpump2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperValve1 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          wipervalve1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperValve2 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          wipervalve2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperValve3 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          wipervalve3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperHeating1 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          wiperheating1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperHeating2 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          wiperheating2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperHeating3 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          wiperheating3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperWaterPumpTime = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          wiperwaterpumptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperValveTime = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          wipervalvetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wiperHeatingTime = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          wiperheatingtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 selfcheck = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          selfcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleAuxiliaryCmd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IBUS.VehicleAuxiliaryCmd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IBUS.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 horn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 airConditioner = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &airconditioner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leftLight = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rightLight = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lowLightStatus = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 highLightStatus = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 emergencyDoubleFlashLight = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emergencydoubleflashlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frontFogLightStatus = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frontfoglightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rearFogLightStatus = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rearfoglightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tipperHopper = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tipperhopper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tipperHopperSpeed = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tipperhopperspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 targetCurvatureFlag = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcurvatureflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double targetCurvature = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetcurvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vehicleWeight = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicleweight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autoHold = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autohold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 diffLock = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difflock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cleaningSystemWorkStatus = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleaningsystemworkstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cleaningSystemWorkMode = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleaningsystemworkmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperWaterPump1 = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiperwaterpump1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperWaterPump2 = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiperwaterpump2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperValve1 = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wipervalve1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperValve2 = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wipervalve2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperValve3 = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wipervalve3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperHeating1 = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiperheating1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperHeating2 = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiperheating2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperHeating3 = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiperheating3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperWaterPumpTime = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiperwaterpumptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperValveTime = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wipervalvetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wiperHeatingTime = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiperheatingtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 selfcheck = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfcheck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IBUS.VehicleAuxiliaryCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IBUS.VehicleAuxiliaryCmd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleAuxiliaryCmd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IBUS.VehicleAuxiliaryCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // uint32 horn = 2;
  if (this->horn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->horn(), output);
  }

  // uint32 airConditioner = 3;
  if (this->airconditioner() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->airconditioner(), output);
  }

  // uint32 leftLight = 4;
  if (this->leftlight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->leftlight(), output);
  }

  // uint32 rightLight = 5;
  if (this->rightlight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->rightlight(), output);
  }

  // uint32 lowLightStatus = 6;
  if (this->lowlightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->lowlightstatus(), output);
  }

  // uint32 highLightStatus = 7;
  if (this->highlightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->highlightstatus(), output);
  }

  // uint32 emergencyDoubleFlashLight = 8;
  if (this->emergencydoubleflashlight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->emergencydoubleflashlight(), output);
  }

  // uint32 frontFogLightStatus = 9;
  if (this->frontfoglightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->frontfoglightstatus(), output);
  }

  // uint32 rearFogLightStatus = 10;
  if (this->rearfoglightstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->rearfoglightstatus(), output);
  }

  // uint32 tipperHopper = 11;
  if (this->tipperhopper() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->tipperhopper(), output);
  }

  // float tipperHopperSpeed = 12;
  if (!(this->tipperhopperspeed() <= 0 && this->tipperhopperspeed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->tipperhopperspeed(), output);
  }

  // uint32 targetCurvatureFlag = 13;
  if (this->targetcurvatureflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->targetcurvatureflag(), output);
  }

  // double targetCurvature = 14;
  if (!(this->targetcurvature() <= 0 && this->targetcurvature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->targetcurvature(), output);
  }

  // float vehicleWeight = 15;
  if (!(this->vehicleweight() <= 0 && this->vehicleweight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->vehicleweight(), output);
  }

  // uint32 autoHold = 16;
  if (this->autohold() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->autohold(), output);
  }

  // uint32 diffLock = 17;
  if (this->difflock() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->difflock(), output);
  }

  // uint32 cleaningSystemWorkStatus = 18;
  if (this->cleaningsystemworkstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->cleaningsystemworkstatus(), output);
  }

  // uint32 cleaningSystemWorkMode = 19;
  if (this->cleaningsystemworkmode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->cleaningsystemworkmode(), output);
  }

  // uint32 wiperWaterPump1 = 20;
  if (this->wiperwaterpump1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->wiperwaterpump1(), output);
  }

  // uint32 wiperWaterPump2 = 21;
  if (this->wiperwaterpump2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(21, this->wiperwaterpump2(), output);
  }

  // uint32 wiperValve1 = 22;
  if (this->wipervalve1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(22, this->wipervalve1(), output);
  }

  // uint32 wiperValve2 = 23;
  if (this->wipervalve2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(23, this->wipervalve2(), output);
  }

  // uint32 wiperValve3 = 24;
  if (this->wipervalve3() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(24, this->wipervalve3(), output);
  }

  // uint32 wiperHeating1 = 25;
  if (this->wiperheating1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(25, this->wiperheating1(), output);
  }

  // uint32 wiperHeating2 = 26;
  if (this->wiperheating2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(26, this->wiperheating2(), output);
  }

  // uint32 wiperHeating3 = 27;
  if (this->wiperheating3() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(27, this->wiperheating3(), output);
  }

  // uint32 wiperWaterPumpTime = 28;
  if (this->wiperwaterpumptime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(28, this->wiperwaterpumptime(), output);
  }

  // uint32 wiperValveTime = 29;
  if (this->wipervalvetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(29, this->wipervalvetime(), output);
  }

  // uint32 wiperHeatingTime = 30;
  if (this->wiperheatingtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(30, this->wiperheatingtime(), output);
  }

  // uint32 selfcheck = 31;
  if (this->selfcheck() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(31, this->selfcheck(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IBUS.VehicleAuxiliaryCmd)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleAuxiliaryCmd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IBUS.VehicleAuxiliaryCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // uint32 horn = 2;
  if (this->horn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->horn(), target);
  }

  // uint32 airConditioner = 3;
  if (this->airconditioner() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->airconditioner(), target);
  }

  // uint32 leftLight = 4;
  if (this->leftlight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->leftlight(), target);
  }

  // uint32 rightLight = 5;
  if (this->rightlight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->rightlight(), target);
  }

  // uint32 lowLightStatus = 6;
  if (this->lowlightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->lowlightstatus(), target);
  }

  // uint32 highLightStatus = 7;
  if (this->highlightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->highlightstatus(), target);
  }

  // uint32 emergencyDoubleFlashLight = 8;
  if (this->emergencydoubleflashlight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->emergencydoubleflashlight(), target);
  }

  // uint32 frontFogLightStatus = 9;
  if (this->frontfoglightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->frontfoglightstatus(), target);
  }

  // uint32 rearFogLightStatus = 10;
  if (this->rearfoglightstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->rearfoglightstatus(), target);
  }

  // uint32 tipperHopper = 11;
  if (this->tipperhopper() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->tipperhopper(), target);
  }

  // float tipperHopperSpeed = 12;
  if (!(this->tipperhopperspeed() <= 0 && this->tipperhopperspeed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->tipperhopperspeed(), target);
  }

  // uint32 targetCurvatureFlag = 13;
  if (this->targetcurvatureflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->targetcurvatureflag(), target);
  }

  // double targetCurvature = 14;
  if (!(this->targetcurvature() <= 0 && this->targetcurvature() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->targetcurvature(), target);
  }

  // float vehicleWeight = 15;
  if (!(this->vehicleweight() <= 0 && this->vehicleweight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->vehicleweight(), target);
  }

  // uint32 autoHold = 16;
  if (this->autohold() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->autohold(), target);
  }

  // uint32 diffLock = 17;
  if (this->difflock() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->difflock(), target);
  }

  // uint32 cleaningSystemWorkStatus = 18;
  if (this->cleaningsystemworkstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->cleaningsystemworkstatus(), target);
  }

  // uint32 cleaningSystemWorkMode = 19;
  if (this->cleaningsystemworkmode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->cleaningsystemworkmode(), target);
  }

  // uint32 wiperWaterPump1 = 20;
  if (this->wiperwaterpump1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->wiperwaterpump1(), target);
  }

  // uint32 wiperWaterPump2 = 21;
  if (this->wiperwaterpump2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->wiperwaterpump2(), target);
  }

  // uint32 wiperValve1 = 22;
  if (this->wipervalve1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->wipervalve1(), target);
  }

  // uint32 wiperValve2 = 23;
  if (this->wipervalve2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->wipervalve2(), target);
  }

  // uint32 wiperValve3 = 24;
  if (this->wipervalve3() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->wipervalve3(), target);
  }

  // uint32 wiperHeating1 = 25;
  if (this->wiperheating1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->wiperheating1(), target);
  }

  // uint32 wiperHeating2 = 26;
  if (this->wiperheating2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->wiperheating2(), target);
  }

  // uint32 wiperHeating3 = 27;
  if (this->wiperheating3() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->wiperheating3(), target);
  }

  // uint32 wiperWaterPumpTime = 28;
  if (this->wiperwaterpumptime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->wiperwaterpumptime(), target);
  }

  // uint32 wiperValveTime = 29;
  if (this->wipervalvetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->wipervalvetime(), target);
  }

  // uint32 wiperHeatingTime = 30;
  if (this->wiperheatingtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->wiperheatingtime(), target);
  }

  // uint32 selfcheck = 31;
  if (this->selfcheck() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->selfcheck(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IBUS.VehicleAuxiliaryCmd)
  return target;
}

size_t VehicleAuxiliaryCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IBUS.VehicleAuxiliaryCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IBUS.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 horn = 2;
  if (this->horn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->horn());
  }

  // uint32 airConditioner = 3;
  if (this->airconditioner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->airconditioner());
  }

  // uint32 leftLight = 4;
  if (this->leftlight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->leftlight());
  }

  // uint32 rightLight = 5;
  if (this->rightlight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rightlight());
  }

  // uint32 lowLightStatus = 6;
  if (this->lowlightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lowlightstatus());
  }

  // uint32 highLightStatus = 7;
  if (this->highlightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->highlightstatus());
  }

  // uint32 emergencyDoubleFlashLight = 8;
  if (this->emergencydoubleflashlight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->emergencydoubleflashlight());
  }

  // uint32 frontFogLightStatus = 9;
  if (this->frontfoglightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->frontfoglightstatus());
  }

  // uint32 rearFogLightStatus = 10;
  if (this->rearfoglightstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rearfoglightstatus());
  }

  // uint32 tipperHopper = 11;
  if (this->tipperhopper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->tipperhopper());
  }

  // float tipperHopperSpeed = 12;
  if (!(this->tipperhopperspeed() <= 0 && this->tipperhopperspeed() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 targetCurvatureFlag = 13;
  if (this->targetcurvatureflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->targetcurvatureflag());
  }

  // double targetCurvature = 14;
  if (!(this->targetcurvature() <= 0 && this->targetcurvature() >= 0)) {
    total_size += 1 + 8;
  }

  // float vehicleWeight = 15;
  if (!(this->vehicleweight() <= 0 && this->vehicleweight() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 autoHold = 16;
  if (this->autohold() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->autohold());
  }

  // uint32 diffLock = 17;
  if (this->difflock() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->difflock());
  }

  // uint32 cleaningSystemWorkStatus = 18;
  if (this->cleaningsystemworkstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->cleaningsystemworkstatus());
  }

  // uint32 cleaningSystemWorkMode = 19;
  if (this->cleaningsystemworkmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->cleaningsystemworkmode());
  }

  // uint32 wiperWaterPump1 = 20;
  if (this->wiperwaterpump1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wiperwaterpump1());
  }

  // uint32 wiperWaterPump2 = 21;
  if (this->wiperwaterpump2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wiperwaterpump2());
  }

  // uint32 wiperValve1 = 22;
  if (this->wipervalve1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wipervalve1());
  }

  // uint32 wiperValve2 = 23;
  if (this->wipervalve2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wipervalve2());
  }

  // uint32 wiperValve3 = 24;
  if (this->wipervalve3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wipervalve3());
  }

  // uint32 wiperHeating1 = 25;
  if (this->wiperheating1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wiperheating1());
  }

  // uint32 wiperHeating2 = 26;
  if (this->wiperheating2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wiperheating2());
  }

  // uint32 wiperHeating3 = 27;
  if (this->wiperheating3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wiperheating3());
  }

  // uint32 wiperWaterPumpTime = 28;
  if (this->wiperwaterpumptime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wiperwaterpumptime());
  }

  // uint32 wiperValveTime = 29;
  if (this->wipervalvetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wipervalvetime());
  }

  // uint32 wiperHeatingTime = 30;
  if (this->wiperheatingtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->wiperheatingtime());
  }

  // uint32 selfcheck = 31;
  if (this->selfcheck() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->selfcheck());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleAuxiliaryCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IBUS.VehicleAuxiliaryCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAuxiliaryCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleAuxiliaryCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IBUS.VehicleAuxiliaryCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IBUS.VehicleAuxiliaryCmd)
    MergeFrom(*source);
  }
}

void VehicleAuxiliaryCmd::MergeFrom(const VehicleAuxiliaryCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IBUS.VehicleAuxiliaryCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::IBUS::Header::MergeFrom(from.header());
  }
  if (from.horn() != 0) {
    set_horn(from.horn());
  }
  if (from.airconditioner() != 0) {
    set_airconditioner(from.airconditioner());
  }
  if (from.leftlight() != 0) {
    set_leftlight(from.leftlight());
  }
  if (from.rightlight() != 0) {
    set_rightlight(from.rightlight());
  }
  if (from.lowlightstatus() != 0) {
    set_lowlightstatus(from.lowlightstatus());
  }
  if (from.highlightstatus() != 0) {
    set_highlightstatus(from.highlightstatus());
  }
  if (from.emergencydoubleflashlight() != 0) {
    set_emergencydoubleflashlight(from.emergencydoubleflashlight());
  }
  if (from.frontfoglightstatus() != 0) {
    set_frontfoglightstatus(from.frontfoglightstatus());
  }
  if (from.rearfoglightstatus() != 0) {
    set_rearfoglightstatus(from.rearfoglightstatus());
  }
  if (from.tipperhopper() != 0) {
    set_tipperhopper(from.tipperhopper());
  }
  if (!(from.tipperhopperspeed() <= 0 && from.tipperhopperspeed() >= 0)) {
    set_tipperhopperspeed(from.tipperhopperspeed());
  }
  if (from.targetcurvatureflag() != 0) {
    set_targetcurvatureflag(from.targetcurvatureflag());
  }
  if (!(from.targetcurvature() <= 0 && from.targetcurvature() >= 0)) {
    set_targetcurvature(from.targetcurvature());
  }
  if (!(from.vehicleweight() <= 0 && from.vehicleweight() >= 0)) {
    set_vehicleweight(from.vehicleweight());
  }
  if (from.autohold() != 0) {
    set_autohold(from.autohold());
  }
  if (from.difflock() != 0) {
    set_difflock(from.difflock());
  }
  if (from.cleaningsystemworkstatus() != 0) {
    set_cleaningsystemworkstatus(from.cleaningsystemworkstatus());
  }
  if (from.cleaningsystemworkmode() != 0) {
    set_cleaningsystemworkmode(from.cleaningsystemworkmode());
  }
  if (from.wiperwaterpump1() != 0) {
    set_wiperwaterpump1(from.wiperwaterpump1());
  }
  if (from.wiperwaterpump2() != 0) {
    set_wiperwaterpump2(from.wiperwaterpump2());
  }
  if (from.wipervalve1() != 0) {
    set_wipervalve1(from.wipervalve1());
  }
  if (from.wipervalve2() != 0) {
    set_wipervalve2(from.wipervalve2());
  }
  if (from.wipervalve3() != 0) {
    set_wipervalve3(from.wipervalve3());
  }
  if (from.wiperheating1() != 0) {
    set_wiperheating1(from.wiperheating1());
  }
  if (from.wiperheating2() != 0) {
    set_wiperheating2(from.wiperheating2());
  }
  if (from.wiperheating3() != 0) {
    set_wiperheating3(from.wiperheating3());
  }
  if (from.wiperwaterpumptime() != 0) {
    set_wiperwaterpumptime(from.wiperwaterpumptime());
  }
  if (from.wipervalvetime() != 0) {
    set_wipervalvetime(from.wipervalvetime());
  }
  if (from.wiperheatingtime() != 0) {
    set_wiperheatingtime(from.wiperheatingtime());
  }
  if (from.selfcheck() != 0) {
    set_selfcheck(from.selfcheck());
  }
}

void VehicleAuxiliaryCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IBUS.VehicleAuxiliaryCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAuxiliaryCmd::CopyFrom(const VehicleAuxiliaryCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IBUS.VehicleAuxiliaryCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAuxiliaryCmd::IsInitialized() const {
  return true;
}

void VehicleAuxiliaryCmd::InternalSwap(VehicleAuxiliaryCmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(horn_, other->horn_);
  swap(airconditioner_, other->airconditioner_);
  swap(leftlight_, other->leftlight_);
  swap(rightlight_, other->rightlight_);
  swap(lowlightstatus_, other->lowlightstatus_);
  swap(highlightstatus_, other->highlightstatus_);
  swap(emergencydoubleflashlight_, other->emergencydoubleflashlight_);
  swap(frontfoglightstatus_, other->frontfoglightstatus_);
  swap(rearfoglightstatus_, other->rearfoglightstatus_);
  swap(tipperhopper_, other->tipperhopper_);
  swap(tipperhopperspeed_, other->tipperhopperspeed_);
  swap(targetcurvatureflag_, other->targetcurvatureflag_);
  swap(targetcurvature_, other->targetcurvature_);
  swap(vehicleweight_, other->vehicleweight_);
  swap(autohold_, other->autohold_);
  swap(difflock_, other->difflock_);
  swap(cleaningsystemworkstatus_, other->cleaningsystemworkstatus_);
  swap(cleaningsystemworkmode_, other->cleaningsystemworkmode_);
  swap(wiperwaterpump1_, other->wiperwaterpump1_);
  swap(wiperwaterpump2_, other->wiperwaterpump2_);
  swap(wipervalve1_, other->wipervalve1_);
  swap(wipervalve2_, other->wipervalve2_);
  swap(wipervalve3_, other->wipervalve3_);
  swap(wiperheating1_, other->wiperheating1_);
  swap(wiperheating2_, other->wiperheating2_);
  swap(wiperheating3_, other->wiperheating3_);
  swap(wiperwaterpumptime_, other->wiperwaterpumptime_);
  swap(wipervalvetime_, other->wipervalvetime_);
  swap(wiperheatingtime_, other->wiperheatingtime_);
  swap(selfcheck_, other->selfcheck_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleAuxiliaryCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IBUS::VehicleAuxiliaryCmd* Arena::CreateMaybeMessage< ::IBUS::VehicleAuxiliaryCmd >(Arena* arena) {
  return Arena::CreateInternal< ::IBUS::VehicleAuxiliaryCmd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
