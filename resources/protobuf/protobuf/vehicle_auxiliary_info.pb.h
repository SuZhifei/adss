// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_auxiliary_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_5fauxiliary_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_5fauxiliary_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fauxiliary_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fauxiliary_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fauxiliary_5finfo_2eproto;
namespace IBUS {
class TyreInfo;
class TyreInfoDefaultTypeInternal;
extern TyreInfoDefaultTypeInternal _TyreInfo_default_instance_;
class TyreInfoList;
class TyreInfoListDefaultTypeInternal;
extern TyreInfoListDefaultTypeInternal _TyreInfoList_default_instance_;
class VehicleAuxiliaryInfo;
class VehicleAuxiliaryInfoDefaultTypeInternal;
extern VehicleAuxiliaryInfoDefaultTypeInternal _VehicleAuxiliaryInfo_default_instance_;
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> ::IBUS::TyreInfo* Arena::CreateMaybeMessage<::IBUS::TyreInfo>(Arena*);
template<> ::IBUS::TyreInfoList* Arena::CreateMaybeMessage<::IBUS::TyreInfoList>(Arena*);
template<> ::IBUS::VehicleAuxiliaryInfo* Arena::CreateMaybeMessage<::IBUS::VehicleAuxiliaryInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IBUS {

// ===================================================================

class TyreInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.TyreInfo) */ {
 public:
  TyreInfo();
  virtual ~TyreInfo();

  TyreInfo(const TyreInfo& from);
  TyreInfo(TyreInfo&& from) noexcept
    : TyreInfo() {
    *this = ::std::move(from);
  }

  inline TyreInfo& operator=(const TyreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TyreInfo& operator=(TyreInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TyreInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TyreInfo* internal_default_instance() {
    return reinterpret_cast<const TyreInfo*>(
               &_TyreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TyreInfo& a, TyreInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TyreInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TyreInfo* New() const final {
    return CreateMaybeMessage<TyreInfo>(nullptr);
  }

  TyreInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TyreInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TyreInfo& from);
  void MergeFrom(const TyreInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TyreInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.TyreInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fauxiliary_5finfo_2eproto);
    return ::descriptor_table_vehicle_5fauxiliary_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTyreLocationFieldNumber = 1,
    kTyrePressureFieldNumber = 2,
    kTyreTemperatureFieldNumber = 3,
    kTyreSpeedFieldNumber = 4,
  };
  // uint32 tyreLocation = 1;
  void clear_tyrelocation();
  ::PROTOBUF_NAMESPACE_ID::uint32 tyrelocation() const;
  void set_tyrelocation(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 tyrePressure = 2;
  void clear_tyrepressure();
  ::PROTOBUF_NAMESPACE_ID::uint32 tyrepressure() const;
  void set_tyrepressure(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 tyreTemperature = 3;
  void clear_tyretemperature();
  ::PROTOBUF_NAMESPACE_ID::uint32 tyretemperature() const;
  void set_tyretemperature(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 tyreSpeed = 4;
  void clear_tyrespeed();
  ::PROTOBUF_NAMESPACE_ID::uint32 tyrespeed() const;
  void set_tyrespeed(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IBUS.TyreInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tyrelocation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tyrepressure_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tyretemperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tyrespeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fauxiliary_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TyreInfoList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.TyreInfoList) */ {
 public:
  TyreInfoList();
  virtual ~TyreInfoList();

  TyreInfoList(const TyreInfoList& from);
  TyreInfoList(TyreInfoList&& from) noexcept
    : TyreInfoList() {
    *this = ::std::move(from);
  }

  inline TyreInfoList& operator=(const TyreInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TyreInfoList& operator=(TyreInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TyreInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TyreInfoList* internal_default_instance() {
    return reinterpret_cast<const TyreInfoList*>(
               &_TyreInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TyreInfoList& a, TyreInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(TyreInfoList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TyreInfoList* New() const final {
    return CreateMaybeMessage<TyreInfoList>(nullptr);
  }

  TyreInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TyreInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TyreInfoList& from);
  void MergeFrom(const TyreInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TyreInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.TyreInfoList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fauxiliary_5finfo_2eproto);
    return ::descriptor_table_vehicle_5fauxiliary_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTyreInfoListFieldNumber = 1,
  };
  // repeated .IBUS.TyreInfo tyreInfoList = 1;
  int tyreinfolist_size() const;
  void clear_tyreinfolist();
  ::IBUS::TyreInfo* mutable_tyreinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::TyreInfo >*
      mutable_tyreinfolist();
  const ::IBUS::TyreInfo& tyreinfolist(int index) const;
  ::IBUS::TyreInfo* add_tyreinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::TyreInfo >&
      tyreinfolist() const;

  // @@protoc_insertion_point(class_scope:IBUS.TyreInfoList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::TyreInfo > tyreinfolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fauxiliary_5finfo_2eproto;
};
// -------------------------------------------------------------------

class VehicleAuxiliaryInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.VehicleAuxiliaryInfo) */ {
 public:
  VehicleAuxiliaryInfo();
  virtual ~VehicleAuxiliaryInfo();

  VehicleAuxiliaryInfo(const VehicleAuxiliaryInfo& from);
  VehicleAuxiliaryInfo(VehicleAuxiliaryInfo&& from) noexcept
    : VehicleAuxiliaryInfo() {
    *this = ::std::move(from);
  }

  inline VehicleAuxiliaryInfo& operator=(const VehicleAuxiliaryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleAuxiliaryInfo& operator=(VehicleAuxiliaryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleAuxiliaryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleAuxiliaryInfo* internal_default_instance() {
    return reinterpret_cast<const VehicleAuxiliaryInfo*>(
               &_VehicleAuxiliaryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VehicleAuxiliaryInfo& a, VehicleAuxiliaryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleAuxiliaryInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleAuxiliaryInfo* New() const final {
    return CreateMaybeMessage<VehicleAuxiliaryInfo>(nullptr);
  }

  VehicleAuxiliaryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleAuxiliaryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleAuxiliaryInfo& from);
  void MergeFrom(const VehicleAuxiliaryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAuxiliaryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.VehicleAuxiliaryInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fauxiliary_5finfo_2eproto);
    return ::descriptor_table_vehicle_5fauxiliary_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTyreInfoListFieldNumber = 19,
    kLeftLightStatusFieldNumber = 2,
    kRightLightStatusFieldNumber = 3,
    kLowLightStatusFieldNumber = 4,
    kHighLightStatusFieldNumber = 5,
    kEmergencyLightStatusFieldNumber = 6,
    kFrontFogLightStatusFieldNumber = 7,
    kRearFogLightStatusFieldNumber = 8,
    kMotorRotationDirectionFieldNumber = 9,
    kHornStatusFieldNumber = 10,
    kYawInvaildFieldNumber = 11,
    kYawRateFieldNumber = 12,
    kLateralAccelerationFieldNumber = 13,
    kLongitudinalAccelerationFieldNumber = 14,
    kBatteryCapacityFieldNumber = 15,
    kAirConditionerStatusFieldNumber = 16,
    kSmallDecisionStatusFieldNumber = 17,
    kSzWaterPercentFieldNumber = 18,
    kTipperHopperStatusFieldNumber = 20,
    kTipperHopperErrStatusFieldNumber = 21,
    kFeedbackCurvatureFieldNumber = 23,
    kElectronicParkingIndicationFieldNumber = 22,
    kDiffLockStatusFieldNumber = 25,
    kWheelAngleVoltageSignalFeedbackFieldNumber = 24,
    kCleaningSystemWorkModeFieldNumber = 26,
    kCleaningSystemWorkStatusFieldNumber = 27,
    kLiquidTemperatureFieldNumber = 28,
    kLiquidLevelStatusFieldNumber = 29,
    kCleaningSystemFaultLevelFieldNumber = 30,
    kCleaningSystemFaultCodeFieldNumber = 31,
    kDriverEpbOnFieldNumber = 32,
    kDriverEpbOffFieldNumber = 33,
    kLeftDoor1FieldNumber = 34,
    kLeftDoor2FieldNumber = 35,
    kLeftDoor3FieldNumber = 36,
    kLeftDoor4FieldNumber = 37,
    kRightDoor1FieldNumber = 38,
    kRightDoor2FieldNumber = 39,
    kRightDoor3FieldNumber = 40,
    kRightDoor4FieldNumber = 41,
    kSeatBeltStatusFieldNumber = 42,
    kLeaveSeatStatusFieldNumber = 43,
    kHoldSteeringWheelFieldNumber = 44,
    kLeftFrontWheelSpeedFieldNumber = 45,
    kRightFrontWheelSpeedFieldNumber = 46,
    kLeftRearWheelSpeedFieldNumber = 47,
    kRightRearWheelSpeedFieldNumber = 48,
    kCollisionTapeFieldNumber = 49,
  };
  // .IBUS.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::IBUS::Header& header() const;
  ::IBUS::Header* release_header();
  ::IBUS::Header* mutable_header();
  void set_allocated_header(::IBUS::Header* header);

  // .IBUS.TyreInfoList tyreInfoList = 19;
  bool has_tyreinfolist() const;
  void clear_tyreinfolist();
  const ::IBUS::TyreInfoList& tyreinfolist() const;
  ::IBUS::TyreInfoList* release_tyreinfolist();
  ::IBUS::TyreInfoList* mutable_tyreinfolist();
  void set_allocated_tyreinfolist(::IBUS::TyreInfoList* tyreinfolist);

  // uint32 leftLightStatus = 2;
  void clear_leftlightstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 leftlightstatus() const;
  void set_leftlightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rightLightStatus = 3;
  void clear_rightlightstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 rightlightstatus() const;
  void set_rightlightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lowLightStatus = 4;
  void clear_lowlightstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 lowlightstatus() const;
  void set_lowlightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 highLightStatus = 5;
  void clear_highlightstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 highlightstatus() const;
  void set_highlightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 emergencyLightStatus = 6;
  void clear_emergencylightstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 emergencylightstatus() const;
  void set_emergencylightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 frontFogLightStatus = 7;
  void clear_frontfoglightstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 frontfoglightstatus() const;
  void set_frontfoglightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rearFogLightStatus = 8;
  void clear_rearfoglightstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 rearfoglightstatus() const;
  void set_rearfoglightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 motorRotationDirection = 9;
  void clear_motorrotationdirection();
  ::PROTOBUF_NAMESPACE_ID::uint32 motorrotationdirection() const;
  void set_motorrotationdirection(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 hornStatus = 10;
  void clear_hornstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 hornstatus() const;
  void set_hornstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool yawInvaild = 11;
  void clear_yawinvaild();
  bool yawinvaild() const;
  void set_yawinvaild(bool value);

  // double yawRate = 12;
  void clear_yawrate();
  double yawrate() const;
  void set_yawrate(double value);

  // double lateralAcceleration = 13;
  void clear_lateralacceleration();
  double lateralacceleration() const;
  void set_lateralacceleration(double value);

  // double longitudinalAcceleration = 14;
  void clear_longitudinalacceleration();
  double longitudinalacceleration() const;
  void set_longitudinalacceleration(double value);

  // uint32 batteryCapacity = 15;
  void clear_batterycapacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 batterycapacity() const;
  void set_batterycapacity(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 airConditionerStatus = 16;
  void clear_airconditionerstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 airconditionerstatus() const;
  void set_airconditionerstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 smallDecisionStatus = 17;
  void clear_smalldecisionstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 smalldecisionstatus() const;
  void set_smalldecisionstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 szWaterPercent = 18;
  void clear_szwaterpercent();
  ::PROTOBUF_NAMESPACE_ID::uint32 szwaterpercent() const;
  void set_szwaterpercent(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 tipperHopperStatus = 20;
  void clear_tipperhopperstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 tipperhopperstatus() const;
  void set_tipperhopperstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 tipperHopperErrStatus = 21;
  void clear_tipperhoppererrstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 tipperhoppererrstatus() const;
  void set_tipperhoppererrstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double feedbackCurvature = 23;
  void clear_feedbackcurvature();
  double feedbackcurvature() const;
  void set_feedbackcurvature(double value);

  // uint32 electronicParkingIndication = 22;
  void clear_electronicparkingindication();
  ::PROTOBUF_NAMESPACE_ID::uint32 electronicparkingindication() const;
  void set_electronicparkingindication(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 diffLockStatus = 25;
  void clear_difflockstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 difflockstatus() const;
  void set_difflockstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double wheelAngleVoltageSignalFeedback = 24;
  void clear_wheelanglevoltagesignalfeedback();
  double wheelanglevoltagesignalfeedback() const;
  void set_wheelanglevoltagesignalfeedback(double value);

  // uint32 cleaningSystemWorkMode = 26;
  void clear_cleaningsystemworkmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 cleaningsystemworkmode() const;
  void set_cleaningsystemworkmode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 cleaningSystemWorkStatus = 27;
  void clear_cleaningsystemworkstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 cleaningsystemworkstatus() const;
  void set_cleaningsystemworkstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float liquidTemperature = 28;
  void clear_liquidtemperature();
  float liquidtemperature() const;
  void set_liquidtemperature(float value);

  // float liquidLevelStatus = 29;
  void clear_liquidlevelstatus();
  float liquidlevelstatus() const;
  void set_liquidlevelstatus(float value);

  // uint32 cleaningSystemFaultLevel = 30;
  void clear_cleaningsystemfaultlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 cleaningsystemfaultlevel() const;
  void set_cleaningsystemfaultlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 cleaningSystemFaultCode = 31;
  void clear_cleaningsystemfaultcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 cleaningsystemfaultcode() const;
  void set_cleaningsystemfaultcode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 driverEpbOn = 32;
  void clear_driverepbon();
  ::PROTOBUF_NAMESPACE_ID::uint32 driverepbon() const;
  void set_driverepbon(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 driverEpbOff = 33;
  void clear_driverepboff();
  ::PROTOBUF_NAMESPACE_ID::uint32 driverepboff() const;
  void set_driverepboff(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 leftDoor1 = 34;
  void clear_leftdoor1();
  ::PROTOBUF_NAMESPACE_ID::uint32 leftdoor1() const;
  void set_leftdoor1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 leftDoor2 = 35;
  void clear_leftdoor2();
  ::PROTOBUF_NAMESPACE_ID::uint32 leftdoor2() const;
  void set_leftdoor2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 leftDoor3 = 36;
  void clear_leftdoor3();
  ::PROTOBUF_NAMESPACE_ID::uint32 leftdoor3() const;
  void set_leftdoor3(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 leftDoor4 = 37;
  void clear_leftdoor4();
  ::PROTOBUF_NAMESPACE_ID::uint32 leftdoor4() const;
  void set_leftdoor4(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rightDoor1 = 38;
  void clear_rightdoor1();
  ::PROTOBUF_NAMESPACE_ID::uint32 rightdoor1() const;
  void set_rightdoor1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rightDoor2 = 39;
  void clear_rightdoor2();
  ::PROTOBUF_NAMESPACE_ID::uint32 rightdoor2() const;
  void set_rightdoor2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rightDoor3 = 40;
  void clear_rightdoor3();
  ::PROTOBUF_NAMESPACE_ID::uint32 rightdoor3() const;
  void set_rightdoor3(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rightDoor4 = 41;
  void clear_rightdoor4();
  ::PROTOBUF_NAMESPACE_ID::uint32 rightdoor4() const;
  void set_rightdoor4(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 seatBeltStatus = 42;
  void clear_seatbeltstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 seatbeltstatus() const;
  void set_seatbeltstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 leaveSeatStatus = 43;
  void clear_leaveseatstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 leaveseatstatus() const;
  void set_leaveseatstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 holdSteeringWheel = 44;
  void clear_holdsteeringwheel();
  ::PROTOBUF_NAMESPACE_ID::uint32 holdsteeringwheel() const;
  void set_holdsteeringwheel(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float leftFrontWheelSpeed = 45;
  void clear_leftfrontwheelspeed();
  float leftfrontwheelspeed() const;
  void set_leftfrontwheelspeed(float value);

  // float rightFrontWheelSpeed = 46;
  void clear_rightfrontwheelspeed();
  float rightfrontwheelspeed() const;
  void set_rightfrontwheelspeed(float value);

  // float leftRearWheelSpeed = 47;
  void clear_leftrearwheelspeed();
  float leftrearwheelspeed() const;
  void set_leftrearwheelspeed(float value);

  // float rightRearWheelSpeed = 48;
  void clear_rightrearwheelspeed();
  float rightrearwheelspeed() const;
  void set_rightrearwheelspeed(float value);

  // uint32 collisionTape = 49;
  void clear_collisiontape();
  ::PROTOBUF_NAMESPACE_ID::uint32 collisiontape() const;
  void set_collisiontape(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IBUS.VehicleAuxiliaryInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::IBUS::Header* header_;
  ::IBUS::TyreInfoList* tyreinfolist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leftlightstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rightlightstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lowlightstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 highlightstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 emergencylightstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frontfoglightstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rearfoglightstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 motorrotationdirection_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hornstatus_;
  bool yawinvaild_;
  double yawrate_;
  double lateralacceleration_;
  double longitudinalacceleration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batterycapacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 airconditionerstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 smalldecisionstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 szwaterpercent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tipperhopperstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tipperhoppererrstatus_;
  double feedbackcurvature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 electronicparkingindication_;
  ::PROTOBUF_NAMESPACE_ID::uint32 difflockstatus_;
  double wheelanglevoltagesignalfeedback_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cleaningsystemworkmode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cleaningsystemworkstatus_;
  float liquidtemperature_;
  float liquidlevelstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cleaningsystemfaultlevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cleaningsystemfaultcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 driverepbon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 driverepboff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leftdoor1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leftdoor2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leftdoor3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leftdoor4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rightdoor1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rightdoor2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rightdoor3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rightdoor4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seatbeltstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leaveseatstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 holdsteeringwheel_;
  float leftfrontwheelspeed_;
  float rightfrontwheelspeed_;
  float leftrearwheelspeed_;
  float rightrearwheelspeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 collisiontape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fauxiliary_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TyreInfo

// uint32 tyreLocation = 1;
inline void TyreInfo::clear_tyrelocation() {
  tyrelocation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TyreInfo::tyrelocation() const {
  // @@protoc_insertion_point(field_get:IBUS.TyreInfo.tyreLocation)
  return tyrelocation_;
}
inline void TyreInfo::set_tyrelocation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tyrelocation_ = value;
  // @@protoc_insertion_point(field_set:IBUS.TyreInfo.tyreLocation)
}

// uint32 tyrePressure = 2;
inline void TyreInfo::clear_tyrepressure() {
  tyrepressure_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TyreInfo::tyrepressure() const {
  // @@protoc_insertion_point(field_get:IBUS.TyreInfo.tyrePressure)
  return tyrepressure_;
}
inline void TyreInfo::set_tyrepressure(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tyrepressure_ = value;
  // @@protoc_insertion_point(field_set:IBUS.TyreInfo.tyrePressure)
}

// uint32 tyreTemperature = 3;
inline void TyreInfo::clear_tyretemperature() {
  tyretemperature_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TyreInfo::tyretemperature() const {
  // @@protoc_insertion_point(field_get:IBUS.TyreInfo.tyreTemperature)
  return tyretemperature_;
}
inline void TyreInfo::set_tyretemperature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tyretemperature_ = value;
  // @@protoc_insertion_point(field_set:IBUS.TyreInfo.tyreTemperature)
}

// uint32 tyreSpeed = 4;
inline void TyreInfo::clear_tyrespeed() {
  tyrespeed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TyreInfo::tyrespeed() const {
  // @@protoc_insertion_point(field_get:IBUS.TyreInfo.tyreSpeed)
  return tyrespeed_;
}
inline void TyreInfo::set_tyrespeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tyrespeed_ = value;
  // @@protoc_insertion_point(field_set:IBUS.TyreInfo.tyreSpeed)
}

// -------------------------------------------------------------------

// TyreInfoList

// repeated .IBUS.TyreInfo tyreInfoList = 1;
inline int TyreInfoList::tyreinfolist_size() const {
  return tyreinfolist_.size();
}
inline void TyreInfoList::clear_tyreinfolist() {
  tyreinfolist_.Clear();
}
inline ::IBUS::TyreInfo* TyreInfoList::mutable_tyreinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:IBUS.TyreInfoList.tyreInfoList)
  return tyreinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::TyreInfo >*
TyreInfoList::mutable_tyreinfolist() {
  // @@protoc_insertion_point(field_mutable_list:IBUS.TyreInfoList.tyreInfoList)
  return &tyreinfolist_;
}
inline const ::IBUS::TyreInfo& TyreInfoList::tyreinfolist(int index) const {
  // @@protoc_insertion_point(field_get:IBUS.TyreInfoList.tyreInfoList)
  return tyreinfolist_.Get(index);
}
inline ::IBUS::TyreInfo* TyreInfoList::add_tyreinfolist() {
  // @@protoc_insertion_point(field_add:IBUS.TyreInfoList.tyreInfoList)
  return tyreinfolist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::TyreInfo >&
TyreInfoList::tyreinfolist() const {
  // @@protoc_insertion_point(field_list:IBUS.TyreInfoList.tyreInfoList)
  return tyreinfolist_;
}

// -------------------------------------------------------------------

// VehicleAuxiliaryInfo

// .IBUS.Header header = 1;
inline bool VehicleAuxiliaryInfo::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::IBUS::Header& VehicleAuxiliaryInfo::header() const {
  const ::IBUS::Header* p = header_;
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::Header*>(
      &::IBUS::_Header_default_instance_);
}
inline ::IBUS::Header* VehicleAuxiliaryInfo::release_header() {
  // @@protoc_insertion_point(field_release:IBUS.VehicleAuxiliaryInfo.header)
  
  ::IBUS::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::IBUS::Header* VehicleAuxiliaryInfo::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.VehicleAuxiliaryInfo.header)
  return header_;
}
inline void VehicleAuxiliaryInfo::set_allocated_header(::IBUS::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:IBUS.VehicleAuxiliaryInfo.header)
}

// uint32 leftLightStatus = 2;
inline void VehicleAuxiliaryInfo::clear_leftlightstatus() {
  leftlightstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::leftlightstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.leftLightStatus)
  return leftlightstatus_;
}
inline void VehicleAuxiliaryInfo::set_leftlightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leftlightstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.leftLightStatus)
}

// uint32 rightLightStatus = 3;
inline void VehicleAuxiliaryInfo::clear_rightlightstatus() {
  rightlightstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::rightlightstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.rightLightStatus)
  return rightlightstatus_;
}
inline void VehicleAuxiliaryInfo::set_rightlightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rightlightstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.rightLightStatus)
}

// uint32 lowLightStatus = 4;
inline void VehicleAuxiliaryInfo::clear_lowlightstatus() {
  lowlightstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::lowlightstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.lowLightStatus)
  return lowlightstatus_;
}
inline void VehicleAuxiliaryInfo::set_lowlightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lowlightstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.lowLightStatus)
}

// uint32 highLightStatus = 5;
inline void VehicleAuxiliaryInfo::clear_highlightstatus() {
  highlightstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::highlightstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.highLightStatus)
  return highlightstatus_;
}
inline void VehicleAuxiliaryInfo::set_highlightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  highlightstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.highLightStatus)
}

// uint32 emergencyLightStatus = 6;
inline void VehicleAuxiliaryInfo::clear_emergencylightstatus() {
  emergencylightstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::emergencylightstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.emergencyLightStatus)
  return emergencylightstatus_;
}
inline void VehicleAuxiliaryInfo::set_emergencylightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  emergencylightstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.emergencyLightStatus)
}

// uint32 frontFogLightStatus = 7;
inline void VehicleAuxiliaryInfo::clear_frontfoglightstatus() {
  frontfoglightstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::frontfoglightstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.frontFogLightStatus)
  return frontfoglightstatus_;
}
inline void VehicleAuxiliaryInfo::set_frontfoglightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frontfoglightstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.frontFogLightStatus)
}

// uint32 rearFogLightStatus = 8;
inline void VehicleAuxiliaryInfo::clear_rearfoglightstatus() {
  rearfoglightstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::rearfoglightstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.rearFogLightStatus)
  return rearfoglightstatus_;
}
inline void VehicleAuxiliaryInfo::set_rearfoglightstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rearfoglightstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.rearFogLightStatus)
}

// uint32 motorRotationDirection = 9;
inline void VehicleAuxiliaryInfo::clear_motorrotationdirection() {
  motorrotationdirection_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::motorrotationdirection() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.motorRotationDirection)
  return motorrotationdirection_;
}
inline void VehicleAuxiliaryInfo::set_motorrotationdirection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  motorrotationdirection_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.motorRotationDirection)
}

// uint32 hornStatus = 10;
inline void VehicleAuxiliaryInfo::clear_hornstatus() {
  hornstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::hornstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.hornStatus)
  return hornstatus_;
}
inline void VehicleAuxiliaryInfo::set_hornstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hornstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.hornStatus)
}

// bool yawInvaild = 11;
inline void VehicleAuxiliaryInfo::clear_yawinvaild() {
  yawinvaild_ = false;
}
inline bool VehicleAuxiliaryInfo::yawinvaild() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.yawInvaild)
  return yawinvaild_;
}
inline void VehicleAuxiliaryInfo::set_yawinvaild(bool value) {
  
  yawinvaild_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.yawInvaild)
}

// double yawRate = 12;
inline void VehicleAuxiliaryInfo::clear_yawrate() {
  yawrate_ = 0;
}
inline double VehicleAuxiliaryInfo::yawrate() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.yawRate)
  return yawrate_;
}
inline void VehicleAuxiliaryInfo::set_yawrate(double value) {
  
  yawrate_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.yawRate)
}

// double lateralAcceleration = 13;
inline void VehicleAuxiliaryInfo::clear_lateralacceleration() {
  lateralacceleration_ = 0;
}
inline double VehicleAuxiliaryInfo::lateralacceleration() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.lateralAcceleration)
  return lateralacceleration_;
}
inline void VehicleAuxiliaryInfo::set_lateralacceleration(double value) {
  
  lateralacceleration_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.lateralAcceleration)
}

// double longitudinalAcceleration = 14;
inline void VehicleAuxiliaryInfo::clear_longitudinalacceleration() {
  longitudinalacceleration_ = 0;
}
inline double VehicleAuxiliaryInfo::longitudinalacceleration() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.longitudinalAcceleration)
  return longitudinalacceleration_;
}
inline void VehicleAuxiliaryInfo::set_longitudinalacceleration(double value) {
  
  longitudinalacceleration_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.longitudinalAcceleration)
}

// uint32 batteryCapacity = 15;
inline void VehicleAuxiliaryInfo::clear_batterycapacity() {
  batterycapacity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::batterycapacity() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.batteryCapacity)
  return batterycapacity_;
}
inline void VehicleAuxiliaryInfo::set_batterycapacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batterycapacity_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.batteryCapacity)
}

// uint32 airConditionerStatus = 16;
inline void VehicleAuxiliaryInfo::clear_airconditionerstatus() {
  airconditionerstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::airconditionerstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.airConditionerStatus)
  return airconditionerstatus_;
}
inline void VehicleAuxiliaryInfo::set_airconditionerstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  airconditionerstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.airConditionerStatus)
}

// uint32 smallDecisionStatus = 17;
inline void VehicleAuxiliaryInfo::clear_smalldecisionstatus() {
  smalldecisionstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::smalldecisionstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.smallDecisionStatus)
  return smalldecisionstatus_;
}
inline void VehicleAuxiliaryInfo::set_smalldecisionstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  smalldecisionstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.smallDecisionStatus)
}

// uint32 szWaterPercent = 18;
inline void VehicleAuxiliaryInfo::clear_szwaterpercent() {
  szwaterpercent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::szwaterpercent() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.szWaterPercent)
  return szwaterpercent_;
}
inline void VehicleAuxiliaryInfo::set_szwaterpercent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  szwaterpercent_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.szWaterPercent)
}

// .IBUS.TyreInfoList tyreInfoList = 19;
inline bool VehicleAuxiliaryInfo::has_tyreinfolist() const {
  return this != internal_default_instance() && tyreinfolist_ != nullptr;
}
inline void VehicleAuxiliaryInfo::clear_tyreinfolist() {
  if (GetArenaNoVirtual() == nullptr && tyreinfolist_ != nullptr) {
    delete tyreinfolist_;
  }
  tyreinfolist_ = nullptr;
}
inline const ::IBUS::TyreInfoList& VehicleAuxiliaryInfo::tyreinfolist() const {
  const ::IBUS::TyreInfoList* p = tyreinfolist_;
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.tyreInfoList)
  return p != nullptr ? *p : *reinterpret_cast<const ::IBUS::TyreInfoList*>(
      &::IBUS::_TyreInfoList_default_instance_);
}
inline ::IBUS::TyreInfoList* VehicleAuxiliaryInfo::release_tyreinfolist() {
  // @@protoc_insertion_point(field_release:IBUS.VehicleAuxiliaryInfo.tyreInfoList)
  
  ::IBUS::TyreInfoList* temp = tyreinfolist_;
  tyreinfolist_ = nullptr;
  return temp;
}
inline ::IBUS::TyreInfoList* VehicleAuxiliaryInfo::mutable_tyreinfolist() {
  
  if (tyreinfolist_ == nullptr) {
    auto* p = CreateMaybeMessage<::IBUS::TyreInfoList>(GetArenaNoVirtual());
    tyreinfolist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IBUS.VehicleAuxiliaryInfo.tyreInfoList)
  return tyreinfolist_;
}
inline void VehicleAuxiliaryInfo::set_allocated_tyreinfolist(::IBUS::TyreInfoList* tyreinfolist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tyreinfolist_;
  }
  if (tyreinfolist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tyreinfolist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tyreinfolist, submessage_arena);
    }
    
  } else {
    
  }
  tyreinfolist_ = tyreinfolist;
  // @@protoc_insertion_point(field_set_allocated:IBUS.VehicleAuxiliaryInfo.tyreInfoList)
}

// uint32 tipperHopperStatus = 20;
inline void VehicleAuxiliaryInfo::clear_tipperhopperstatus() {
  tipperhopperstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::tipperhopperstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.tipperHopperStatus)
  return tipperhopperstatus_;
}
inline void VehicleAuxiliaryInfo::set_tipperhopperstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tipperhopperstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.tipperHopperStatus)
}

// uint32 tipperHopperErrStatus = 21;
inline void VehicleAuxiliaryInfo::clear_tipperhoppererrstatus() {
  tipperhoppererrstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::tipperhoppererrstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.tipperHopperErrStatus)
  return tipperhoppererrstatus_;
}
inline void VehicleAuxiliaryInfo::set_tipperhoppererrstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tipperhoppererrstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.tipperHopperErrStatus)
}

// uint32 electronicParkingIndication = 22;
inline void VehicleAuxiliaryInfo::clear_electronicparkingindication() {
  electronicparkingindication_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::electronicparkingindication() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.electronicParkingIndication)
  return electronicparkingindication_;
}
inline void VehicleAuxiliaryInfo::set_electronicparkingindication(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  electronicparkingindication_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.electronicParkingIndication)
}

// double feedbackCurvature = 23;
inline void VehicleAuxiliaryInfo::clear_feedbackcurvature() {
  feedbackcurvature_ = 0;
}
inline double VehicleAuxiliaryInfo::feedbackcurvature() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.feedbackCurvature)
  return feedbackcurvature_;
}
inline void VehicleAuxiliaryInfo::set_feedbackcurvature(double value) {
  
  feedbackcurvature_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.feedbackCurvature)
}

// double wheelAngleVoltageSignalFeedback = 24;
inline void VehicleAuxiliaryInfo::clear_wheelanglevoltagesignalfeedback() {
  wheelanglevoltagesignalfeedback_ = 0;
}
inline double VehicleAuxiliaryInfo::wheelanglevoltagesignalfeedback() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.wheelAngleVoltageSignalFeedback)
  return wheelanglevoltagesignalfeedback_;
}
inline void VehicleAuxiliaryInfo::set_wheelanglevoltagesignalfeedback(double value) {
  
  wheelanglevoltagesignalfeedback_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.wheelAngleVoltageSignalFeedback)
}

// uint32 diffLockStatus = 25;
inline void VehicleAuxiliaryInfo::clear_difflockstatus() {
  difflockstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::difflockstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.diffLockStatus)
  return difflockstatus_;
}
inline void VehicleAuxiliaryInfo::set_difflockstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  difflockstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.diffLockStatus)
}

// uint32 cleaningSystemWorkMode = 26;
inline void VehicleAuxiliaryInfo::clear_cleaningsystemworkmode() {
  cleaningsystemworkmode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::cleaningsystemworkmode() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.cleaningSystemWorkMode)
  return cleaningsystemworkmode_;
}
inline void VehicleAuxiliaryInfo::set_cleaningsystemworkmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cleaningsystemworkmode_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.cleaningSystemWorkMode)
}

// uint32 cleaningSystemWorkStatus = 27;
inline void VehicleAuxiliaryInfo::clear_cleaningsystemworkstatus() {
  cleaningsystemworkstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::cleaningsystemworkstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.cleaningSystemWorkStatus)
  return cleaningsystemworkstatus_;
}
inline void VehicleAuxiliaryInfo::set_cleaningsystemworkstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cleaningsystemworkstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.cleaningSystemWorkStatus)
}

// float liquidTemperature = 28;
inline void VehicleAuxiliaryInfo::clear_liquidtemperature() {
  liquidtemperature_ = 0;
}
inline float VehicleAuxiliaryInfo::liquidtemperature() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.liquidTemperature)
  return liquidtemperature_;
}
inline void VehicleAuxiliaryInfo::set_liquidtemperature(float value) {
  
  liquidtemperature_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.liquidTemperature)
}

// float liquidLevelStatus = 29;
inline void VehicleAuxiliaryInfo::clear_liquidlevelstatus() {
  liquidlevelstatus_ = 0;
}
inline float VehicleAuxiliaryInfo::liquidlevelstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.liquidLevelStatus)
  return liquidlevelstatus_;
}
inline void VehicleAuxiliaryInfo::set_liquidlevelstatus(float value) {
  
  liquidlevelstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.liquidLevelStatus)
}

// uint32 cleaningSystemFaultLevel = 30;
inline void VehicleAuxiliaryInfo::clear_cleaningsystemfaultlevel() {
  cleaningsystemfaultlevel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::cleaningsystemfaultlevel() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.cleaningSystemFaultLevel)
  return cleaningsystemfaultlevel_;
}
inline void VehicleAuxiliaryInfo::set_cleaningsystemfaultlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cleaningsystemfaultlevel_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.cleaningSystemFaultLevel)
}

// uint32 cleaningSystemFaultCode = 31;
inline void VehicleAuxiliaryInfo::clear_cleaningsystemfaultcode() {
  cleaningsystemfaultcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::cleaningsystemfaultcode() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.cleaningSystemFaultCode)
  return cleaningsystemfaultcode_;
}
inline void VehicleAuxiliaryInfo::set_cleaningsystemfaultcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cleaningsystemfaultcode_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.cleaningSystemFaultCode)
}

// uint32 driverEpbOn = 32;
inline void VehicleAuxiliaryInfo::clear_driverepbon() {
  driverepbon_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::driverepbon() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.driverEpbOn)
  return driverepbon_;
}
inline void VehicleAuxiliaryInfo::set_driverepbon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  driverepbon_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.driverEpbOn)
}

// uint32 driverEpbOff = 33;
inline void VehicleAuxiliaryInfo::clear_driverepboff() {
  driverepboff_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::driverepboff() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.driverEpbOff)
  return driverepboff_;
}
inline void VehicleAuxiliaryInfo::set_driverepboff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  driverepboff_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.driverEpbOff)
}

// uint32 leftDoor1 = 34;
inline void VehicleAuxiliaryInfo::clear_leftdoor1() {
  leftdoor1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::leftdoor1() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.leftDoor1)
  return leftdoor1_;
}
inline void VehicleAuxiliaryInfo::set_leftdoor1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leftdoor1_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.leftDoor1)
}

// uint32 leftDoor2 = 35;
inline void VehicleAuxiliaryInfo::clear_leftdoor2() {
  leftdoor2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::leftdoor2() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.leftDoor2)
  return leftdoor2_;
}
inline void VehicleAuxiliaryInfo::set_leftdoor2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leftdoor2_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.leftDoor2)
}

// uint32 leftDoor3 = 36;
inline void VehicleAuxiliaryInfo::clear_leftdoor3() {
  leftdoor3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::leftdoor3() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.leftDoor3)
  return leftdoor3_;
}
inline void VehicleAuxiliaryInfo::set_leftdoor3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leftdoor3_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.leftDoor3)
}

// uint32 leftDoor4 = 37;
inline void VehicleAuxiliaryInfo::clear_leftdoor4() {
  leftdoor4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::leftdoor4() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.leftDoor4)
  return leftdoor4_;
}
inline void VehicleAuxiliaryInfo::set_leftdoor4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leftdoor4_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.leftDoor4)
}

// uint32 rightDoor1 = 38;
inline void VehicleAuxiliaryInfo::clear_rightdoor1() {
  rightdoor1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::rightdoor1() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.rightDoor1)
  return rightdoor1_;
}
inline void VehicleAuxiliaryInfo::set_rightdoor1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rightdoor1_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.rightDoor1)
}

// uint32 rightDoor2 = 39;
inline void VehicleAuxiliaryInfo::clear_rightdoor2() {
  rightdoor2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::rightdoor2() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.rightDoor2)
  return rightdoor2_;
}
inline void VehicleAuxiliaryInfo::set_rightdoor2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rightdoor2_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.rightDoor2)
}

// uint32 rightDoor3 = 40;
inline void VehicleAuxiliaryInfo::clear_rightdoor3() {
  rightdoor3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::rightdoor3() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.rightDoor3)
  return rightdoor3_;
}
inline void VehicleAuxiliaryInfo::set_rightdoor3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rightdoor3_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.rightDoor3)
}

// uint32 rightDoor4 = 41;
inline void VehicleAuxiliaryInfo::clear_rightdoor4() {
  rightdoor4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::rightdoor4() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.rightDoor4)
  return rightdoor4_;
}
inline void VehicleAuxiliaryInfo::set_rightdoor4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rightdoor4_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.rightDoor4)
}

// uint32 seatBeltStatus = 42;
inline void VehicleAuxiliaryInfo::clear_seatbeltstatus() {
  seatbeltstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::seatbeltstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.seatBeltStatus)
  return seatbeltstatus_;
}
inline void VehicleAuxiliaryInfo::set_seatbeltstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seatbeltstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.seatBeltStatus)
}

// uint32 leaveSeatStatus = 43;
inline void VehicleAuxiliaryInfo::clear_leaveseatstatus() {
  leaveseatstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::leaveseatstatus() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.leaveSeatStatus)
  return leaveseatstatus_;
}
inline void VehicleAuxiliaryInfo::set_leaveseatstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leaveseatstatus_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.leaveSeatStatus)
}

// uint32 holdSteeringWheel = 44;
inline void VehicleAuxiliaryInfo::clear_holdsteeringwheel() {
  holdsteeringwheel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::holdsteeringwheel() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.holdSteeringWheel)
  return holdsteeringwheel_;
}
inline void VehicleAuxiliaryInfo::set_holdsteeringwheel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  holdsteeringwheel_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.holdSteeringWheel)
}

// float leftFrontWheelSpeed = 45;
inline void VehicleAuxiliaryInfo::clear_leftfrontwheelspeed() {
  leftfrontwheelspeed_ = 0;
}
inline float VehicleAuxiliaryInfo::leftfrontwheelspeed() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.leftFrontWheelSpeed)
  return leftfrontwheelspeed_;
}
inline void VehicleAuxiliaryInfo::set_leftfrontwheelspeed(float value) {
  
  leftfrontwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.leftFrontWheelSpeed)
}

// float rightFrontWheelSpeed = 46;
inline void VehicleAuxiliaryInfo::clear_rightfrontwheelspeed() {
  rightfrontwheelspeed_ = 0;
}
inline float VehicleAuxiliaryInfo::rightfrontwheelspeed() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.rightFrontWheelSpeed)
  return rightfrontwheelspeed_;
}
inline void VehicleAuxiliaryInfo::set_rightfrontwheelspeed(float value) {
  
  rightfrontwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.rightFrontWheelSpeed)
}

// float leftRearWheelSpeed = 47;
inline void VehicleAuxiliaryInfo::clear_leftrearwheelspeed() {
  leftrearwheelspeed_ = 0;
}
inline float VehicleAuxiliaryInfo::leftrearwheelspeed() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.leftRearWheelSpeed)
  return leftrearwheelspeed_;
}
inline void VehicleAuxiliaryInfo::set_leftrearwheelspeed(float value) {
  
  leftrearwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.leftRearWheelSpeed)
}

// float rightRearWheelSpeed = 48;
inline void VehicleAuxiliaryInfo::clear_rightrearwheelspeed() {
  rightrearwheelspeed_ = 0;
}
inline float VehicleAuxiliaryInfo::rightrearwheelspeed() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.rightRearWheelSpeed)
  return rightrearwheelspeed_;
}
inline void VehicleAuxiliaryInfo::set_rightrearwheelspeed(float value) {
  
  rightrearwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.rightRearWheelSpeed)
}

// uint32 collisionTape = 49;
inline void VehicleAuxiliaryInfo::clear_collisiontape() {
  collisiontape_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehicleAuxiliaryInfo::collisiontape() const {
  // @@protoc_insertion_point(field_get:IBUS.VehicleAuxiliaryInfo.collisionTape)
  return collisiontape_;
}
inline void VehicleAuxiliaryInfo::set_collisiontape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  collisiontape_ = value;
  // @@protoc_insertion_point(field_set:IBUS.VehicleAuxiliaryInfo.collisionTape)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IBUS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_5fauxiliary_5finfo_2eproto
