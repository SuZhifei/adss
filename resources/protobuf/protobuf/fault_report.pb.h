// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fault_report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fault_5freport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fault_5freport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fault_5freport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fault_5freport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fault_5freport_2eproto;
namespace IBUS {
class FaultReportInfo;
class FaultReportInfoDefaultTypeInternal;
extern FaultReportInfoDefaultTypeInternal _FaultReportInfo_default_instance_;
class FaultReportMsg;
class FaultReportMsgDefaultTypeInternal;
extern FaultReportMsgDefaultTypeInternal _FaultReportMsg_default_instance_;
}  // namespace IBUS
PROTOBUF_NAMESPACE_OPEN
template<> ::IBUS::FaultReportInfo* Arena::CreateMaybeMessage<::IBUS::FaultReportInfo>(Arena*);
template<> ::IBUS::FaultReportMsg* Arena::CreateMaybeMessage<::IBUS::FaultReportMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IBUS {

// ===================================================================

class FaultReportInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.FaultReportInfo) */ {
 public:
  FaultReportInfo();
  virtual ~FaultReportInfo();

  FaultReportInfo(const FaultReportInfo& from);
  FaultReportInfo(FaultReportInfo&& from) noexcept
    : FaultReportInfo() {
    *this = ::std::move(from);
  }

  inline FaultReportInfo& operator=(const FaultReportInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaultReportInfo& operator=(FaultReportInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaultReportInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaultReportInfo* internal_default_instance() {
    return reinterpret_cast<const FaultReportInfo*>(
               &_FaultReportInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FaultReportInfo& a, FaultReportInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FaultReportInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaultReportInfo* New() const final {
    return CreateMaybeMessage<FaultReportInfo>(nullptr);
  }

  FaultReportInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaultReportInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaultReportInfo& from);
  void MergeFrom(const FaultReportInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaultReportInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.FaultReportInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fault_5freport_2eproto);
    return ::descriptor_table_fault_5freport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultNameFieldNumber = 1,
    kFaultGenerateUintFieldNumber = 3,
    kFaultCheckUintFieldNumber = 4,
    kFaultInfluenceFieldNumber = 5,
    kFualtRecoveryStrategyFieldNumber = 6,
    kMaintainSuggestionsFieldNumber = 9,
    kFaultLevelFieldNumber = 2,
    kFaultLockFieldNumber = 7,
    kFaultRemoteClearFieldNumber = 8,
  };
  // string fault_name = 1;
  void clear_fault_name();
  const std::string& fault_name() const;
  void set_fault_name(const std::string& value);
  void set_fault_name(std::string&& value);
  void set_fault_name(const char* value);
  void set_fault_name(const char* value, size_t size);
  std::string* mutable_fault_name();
  std::string* release_fault_name();
  void set_allocated_fault_name(std::string* fault_name);

  // string fault_generate_uint = 3;
  void clear_fault_generate_uint();
  const std::string& fault_generate_uint() const;
  void set_fault_generate_uint(const std::string& value);
  void set_fault_generate_uint(std::string&& value);
  void set_fault_generate_uint(const char* value);
  void set_fault_generate_uint(const char* value, size_t size);
  std::string* mutable_fault_generate_uint();
  std::string* release_fault_generate_uint();
  void set_allocated_fault_generate_uint(std::string* fault_generate_uint);

  // string fault_check_uint = 4;
  void clear_fault_check_uint();
  const std::string& fault_check_uint() const;
  void set_fault_check_uint(const std::string& value);
  void set_fault_check_uint(std::string&& value);
  void set_fault_check_uint(const char* value);
  void set_fault_check_uint(const char* value, size_t size);
  std::string* mutable_fault_check_uint();
  std::string* release_fault_check_uint();
  void set_allocated_fault_check_uint(std::string* fault_check_uint);

  // string fault_influence = 5;
  void clear_fault_influence();
  const std::string& fault_influence() const;
  void set_fault_influence(const std::string& value);
  void set_fault_influence(std::string&& value);
  void set_fault_influence(const char* value);
  void set_fault_influence(const char* value, size_t size);
  std::string* mutable_fault_influence();
  std::string* release_fault_influence();
  void set_allocated_fault_influence(std::string* fault_influence);

  // string fualt_recovery_strategy = 6;
  void clear_fualt_recovery_strategy();
  const std::string& fualt_recovery_strategy() const;
  void set_fualt_recovery_strategy(const std::string& value);
  void set_fualt_recovery_strategy(std::string&& value);
  void set_fualt_recovery_strategy(const char* value);
  void set_fualt_recovery_strategy(const char* value, size_t size);
  std::string* mutable_fualt_recovery_strategy();
  std::string* release_fualt_recovery_strategy();
  void set_allocated_fualt_recovery_strategy(std::string* fualt_recovery_strategy);

  // string maintain_suggestions = 9;
  void clear_maintain_suggestions();
  const std::string& maintain_suggestions() const;
  void set_maintain_suggestions(const std::string& value);
  void set_maintain_suggestions(std::string&& value);
  void set_maintain_suggestions(const char* value);
  void set_maintain_suggestions(const char* value, size_t size);
  std::string* mutable_maintain_suggestions();
  std::string* release_maintain_suggestions();
  void set_allocated_maintain_suggestions(std::string* maintain_suggestions);

  // int32 fault_level = 2;
  void clear_fault_level();
  ::PROTOBUF_NAMESPACE_ID::int32 fault_level() const;
  void set_fault_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool fault_lock = 7;
  void clear_fault_lock();
  bool fault_lock() const;
  void set_fault_lock(bool value);

  // bool fault_remote_clear = 8;
  void clear_fault_remote_clear();
  bool fault_remote_clear() const;
  void set_fault_remote_clear(bool value);

  // @@protoc_insertion_point(class_scope:IBUS.FaultReportInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fault_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fault_generate_uint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fault_check_uint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fault_influence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fualt_recovery_strategy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maintain_suggestions_;
  ::PROTOBUF_NAMESPACE_ID::int32 fault_level_;
  bool fault_lock_;
  bool fault_remote_clear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fault_5freport_2eproto;
};
// -------------------------------------------------------------------

class FaultReportMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IBUS.FaultReportMsg) */ {
 public:
  FaultReportMsg();
  virtual ~FaultReportMsg();

  FaultReportMsg(const FaultReportMsg& from);
  FaultReportMsg(FaultReportMsg&& from) noexcept
    : FaultReportMsg() {
    *this = ::std::move(from);
  }

  inline FaultReportMsg& operator=(const FaultReportMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaultReportMsg& operator=(FaultReportMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaultReportMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaultReportMsg* internal_default_instance() {
    return reinterpret_cast<const FaultReportMsg*>(
               &_FaultReportMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FaultReportMsg& a, FaultReportMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(FaultReportMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaultReportMsg* New() const final {
    return CreateMaybeMessage<FaultReportMsg>(nullptr);
  }

  FaultReportMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaultReportMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaultReportMsg& from);
  void MergeFrom(const FaultReportMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaultReportMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IBUS.FaultReportMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fault_5freport_2eproto);
    return ::descriptor_table_fault_5freport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultListFieldNumber = 2,
    kHasFaultFieldNumber = 1,
  };
  // repeated .IBUS.FaultReportInfo fault_list = 2;
  int fault_list_size() const;
  void clear_fault_list();
  ::IBUS::FaultReportInfo* mutable_fault_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::FaultReportInfo >*
      mutable_fault_list();
  const ::IBUS::FaultReportInfo& fault_list(int index) const;
  ::IBUS::FaultReportInfo* add_fault_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::FaultReportInfo >&
      fault_list() const;

  // bool has_fault = 1;
  void clear_has_fault();
  bool has_fault() const;
  void set_has_fault(bool value);

  // @@protoc_insertion_point(class_scope:IBUS.FaultReportMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::FaultReportInfo > fault_list_;
  bool has_fault_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fault_5freport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaultReportInfo

// string fault_name = 1;
inline void FaultReportInfo::clear_fault_name() {
  fault_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaultReportInfo::fault_name() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.fault_name)
  return fault_name_.GetNoArena();
}
inline void FaultReportInfo::set_fault_name(const std::string& value) {
  
  fault_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.fault_name)
}
inline void FaultReportInfo::set_fault_name(std::string&& value) {
  
  fault_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IBUS.FaultReportInfo.fault_name)
}
inline void FaultReportInfo::set_fault_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fault_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IBUS.FaultReportInfo.fault_name)
}
inline void FaultReportInfo::set_fault_name(const char* value, size_t size) {
  
  fault_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IBUS.FaultReportInfo.fault_name)
}
inline std::string* FaultReportInfo::mutable_fault_name() {
  
  // @@protoc_insertion_point(field_mutable:IBUS.FaultReportInfo.fault_name)
  return fault_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaultReportInfo::release_fault_name() {
  // @@protoc_insertion_point(field_release:IBUS.FaultReportInfo.fault_name)
  
  return fault_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaultReportInfo::set_allocated_fault_name(std::string* fault_name) {
  if (fault_name != nullptr) {
    
  } else {
    
  }
  fault_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fault_name);
  // @@protoc_insertion_point(field_set_allocated:IBUS.FaultReportInfo.fault_name)
}

// int32 fault_level = 2;
inline void FaultReportInfo::clear_fault_level() {
  fault_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaultReportInfo::fault_level() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.fault_level)
  return fault_level_;
}
inline void FaultReportInfo::set_fault_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fault_level_ = value;
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.fault_level)
}

// string fault_generate_uint = 3;
inline void FaultReportInfo::clear_fault_generate_uint() {
  fault_generate_uint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaultReportInfo::fault_generate_uint() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.fault_generate_uint)
  return fault_generate_uint_.GetNoArena();
}
inline void FaultReportInfo::set_fault_generate_uint(const std::string& value) {
  
  fault_generate_uint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.fault_generate_uint)
}
inline void FaultReportInfo::set_fault_generate_uint(std::string&& value) {
  
  fault_generate_uint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IBUS.FaultReportInfo.fault_generate_uint)
}
inline void FaultReportInfo::set_fault_generate_uint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fault_generate_uint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IBUS.FaultReportInfo.fault_generate_uint)
}
inline void FaultReportInfo::set_fault_generate_uint(const char* value, size_t size) {
  
  fault_generate_uint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IBUS.FaultReportInfo.fault_generate_uint)
}
inline std::string* FaultReportInfo::mutable_fault_generate_uint() {
  
  // @@protoc_insertion_point(field_mutable:IBUS.FaultReportInfo.fault_generate_uint)
  return fault_generate_uint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaultReportInfo::release_fault_generate_uint() {
  // @@protoc_insertion_point(field_release:IBUS.FaultReportInfo.fault_generate_uint)
  
  return fault_generate_uint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaultReportInfo::set_allocated_fault_generate_uint(std::string* fault_generate_uint) {
  if (fault_generate_uint != nullptr) {
    
  } else {
    
  }
  fault_generate_uint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fault_generate_uint);
  // @@protoc_insertion_point(field_set_allocated:IBUS.FaultReportInfo.fault_generate_uint)
}

// string fault_check_uint = 4;
inline void FaultReportInfo::clear_fault_check_uint() {
  fault_check_uint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaultReportInfo::fault_check_uint() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.fault_check_uint)
  return fault_check_uint_.GetNoArena();
}
inline void FaultReportInfo::set_fault_check_uint(const std::string& value) {
  
  fault_check_uint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.fault_check_uint)
}
inline void FaultReportInfo::set_fault_check_uint(std::string&& value) {
  
  fault_check_uint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IBUS.FaultReportInfo.fault_check_uint)
}
inline void FaultReportInfo::set_fault_check_uint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fault_check_uint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IBUS.FaultReportInfo.fault_check_uint)
}
inline void FaultReportInfo::set_fault_check_uint(const char* value, size_t size) {
  
  fault_check_uint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IBUS.FaultReportInfo.fault_check_uint)
}
inline std::string* FaultReportInfo::mutable_fault_check_uint() {
  
  // @@protoc_insertion_point(field_mutable:IBUS.FaultReportInfo.fault_check_uint)
  return fault_check_uint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaultReportInfo::release_fault_check_uint() {
  // @@protoc_insertion_point(field_release:IBUS.FaultReportInfo.fault_check_uint)
  
  return fault_check_uint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaultReportInfo::set_allocated_fault_check_uint(std::string* fault_check_uint) {
  if (fault_check_uint != nullptr) {
    
  } else {
    
  }
  fault_check_uint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fault_check_uint);
  // @@protoc_insertion_point(field_set_allocated:IBUS.FaultReportInfo.fault_check_uint)
}

// string fault_influence = 5;
inline void FaultReportInfo::clear_fault_influence() {
  fault_influence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaultReportInfo::fault_influence() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.fault_influence)
  return fault_influence_.GetNoArena();
}
inline void FaultReportInfo::set_fault_influence(const std::string& value) {
  
  fault_influence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.fault_influence)
}
inline void FaultReportInfo::set_fault_influence(std::string&& value) {
  
  fault_influence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IBUS.FaultReportInfo.fault_influence)
}
inline void FaultReportInfo::set_fault_influence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fault_influence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IBUS.FaultReportInfo.fault_influence)
}
inline void FaultReportInfo::set_fault_influence(const char* value, size_t size) {
  
  fault_influence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IBUS.FaultReportInfo.fault_influence)
}
inline std::string* FaultReportInfo::mutable_fault_influence() {
  
  // @@protoc_insertion_point(field_mutable:IBUS.FaultReportInfo.fault_influence)
  return fault_influence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaultReportInfo::release_fault_influence() {
  // @@protoc_insertion_point(field_release:IBUS.FaultReportInfo.fault_influence)
  
  return fault_influence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaultReportInfo::set_allocated_fault_influence(std::string* fault_influence) {
  if (fault_influence != nullptr) {
    
  } else {
    
  }
  fault_influence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fault_influence);
  // @@protoc_insertion_point(field_set_allocated:IBUS.FaultReportInfo.fault_influence)
}

// string fualt_recovery_strategy = 6;
inline void FaultReportInfo::clear_fualt_recovery_strategy() {
  fualt_recovery_strategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaultReportInfo::fualt_recovery_strategy() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.fualt_recovery_strategy)
  return fualt_recovery_strategy_.GetNoArena();
}
inline void FaultReportInfo::set_fualt_recovery_strategy(const std::string& value) {
  
  fualt_recovery_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.fualt_recovery_strategy)
}
inline void FaultReportInfo::set_fualt_recovery_strategy(std::string&& value) {
  
  fualt_recovery_strategy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IBUS.FaultReportInfo.fualt_recovery_strategy)
}
inline void FaultReportInfo::set_fualt_recovery_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fualt_recovery_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IBUS.FaultReportInfo.fualt_recovery_strategy)
}
inline void FaultReportInfo::set_fualt_recovery_strategy(const char* value, size_t size) {
  
  fualt_recovery_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IBUS.FaultReportInfo.fualt_recovery_strategy)
}
inline std::string* FaultReportInfo::mutable_fualt_recovery_strategy() {
  
  // @@protoc_insertion_point(field_mutable:IBUS.FaultReportInfo.fualt_recovery_strategy)
  return fualt_recovery_strategy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaultReportInfo::release_fualt_recovery_strategy() {
  // @@protoc_insertion_point(field_release:IBUS.FaultReportInfo.fualt_recovery_strategy)
  
  return fualt_recovery_strategy_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaultReportInfo::set_allocated_fualt_recovery_strategy(std::string* fualt_recovery_strategy) {
  if (fualt_recovery_strategy != nullptr) {
    
  } else {
    
  }
  fualt_recovery_strategy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fualt_recovery_strategy);
  // @@protoc_insertion_point(field_set_allocated:IBUS.FaultReportInfo.fualt_recovery_strategy)
}

// bool fault_lock = 7;
inline void FaultReportInfo::clear_fault_lock() {
  fault_lock_ = false;
}
inline bool FaultReportInfo::fault_lock() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.fault_lock)
  return fault_lock_;
}
inline void FaultReportInfo::set_fault_lock(bool value) {
  
  fault_lock_ = value;
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.fault_lock)
}

// bool fault_remote_clear = 8;
inline void FaultReportInfo::clear_fault_remote_clear() {
  fault_remote_clear_ = false;
}
inline bool FaultReportInfo::fault_remote_clear() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.fault_remote_clear)
  return fault_remote_clear_;
}
inline void FaultReportInfo::set_fault_remote_clear(bool value) {
  
  fault_remote_clear_ = value;
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.fault_remote_clear)
}

// string maintain_suggestions = 9;
inline void FaultReportInfo::clear_maintain_suggestions() {
  maintain_suggestions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaultReportInfo::maintain_suggestions() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportInfo.maintain_suggestions)
  return maintain_suggestions_.GetNoArena();
}
inline void FaultReportInfo::set_maintain_suggestions(const std::string& value) {
  
  maintain_suggestions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IBUS.FaultReportInfo.maintain_suggestions)
}
inline void FaultReportInfo::set_maintain_suggestions(std::string&& value) {
  
  maintain_suggestions_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IBUS.FaultReportInfo.maintain_suggestions)
}
inline void FaultReportInfo::set_maintain_suggestions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maintain_suggestions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IBUS.FaultReportInfo.maintain_suggestions)
}
inline void FaultReportInfo::set_maintain_suggestions(const char* value, size_t size) {
  
  maintain_suggestions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IBUS.FaultReportInfo.maintain_suggestions)
}
inline std::string* FaultReportInfo::mutable_maintain_suggestions() {
  
  // @@protoc_insertion_point(field_mutable:IBUS.FaultReportInfo.maintain_suggestions)
  return maintain_suggestions_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaultReportInfo::release_maintain_suggestions() {
  // @@protoc_insertion_point(field_release:IBUS.FaultReportInfo.maintain_suggestions)
  
  return maintain_suggestions_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaultReportInfo::set_allocated_maintain_suggestions(std::string* maintain_suggestions) {
  if (maintain_suggestions != nullptr) {
    
  } else {
    
  }
  maintain_suggestions_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maintain_suggestions);
  // @@protoc_insertion_point(field_set_allocated:IBUS.FaultReportInfo.maintain_suggestions)
}

// -------------------------------------------------------------------

// FaultReportMsg

// bool has_fault = 1;
inline void FaultReportMsg::clear_has_fault() {
  has_fault_ = false;
}
inline bool FaultReportMsg::has_fault() const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportMsg.has_fault)
  return has_fault_;
}
inline void FaultReportMsg::set_has_fault(bool value) {
  
  has_fault_ = value;
  // @@protoc_insertion_point(field_set:IBUS.FaultReportMsg.has_fault)
}

// repeated .IBUS.FaultReportInfo fault_list = 2;
inline int FaultReportMsg::fault_list_size() const {
  return fault_list_.size();
}
inline void FaultReportMsg::clear_fault_list() {
  fault_list_.Clear();
}
inline ::IBUS::FaultReportInfo* FaultReportMsg::mutable_fault_list(int index) {
  // @@protoc_insertion_point(field_mutable:IBUS.FaultReportMsg.fault_list)
  return fault_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::FaultReportInfo >*
FaultReportMsg::mutable_fault_list() {
  // @@protoc_insertion_point(field_mutable_list:IBUS.FaultReportMsg.fault_list)
  return &fault_list_;
}
inline const ::IBUS::FaultReportInfo& FaultReportMsg::fault_list(int index) const {
  // @@protoc_insertion_point(field_get:IBUS.FaultReportMsg.fault_list)
  return fault_list_.Get(index);
}
inline ::IBUS::FaultReportInfo* FaultReportMsg::add_fault_list() {
  // @@protoc_insertion_point(field_add:IBUS.FaultReportMsg.fault_list)
  return fault_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IBUS::FaultReportInfo >&
FaultReportMsg::fault_list() const {
  // @@protoc_insertion_point(field_list:IBUS.FaultReportMsg.fault_list)
  return fault_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IBUS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fault_5freport_2eproto
